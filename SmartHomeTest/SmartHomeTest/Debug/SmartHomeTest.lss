
SmartHomeTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000110  00800100  000013e0  00001474  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000205  00800210  00800210  00001584  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001584  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000015e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00001620  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001bfd  00000000  00000000  000017c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dc8  00000000  00000000  000033bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000eb7  00000000  00000000  00004185  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003fc  00000000  00000000  0000503c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006e5  00000000  00000000  00005438  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d43  00000000  00000000  00005b1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00006860  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 4d 02 	jmp	0x49a	; 0x49a <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 9b 02 	jmp	0x536	; 0x536 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e0 ee       	ldi	r30, 0xE0	; 224
      7c:	f3 e1       	ldi	r31, 0x13	; 19
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 31       	cpi	r26, 0x10	; 16
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	24 e0       	ldi	r18, 0x04	; 4
      8c:	a0 e1       	ldi	r26, 0x10	; 16
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a5 31       	cpi	r26, 0x15	; 21
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 70 01 	call	0x2e0	; 0x2e0 <main>
      9e:	0c 94 ee 09 	jmp	0x13dc	; 0x13dc <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_init>:
	return 0;
}

void ADC_init(void)
{
	ADMUX |= (1 << REFS0); //Voltage Reference Selection : AVCC with external capacitor at AREF pin
      a6:	ec e7       	ldi	r30, 0x7C	; 124
      a8:	f0 e0       	ldi	r31, 0x00	; 0
      aa:	80 81       	ld	r24, Z
      ac:	80 64       	ori	r24, 0x40	; 64
      ae:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); //ADC enable, prescaler 128분주
      b0:	ea e7       	ldi	r30, 0x7A	; 122
      b2:	f0 e0       	ldi	r31, 0x00	; 0
      b4:	80 81       	ld	r24, Z
      b6:	87 68       	ori	r24, 0x87	; 135
      b8:	80 83       	st	Z, r24
      ba:	08 95       	ret

000000bc <ADC_converting_value>:

int ADC_converting_value(char channel)
{
	int value = 0;
	
	ADMUX &= 0b11110000; //Analog Channel Selection Bits 초기화
      bc:	ec e7       	ldi	r30, 0x7C	; 124
      be:	f0 e0       	ldi	r31, 0x00	; 0
      c0:	90 81       	ld	r25, Z
      c2:	90 7f       	andi	r25, 0xF0	; 240
      c4:	90 83       	st	Z, r25
	ADMUX |= channel; //채널 설정
      c6:	90 81       	ld	r25, Z
      c8:	89 2b       	or	r24, r25
      ca:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      cc:	8f e1       	ldi	r24, 0x1F	; 31
      ce:	93 e0       	ldi	r25, 0x03	; 3
      d0:	01 97       	sbiw	r24, 0x01	; 1
      d2:	f1 f7       	brne	.-4      	; 0xd0 <ADC_converting_value+0x14>
      d4:	00 c0       	rjmp	.+0      	; 0xd6 <ADC_converting_value+0x1a>
      d6:	00 00       	nop
	_delay_us(200); //제대로 동작하는데 약간의 시간 필요
	
	ADCSRA |= (1 << ADSC); //Start Conversion //When the conversion is complete, it returns to zero
      d8:	ea e7       	ldi	r30, 0x7A	; 122
      da:	f0 e0       	ldi	r31, 0x00	; 0
      dc:	80 81       	ld	r24, Z
      de:	80 64       	ori	r24, 0x40	; 64
      e0:	80 83       	st	Z, r24
	while(!(ADCSRA  & (1 << ADIF))); //ADIF : conversing 이 완료되면 set //ADIF가 0인동안 기다려주기
      e2:	80 81       	ld	r24, Z
      e4:	84 ff       	sbrs	r24, 4
      e6:	fd cf       	rjmp	.-6      	; 0xe2 <ADC_converting_value+0x26>
		/* //컴파일러 문제인듯 // 수식에는 문제 없으나 변경되는 값이 출력안됨
			value = ADCH;
			value <<= 8;
			value += ADCL;  //value |= ADCL; 
		*/
	value = ADCL + ADCH * 256;
      e8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
      ec:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	value = (value + 1) * 500.0 / 1024 + 3; //+3 : 오차 보정 //5 * 100 / 1024 : 0 ~ 5V 사이의 값 , 소숫점을 위해서 *100
      f0:	70 e0       	ldi	r23, 0x00	; 0
      f2:	76 2f       	mov	r23, r22
      f4:	66 27       	eor	r22, r22
      f6:	68 0f       	add	r22, r24
      f8:	71 1d       	adc	r23, r1
      fa:	6f 5f       	subi	r22, 0xFF	; 255
      fc:	7f 4f       	sbci	r23, 0xFF	; 255
      fe:	07 2e       	mov	r0, r23
     100:	00 0c       	add	r0, r0
     102:	88 0b       	sbc	r24, r24
     104:	99 0b       	sbc	r25, r25
     106:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__floatsisf>
     10a:	20 e0       	ldi	r18, 0x00	; 0
     10c:	30 e0       	ldi	r19, 0x00	; 0
     10e:	4a ef       	ldi	r20, 0xFA	; 250
     110:	53 e4       	ldi	r21, 0x43	; 67
     112:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <__mulsf3>
     116:	20 e0       	ldi	r18, 0x00	; 0
     118:	30 e0       	ldi	r19, 0x00	; 0
     11a:	40 e8       	ldi	r20, 0x80	; 128
     11c:	5a e3       	ldi	r21, 0x3A	; 58
     11e:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <__mulsf3>
     122:	20 e0       	ldi	r18, 0x00	; 0
     124:	30 e0       	ldi	r19, 0x00	; 0
     126:	40 e4       	ldi	r20, 0x40	; 64
     128:	50 e4       	ldi	r21, 0x40	; 64
     12a:	0e 94 47 03 	call	0x68e	; 0x68e <__addsf3>
	
	return value;
     12e:	0e 94 25 04 	call	0x84a	; 0x84a <__fixsfsi>
}
     132:	cb 01       	movw	r24, r22
     134:	08 95       	ret

00000136 <Volt_to_cm>:
int Volt_to_cm(int value)  //SHARP 2Y0A21 적외선 거리센서
{
	int cm = 0;
	cm = 20.0 / ((value / 100.0) - 0.3); //데이터 시트 보고 대충 계산한 값 //제품마다 다르기때문에 완전 정확하지않음
	
	return cm; 
     136:	bc 01       	movw	r22, r24
     138:	99 0f       	add	r25, r25
     13a:	88 0b       	sbc	r24, r24
     13c:	99 0b       	sbc	r25, r25
     13e:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__floatsisf>
     142:	20 e0       	ldi	r18, 0x00	; 0
     144:	30 e0       	ldi	r19, 0x00	; 0
     146:	48 ec       	ldi	r20, 0xC8	; 200
     148:	52 e4       	ldi	r21, 0x42	; 66
     14a:	0e 94 b3 03 	call	0x766	; 0x766 <__divsf3>
     14e:	2a e9       	ldi	r18, 0x9A	; 154
     150:	39 e9       	ldi	r19, 0x99	; 153
     152:	49 e9       	ldi	r20, 0x99	; 153
     154:	5e e3       	ldi	r21, 0x3E	; 62
     156:	0e 94 46 03 	call	0x68c	; 0x68c <__subsf3>
     15a:	9b 01       	movw	r18, r22
     15c:	ac 01       	movw	r20, r24
     15e:	60 e0       	ldi	r22, 0x00	; 0
     160:	70 e0       	ldi	r23, 0x00	; 0
     162:	80 ea       	ldi	r24, 0xA0	; 160
     164:	91 e4       	ldi	r25, 0x41	; 65
     166:	0e 94 b3 03 	call	0x766	; 0x766 <__divsf3>
     16a:	0e 94 25 04 	call	0x84a	; 0x84a <__fixsfsi>
}
     16e:	cb 01       	movw	r24, r22
     170:	08 95       	ret

00000172 <Bluetooth_init>:




void Bluetooth_init(void) {
	UART0_init(9600);
     172:	60 e8       	ldi	r22, 0x80	; 128
     174:	75 e2       	ldi	r23, 0x25	; 37
     176:	80 e0       	ldi	r24, 0x00	; 0
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	0e 94 0d 03 	call	0x61a	; 0x61a <UART0_init>
     17e:	08 95       	ret

00000180 <DHT11_init>:
   return 0;
}

void DHT11_init(void)
{
   DHT11_DDR |= 1 << DHT11_PORT_num;
     180:	24 9a       	sbi	0x04, 4	; 4
   DHT11_PORT |= 1 << DHT11_PORT_num;
     182:	2c 9a       	sbi	0x05, 4	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     184:	2f ef       	ldi	r18, 0xFF	; 255
     186:	8b e7       	ldi	r24, 0x7B	; 123
     188:	92 e9       	ldi	r25, 0x92	; 146
     18a:	21 50       	subi	r18, 0x01	; 1
     18c:	80 40       	sbci	r24, 0x00	; 0
     18e:	90 40       	sbci	r25, 0x00	; 0
     190:	e1 f7       	brne	.-8      	; 0x18a <DHT11_init+0xa>
     192:	00 c0       	rjmp	.+0      	; 0x194 <DHT11_init+0x14>
     194:	00 00       	nop
     196:	08 95       	ret

00000198 <rx_byte>:
   
   return;
}

char rx_byte(void)
{
     198:	48 e0       	ldi	r20, 0x08	; 8
     19a:	50 e0       	ldi	r21, 0x00	; 0
   char data = 0;
     19c:	80 e0       	ldi	r24, 0x00	; 0
     19e:	0a c0       	rjmp	.+20     	; 0x1b4 <rx_byte+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1a0:	95 e0       	ldi	r25, 0x05	; 5
     1a2:	9a 95       	dec	r25
     1a4:	f1 f7       	brne	.-4      	; 0x1a2 <rx_byte+0xa>
     1a6:	00 00       	nop
   {
	   //
      while(!(DHT11_PIN & (1 << DHT11_PORT_num))) // low인동안 기다리기 // 50us
	  {
		  _delay_us(1);
		  count++;
     1a8:	2f 5f       	subi	r18, 0xFF	; 255
     1aa:	3f 4f       	sbci	r19, 0xFF	; 255
		  if(count >= 200) break;
     1ac:	28 3c       	cpi	r18, 0xC8	; 200
     1ae:	31 05       	cpc	r19, r1
     1b0:	19 f4       	brne	.+6      	; 0x1b8 <rx_byte+0x20>
     1b2:	26 c0       	rjmp	.+76     	; 0x200 <rx_byte+0x68>
   return;
}

char rx_byte(void)
{
   char data = 0;
     1b4:	20 e0       	ldi	r18, 0x00	; 0
     1b6:	30 e0       	ldi	r19, 0x00	; 0
   int count = 0;
   for(int i = 0; i < 8; i++)
   {
	   //
      while(!(DHT11_PIN & (1 << DHT11_PORT_num))) // low인동안 기다리기 // 50us
     1b8:	1c 9b       	sbis	0x03, 4	; 3
     1ba:	f2 cf       	rjmp	.-28     	; 0x1a0 <rx_byte+0x8>
	  {
		  _delay_us(1);
		  count++;
		  if(count >= 200) break;
	  }
	  if(count >= 200) break;
     1bc:	28 3c       	cpi	r18, 0xC8	; 200
     1be:	31 05       	cpc	r19, r1
     1c0:	ec f4       	brge	.+58     	; 0x1fc <rx_byte+0x64>
     1c2:	90 ea       	ldi	r25, 0xA0	; 160
     1c4:	9a 95       	dec	r25
     1c6:	f1 f7       	brne	.-4      	; 0x1c4 <rx_byte+0x2c>
	  count = 0;
     
	  _delay_us(30); // high 26-28 us : data "0"  // 데이터 값이 1이면 30us 지나도 여전히 high 이기때문에
     
	  data = data << 1;      // RH_integral <<= 1;
     1c8:	88 0f       	add	r24, r24
      if(DHT11_PIN & (1 << DHT11_PORT_num))//들어온게 1일때만 끝자리에 넣어준다
     1ca:	1c 9b       	sbis	0x03, 4	; 3
     1cc:	0c c0       	rjmp	.+24     	; 0x1e6 <rx_byte+0x4e>
      {
         data |= 0b00000001;
     1ce:	81 60       	ori	r24, 0x01	; 1
     1d0:	0a c0       	rjmp	.+20     	; 0x1e6 <rx_byte+0x4e>
     1d2:	95 e0       	ldi	r25, 0x05	; 5
     1d4:	9a 95       	dec	r25
     1d6:	f1 f7       	brne	.-4      	; 0x1d4 <rx_byte+0x3c>
     1d8:	00 00       	nop
      }
	  
      while(DHT11_PIN & (1 << DHT11_PORT_num)) //data 값이 1인 경우(high) 시간 보내주기
	  {
		  _delay_us(1);
		  count++;
     1da:	2f 5f       	subi	r18, 0xFF	; 255
     1dc:	3f 4f       	sbci	r19, 0xFF	; 255
		  if(count >= 200) break;
     1de:	28 3c       	cpi	r18, 0xC8	; 200
     1e0:	31 05       	cpc	r19, r1
     1e2:	19 f4       	brne	.+6      	; 0x1ea <rx_byte+0x52>
     1e4:	0d c0       	rjmp	.+26     	; 0x200 <rx_byte+0x68>
   return;
}

char rx_byte(void)
{
   char data = 0;
     1e6:	20 e0       	ldi	r18, 0x00	; 0
     1e8:	30 e0       	ldi	r19, 0x00	; 0
      if(DHT11_PIN & (1 << DHT11_PORT_num))//들어온게 1일때만 끝자리에 넣어준다
      {
         data |= 0b00000001;
      }
	  
      while(DHT11_PIN & (1 << DHT11_PORT_num)) //data 값이 1인 경우(high) 시간 보내주기
     1ea:	1c 99       	sbic	0x03, 4	; 3
     1ec:	f2 cf       	rjmp	.-28     	; 0x1d2 <rx_byte+0x3a>
	  {
		  _delay_us(1);
		  count++;
		  if(count >= 200) break;
	  }
	  if(count >= 200) break;
     1ee:	28 3c       	cpi	r18, 0xC8	; 200
     1f0:	31 05       	cpc	r19, r1
     1f2:	24 f4       	brge	.+8      	; 0x1fc <rx_byte+0x64>
     1f4:	41 50       	subi	r20, 0x01	; 1
     1f6:	51 09       	sbc	r21, r1

char rx_byte(void)
{
   char data = 0;
   int count = 0;
   for(int i = 0; i < 8; i++)
     1f8:	e9 f6       	brne	.-70     	; 0x1b4 <rx_byte+0x1c>
     1fa:	08 95       	ret
   {
      while(!(DHT11_PIN & (1 << DHT11_PORT_num))); // low인동안 기다리기 // 50us
      while(DHT11_PIN & (1 << DHT11_PORT_num)); //data 값이 1인 경우(high) 시간 보내주기
   }
   */
   if(count >= 200) return 255;
     1fc:	8f ef       	ldi	r24, 0xFF	; 255
     1fe:	08 95       	ret
     200:	8f ef       	ldi	r24, 0xFF	; 255
   else return data;
}
     202:	08 95       	ret

00000204 <data_output>:

void data_output(void)//data 핀 아웃풋 설정
{
   //대기 상태로 만들어주기
   DHT11_DDR |= (1 << DHT11_PORT_num);   //출력 전환
     204:	24 9a       	sbi	0x04, 4	; 4
   DHT11_PORT |= 1 << DHT11_PORT_num;
     206:	2c 9a       	sbi	0x05, 4	; 5
     208:	08 95       	ret

0000020a <data_input>:
}

void data_input(void)
{
   //DHT11_PORT &= ~(1 << DHT11_PORT4); //내부 PULL UP 없이
   DHT11_DDR &= ~(1 << DHT11_PORT_num);  //입력 전환
     20a:	24 98       	cbi	0x04, 4	; 4
     20c:	08 95       	ret

0000020e <dumi_read>:
   return;
}

void dumi_read(void) //비트 읽고 흘려보내기
{
	while(DHT11_PIN & (1 << DHT11_PORT_num));  //4번 핀의 값이 1인 동안 기다리기
     20e:	1c 99       	sbic	0x03, 4	; 3
     210:	fe cf       	rjmp	.-4      	; 0x20e <dumi_read>
	while(!(DHT11_PIN & (1 << DHT11_PORT_num))); // 0인 동안, low인동안 80 마이크로 s 기다리는거
     212:	1c 9b       	sbis	0x03, 4	; 3
     214:	fe cf       	rjmp	.-4      	; 0x212 <dumi_read+0x4>
	while(DHT11_PIN & (1 << DHT11_PORT_num)); //1인 동안, high 인동안 80 마이크로s 기다리기
     216:	1c 99       	sbic	0x03, 4	; 3
     218:	fe cf       	rjmp	.-4      	; 0x216 <dumi_read+0x8>
	// => 버리는 신호들 , 대기/ 5.2 MCU Sends out Start Signal to DHT
	
	return;
}
     21a:	08 95       	ret

0000021c <DHT11_trigger>:

void DHT11_trigger(void)
{
   DHT11_PORT &= ~(1 << DHT11_PORT_num); //Trigger신호 , low
     21c:	2c 98       	cbi	0x05, 4	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     21e:	2f ef       	ldi	r18, 0xFF	; 255
     220:	80 ee       	ldi	r24, 0xE0	; 224
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	21 50       	subi	r18, 0x01	; 1
     226:	80 40       	sbci	r24, 0x00	; 0
     228:	90 40       	sbci	r25, 0x00	; 0
     22a:	e1 f7       	brne	.-8      	; 0x224 <DHT11_trigger+0x8>
     22c:	00 c0       	rjmp	.+0      	; 0x22e <DHT11_trigger+0x12>
     22e:	00 00       	nop
   
   _delay_ms(18);
   
   DHT11_PORT |= 1 << DHT11_PORT_num; //high
     230:	2c 9a       	sbi	0x05, 4	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     232:	2a e1       	ldi	r18, 0x1A	; 26
     234:	2a 95       	dec	r18
     236:	f1 f7       	brne	.-4      	; 0x234 <DHT11_trigger+0x18>
     238:	00 c0       	rjmp	.+0      	; 0x23a <DHT11_trigger+0x1e>
     23a:	08 95       	ret

0000023c <check_Sharp>:
	
	return;
}

void check_Sharp(){
	int cm = Volt_to_cm(ADC_converting_value(2));
     23c:	82 e0       	ldi	r24, 0x02	; 2
     23e:	0e 94 5e 00 	call	0xbc	; 0xbc <ADC_converting_value>
     242:	0e 94 9b 00 	call	0x136	; 0x136 <Volt_to_cm>
	printf("cm %d\n", cm);
     246:	9f 93       	push	r25
     248:	8f 93       	push	r24
     24a:	87 e0       	ldi	r24, 0x07	; 7
     24c:	91 e0       	ldi	r25, 0x01	; 1
     24e:	9f 93       	push	r25
     250:	8f 93       	push	r24
     252:	0e 94 cc 05 	call	0xb98	; 0xb98 <printf>
	
	return;
     256:	0f 90       	pop	r0
     258:	0f 90       	pop	r0
     25a:	0f 90       	pop	r0
     25c:	0f 90       	pop	r0
     25e:	08 95       	ret

00000260 <check_DHT11>:
}
void check_DHT11() {
     260:	ef 92       	push	r14
     262:	ff 92       	push	r15
     264:	0f 93       	push	r16
     266:	1f 93       	push	r17
     268:	cf 93       	push	r28
     26a:	df 93       	push	r29
	 char RH_integral, RH_decimal, Tmpr_integral, Tmpr_decimal;
	 int lux = ADC_converting_value(1);
     26c:	81 e0       	ldi	r24, 0x01	; 1
     26e:	0e 94 5e 00 	call	0xbc	; 0xbc <ADC_converting_value>
     272:	f8 2e       	mov	r15, r24
     274:	e9 2e       	mov	r14, r25
	 
	 DHT11_trigger(); //트리거
     276:	0e 94 0e 01 	call	0x21c	; 0x21c <DHT11_trigger>
	 
	 data_input(); //입력 전환
     27a:	0e 94 05 01 	call	0x20a	; 0x20a <data_input>
	 dumi_read(); // 데이터 전송 전에 시간 흘려보내기
     27e:	0e 94 07 01 	call	0x20e	; 0x20e <dumi_read>
	 
	 
	 RH_integral = rx_byte(); //데이터 값 저장
     282:	0e 94 cc 00 	call	0x198	; 0x198 <rx_byte>
     286:	c8 2f       	mov	r28, r24
	 RH_decimal  = rx_byte();
     288:	0e 94 cc 00 	call	0x198	; 0x198 <rx_byte>
     28c:	d8 2f       	mov	r29, r24
	 Tmpr_integral = rx_byte();
     28e:	0e 94 cc 00 	call	0x198	; 0x198 <rx_byte>
     292:	18 2f       	mov	r17, r24
	 Tmpr_decimal = rx_byte();
     294:	0e 94 cc 00 	call	0x198	; 0x198 <rx_byte>
     298:	08 2f       	mov	r16, r24
	 
	 rx_byte(); //check_sum
     29a:	0e 94 cc 00 	call	0x198	; 0x198 <rx_byte>
	 
	 //DHT11_init();
	 data_output(); // data pin 출력 전환
     29e:	0e 94 02 01 	call	0x204	; 0x204 <data_output>
	
	 printf("env humi %d.%d temper %d.%d cds %d\n", RH_integral, RH_decimal, Tmpr_integral, Tmpr_decimal, lux);
     2a2:	ef 92       	push	r14
     2a4:	ff 92       	push	r15
     2a6:	1f 92       	push	r1
     2a8:	0f 93       	push	r16
     2aa:	1f 92       	push	r1
     2ac:	1f 93       	push	r17
     2ae:	1f 92       	push	r1
     2b0:	df 93       	push	r29
     2b2:	1f 92       	push	r1
     2b4:	cf 93       	push	r28
     2b6:	8e e0       	ldi	r24, 0x0E	; 14
     2b8:	91 e0       	ldi	r25, 0x01	; 1
     2ba:	9f 93       	push	r25
     2bc:	8f 93       	push	r24
     2be:	0e 94 cc 05 	call	0xb98	; 0xb98 <printf>
	// printf("temper %d.%d\n", Tmpr_integral, Tmpr_decimal);
	 
	// _delay_ms(1500); //적당한 시간을 주지않으면 초기화를 못해서 한번만 출력하고 안된당
	 //delay_flag = 1;
	 
	return;
     2c2:	8d b7       	in	r24, 0x3d	; 61
     2c4:	9e b7       	in	r25, 0x3e	; 62
     2c6:	0c 96       	adiw	r24, 0x0c	; 12
     2c8:	0f b6       	in	r0, 0x3f	; 63
     2ca:	f8 94       	cli
     2cc:	9e bf       	out	0x3e, r25	; 62
     2ce:	0f be       	out	0x3f, r0	; 63
     2d0:	8d bf       	out	0x3d, r24	; 61
	  
	
}
     2d2:	df 91       	pop	r29
     2d4:	cf 91       	pop	r28
     2d6:	1f 91       	pop	r17
     2d8:	0f 91       	pop	r16
     2da:	ff 90       	pop	r15
     2dc:	ef 90       	pop	r14
     2de:	08 95       	ret

000002e0 <main>:
{
	char cmd_idx = 0;
	
	//DDRB |= 1 << PORTB5;
	//PORTB &= ~(1 << PORTB5);
	Bluetooth_init();
     2e0:	0e 94 b9 00 	call	0x172	; 0x172 <Bluetooth_init>
	Timer0_init();
     2e4:	0e 94 74 02 	call	0x4e8	; 0x4e8 <Timer0_init>
	Timer2_init_fast_PWM_outA_Motor();
     2e8:	0e 94 82 02 	call	0x504	; 0x504 <Timer2_init_fast_PWM_outA_Motor>
	DHT11_init();
     2ec:	0e 94 c0 00 	call	0x180	; 0x180 <DHT11_init>
	ADC_init();
     2f0:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_init>
	sei();
     2f4:	78 94       	sei

extern volatile char check_DHT11_flag, delay_flag;

int main(void)
{
	char cmd_idx = 0;
     2f6:	c0 e0       	ldi	r28, 0x00	; 0
    {
		
		
		if(RX_cmd_count) {
			RX_cmd_count--;
			if(!strcmp(buffer[cmd_idx], "led room on")) { //strcmp() : 비교해서 같으면 return 0
     2f8:	0f 2e       	mov	r0, r31
     2fa:	f2 e3       	ldi	r31, 0x32	; 50
     2fc:	ff 2e       	mov	r15, r31
     2fe:	f0 2d       	mov	r31, r0
				//delay_flag = 1;
			}
			//_delay_ms(1000);
			//while(delay_flag);
			cmd_idx++;
			cmd_idx = cmd_idx % COMMAND_MAX;
     300:	dd ec       	ldi	r29, 0xCD	; 205
			else if(!strcmp(buffer[cmd_idx], "fan on")) {
				OCR2B = 170;
				//delay_flag = 1;
			}
			else if(!strcmp(buffer[cmd_idx], "fan off")) {
				OCR2B = 0;
     302:	0f 2e       	mov	r0, r31
     304:	f4 eb       	ldi	r31, 0xB4	; 180
     306:	cf 2e       	mov	r12, r31
     308:	d1 2c       	mov	r13, r1
     30a:	f0 2d       	mov	r31, r0
				PORTD &= ~(1 << PORTD2 | 1 << PORTD4 | 1 << PORTD5 | 1 << PORTD6);
				//delay_flag = 1;
				//printf("off\n");
			}
			else if(!strcmp(buffer[cmd_idx], "fan on")) {
				OCR2B = 170;
     30c:	0f 2e       	mov	r0, r31
     30e:	fa ea       	ldi	r31, 0xAA	; 170
     310:	ef 2e       	mov	r14, r31
     312:	f0 2d       	mov	r31, r0
	
	while (1) 
    {
		
		
		if(RX_cmd_count) {
     314:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <RX_cmd_count>
     318:	88 23       	and	r24, r24
     31a:	09 f4       	brne	.+2      	; 0x31e <main+0x3e>
     31c:	b2 c0       	rjmp	.+356    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
			RX_cmd_count--;
     31e:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <RX_cmd_count>
     322:	81 50       	subi	r24, 0x01	; 1
     324:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <RX_cmd_count>
			if(!strcmp(buffer[cmd_idx], "led room on")) { //strcmp() : 비교해서 같으면 return 0
     328:	fc 9e       	mul	r15, r28
     32a:	80 01       	movw	r16, r0
     32c:	11 24       	eor	r1, r1
     32e:	0b 5e       	subi	r16, 0xEB	; 235
     330:	1d 4f       	sbci	r17, 0xFD	; 253
     332:	62 e3       	ldi	r22, 0x32	; 50
     334:	71 e0       	ldi	r23, 0x01	; 1
     336:	c8 01       	movw	r24, r16
     338:	0e 94 78 05 	call	0xaf0	; 0xaf0 <strcmp>
     33c:	89 2b       	or	r24, r25
     33e:	11 f4       	brne	.+4      	; 0x344 <main+0x64>
				PORTD |= 1 << PORTD2;
     340:	5a 9a       	sbi	0x0b, 2	; 11
     342:	90 c0       	rjmp	.+288    	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
				//delay_flag = 1;
				//printf("on\n");
			}
			else if(!strcmp(buffer[cmd_idx], "led room off")) {
     344:	6e e3       	ldi	r22, 0x3E	; 62
     346:	71 e0       	ldi	r23, 0x01	; 1
     348:	c8 01       	movw	r24, r16
     34a:	0e 94 78 05 	call	0xaf0	; 0xaf0 <strcmp>
     34e:	89 2b       	or	r24, r25
     350:	11 f4       	brne	.+4      	; 0x356 <main+0x76>
				PORTD &= ~(1 << PORTD2);
     352:	5a 98       	cbi	0x0b, 2	; 11
     354:	87 c0       	rjmp	.+270    	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
				//delay_flag = 1;
				//printf("off\n");
			}
			else if(!strcmp(buffer[cmd_idx], "led living on")) {
     356:	6b e4       	ldi	r22, 0x4B	; 75
     358:	71 e0       	ldi	r23, 0x01	; 1
     35a:	c8 01       	movw	r24, r16
     35c:	0e 94 78 05 	call	0xaf0	; 0xaf0 <strcmp>
     360:	89 2b       	or	r24, r25
     362:	11 f4       	brne	.+4      	; 0x368 <main+0x88>
				PORTD |= 1 << PORTD4;
     364:	5c 9a       	sbi	0x0b, 4	; 11
     366:	7e c0       	rjmp	.+252    	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
				//delay_flag = 1;
				//printf("off\n");
			}
			else if(!strcmp(buffer[cmd_idx], "led living off")) {
     368:	69 e5       	ldi	r22, 0x59	; 89
     36a:	71 e0       	ldi	r23, 0x01	; 1
     36c:	c8 01       	movw	r24, r16
     36e:	0e 94 78 05 	call	0xaf0	; 0xaf0 <strcmp>
     372:	89 2b       	or	r24, r25
     374:	11 f4       	brne	.+4      	; 0x37a <main+0x9a>
				PORTD &= ~(1 << PORTD4);
     376:	5c 98       	cbi	0x0b, 4	; 11
     378:	75 c0       	rjmp	.+234    	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
				//delay_flag = 1;
				//printf("off\n");
			}
			else if(!strcmp(buffer[cmd_idx], "led kitchen on")) {
     37a:	68 e6       	ldi	r22, 0x68	; 104
     37c:	71 e0       	ldi	r23, 0x01	; 1
     37e:	c8 01       	movw	r24, r16
     380:	0e 94 78 05 	call	0xaf0	; 0xaf0 <strcmp>
     384:	89 2b       	or	r24, r25
     386:	11 f4       	brne	.+4      	; 0x38c <main+0xac>
				PORTD |= 1 << PORTD5;
     388:	5d 9a       	sbi	0x0b, 5	; 11
     38a:	6c c0       	rjmp	.+216    	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
				//delay_flag = 1;
				//printf("off\n");
			}
			else if(!strcmp(buffer[cmd_idx], "led kitchen off")) {
     38c:	67 e7       	ldi	r22, 0x77	; 119
     38e:	71 e0       	ldi	r23, 0x01	; 1
     390:	c8 01       	movw	r24, r16
     392:	0e 94 78 05 	call	0xaf0	; 0xaf0 <strcmp>
     396:	89 2b       	or	r24, r25
     398:	11 f4       	brne	.+4      	; 0x39e <main+0xbe>
				PORTD &= ~(1 << PORTD5);
     39a:	5d 98       	cbi	0x0b, 5	; 11
     39c:	63 c0       	rjmp	.+198    	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
				//delay_flag = 1;
				//printf("off\n");
			}
			else if(!strcmp(buffer[cmd_idx], "led bathroom on")) {
     39e:	67 e8       	ldi	r22, 0x87	; 135
     3a0:	71 e0       	ldi	r23, 0x01	; 1
     3a2:	c8 01       	movw	r24, r16
     3a4:	0e 94 78 05 	call	0xaf0	; 0xaf0 <strcmp>
     3a8:	89 2b       	or	r24, r25
     3aa:	11 f4       	brne	.+4      	; 0x3b0 <main+0xd0>
				PORTD |= 1 << PORTD6;
     3ac:	5e 9a       	sbi	0x0b, 6	; 11
     3ae:	5a c0       	rjmp	.+180    	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
				//delay_flag = 1;
				//printf("off\n");
			}
			else if(!strcmp(buffer[cmd_idx], "led bathroom off")) {
     3b0:	67 e9       	ldi	r22, 0x97	; 151
     3b2:	71 e0       	ldi	r23, 0x01	; 1
     3b4:	c8 01       	movw	r24, r16
     3b6:	0e 94 78 05 	call	0xaf0	; 0xaf0 <strcmp>
     3ba:	89 2b       	or	r24, r25
     3bc:	11 f4       	brne	.+4      	; 0x3c2 <main+0xe2>
				PORTD &= ~(1 << PORTD6);
     3be:	5e 98       	cbi	0x0b, 6	; 11
     3c0:	51 c0       	rjmp	.+162    	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
				//delay_flag = 1;
				//printf("off\n");
			}
			else if(!strcmp(buffer[cmd_idx], "led door on")) {
     3c2:	68 ea       	ldi	r22, 0xA8	; 168
     3c4:	71 e0       	ldi	r23, 0x01	; 1
     3c6:	c8 01       	movw	r24, r16
     3c8:	0e 94 78 05 	call	0xaf0	; 0xaf0 <strcmp>
     3cc:	89 2b       	or	r24, r25
     3ce:	11 f4       	brne	.+4      	; 0x3d4 <main+0xf4>
				PORTD |= 1 << PORTD7;
     3d0:	5f 9a       	sbi	0x0b, 7	; 11
     3d2:	48 c0       	rjmp	.+144    	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
				//delay_flag = 1;
				//printf("off\n");
			}
			else if(!strcmp(buffer[cmd_idx], "led door off")) {
     3d4:	64 eb       	ldi	r22, 0xB4	; 180
     3d6:	71 e0       	ldi	r23, 0x01	; 1
     3d8:	c8 01       	movw	r24, r16
     3da:	0e 94 78 05 	call	0xaf0	; 0xaf0 <strcmp>
     3de:	89 2b       	or	r24, r25
     3e0:	11 f4       	brne	.+4      	; 0x3e6 <main+0x106>
				PORTD &= ~(1 << PORTD7);
     3e2:	5f 98       	cbi	0x0b, 7	; 11
     3e4:	3f c0       	rjmp	.+126    	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
				//delay_flag = 1;
				//printf("off\n");
			}
			else if(!strcmp(buffer[cmd_idx], "led whole on")) {
     3e6:	61 ec       	ldi	r22, 0xC1	; 193
     3e8:	71 e0       	ldi	r23, 0x01	; 1
     3ea:	c8 01       	movw	r24, r16
     3ec:	0e 94 78 05 	call	0xaf0	; 0xaf0 <strcmp>
     3f0:	89 2b       	or	r24, r25
     3f2:	21 f4       	brne	.+8      	; 0x3fc <main+0x11c>
				PORTD |= 1 << PORTD2 | 1 << PORTD4 | 1 << PORTD5 | 1 << PORTD6 | 1 << PORTD7;
     3f4:	8b b1       	in	r24, 0x0b	; 11
     3f6:	84 6f       	ori	r24, 0xF4	; 244
     3f8:	8b b9       	out	0x0b, r24	; 11
     3fa:	34 c0       	rjmp	.+104    	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
				//delay_flag = 1;
				//printf("off\n");
			}
			else if(!strcmp(buffer[cmd_idx], "led whole off")) {
     3fc:	6e ec       	ldi	r22, 0xCE	; 206
     3fe:	71 e0       	ldi	r23, 0x01	; 1
     400:	c8 01       	movw	r24, r16
     402:	0e 94 78 05 	call	0xaf0	; 0xaf0 <strcmp>
     406:	89 2b       	or	r24, r25
     408:	21 f4       	brne	.+8      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
				PORTD &= ~(1 << PORTD2 | 1 << PORTD4 | 1 << PORTD5 | 1 << PORTD6 | 1 << PORTD7);
     40a:	8b b1       	in	r24, 0x0b	; 11
     40c:	8b 70       	andi	r24, 0x0B	; 11
     40e:	8b b9       	out	0x0b, r24	; 11
     410:	29 c0       	rjmp	.+82     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
				//delay_flag = 1;
				//printf("off\n");
			}
			else if(!strcmp(buffer[cmd_idx], "led whole on door")) {
     412:	6c ed       	ldi	r22, 0xDC	; 220
     414:	71 e0       	ldi	r23, 0x01	; 1
     416:	c8 01       	movw	r24, r16
     418:	0e 94 78 05 	call	0xaf0	; 0xaf0 <strcmp>
     41c:	89 2b       	or	r24, r25
     41e:	21 f4       	brne	.+8      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
				PORTD |= 1 << PORTD2 | 1 << PORTD4 | 1 << PORTD5 | 1 << PORTD6;
     420:	8b b1       	in	r24, 0x0b	; 11
     422:	84 67       	ori	r24, 0x74	; 116
     424:	8b b9       	out	0x0b, r24	; 11
     426:	1e c0       	rjmp	.+60     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
				//delay_flag = 1;
				//printf("off\n");
			}
			else if(!strcmp(buffer[cmd_idx], "led whole off door")) {
     428:	6e ee       	ldi	r22, 0xEE	; 238
     42a:	71 e0       	ldi	r23, 0x01	; 1
     42c:	c8 01       	movw	r24, r16
     42e:	0e 94 78 05 	call	0xaf0	; 0xaf0 <strcmp>
     432:	89 2b       	or	r24, r25
     434:	21 f4       	brne	.+8      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
				PORTD &= ~(1 << PORTD2 | 1 << PORTD4 | 1 << PORTD5 | 1 << PORTD6);
     436:	8b b1       	in	r24, 0x0b	; 11
     438:	8b 78       	andi	r24, 0x8B	; 139
     43a:	8b b9       	out	0x0b, r24	; 11
     43c:	13 c0       	rjmp	.+38     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
				//delay_flag = 1;
				//printf("off\n");
			}
			else if(!strcmp(buffer[cmd_idx], "fan on")) {
     43e:	61 e0       	ldi	r22, 0x01	; 1
     440:	72 e0       	ldi	r23, 0x02	; 2
     442:	c8 01       	movw	r24, r16
     444:	0e 94 78 05 	call	0xaf0	; 0xaf0 <strcmp>
     448:	89 2b       	or	r24, r25
     44a:	19 f4       	brne	.+6      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
				OCR2B = 170;
     44c:	f6 01       	movw	r30, r12
     44e:	e0 82       	st	Z, r14
     450:	09 c0       	rjmp	.+18     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
				//delay_flag = 1;
			}
			else if(!strcmp(buffer[cmd_idx], "fan off")) {
     452:	68 e0       	ldi	r22, 0x08	; 8
     454:	72 e0       	ldi	r23, 0x02	; 2
     456:	c8 01       	movw	r24, r16
     458:	0e 94 78 05 	call	0xaf0	; 0xaf0 <strcmp>
     45c:	89 2b       	or	r24, r25
     45e:	11 f4       	brne	.+4      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
				OCR2B = 0;
     460:	f6 01       	movw	r30, r12
     462:	10 82       	st	Z, r1
				//delay_flag = 1;
			}
			//_delay_ms(1000);
			//while(delay_flag);
			cmd_idx++;
     464:	91 e0       	ldi	r25, 0x01	; 1
     466:	9c 0f       	add	r25, r28
			cmd_idx = cmd_idx % COMMAND_MAX;
     468:	9d 9f       	mul	r25, r29
     46a:	c1 2d       	mov	r28, r1
     46c:	11 24       	eor	r1, r1
     46e:	c6 95       	lsr	r28
     470:	c6 95       	lsr	r28
     472:	c6 95       	lsr	r28
     474:	cc 0f       	add	r28, r28
     476:	8c 2f       	mov	r24, r28
     478:	88 0f       	add	r24, r24
     47a:	88 0f       	add	r24, r24
     47c:	c8 0f       	add	r28, r24
     47e:	9c 1b       	sub	r25, r28
     480:	c9 2f       	mov	r28, r25
		}
		
		if(check_DHT11_flag) {
     482:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <check_DHT11_flag>
     486:	88 23       	and	r24, r24
     488:	09 f4       	brne	.+2      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     48a:	44 cf       	rjmp	.-376    	; 0x314 <main+0x34>
			check_DHT11_flag = 0;
     48c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <check_DHT11_flag>
			check_DHT11();
     490:	0e 94 30 01 	call	0x260	; 0x260 <check_DHT11>
			check_Sharp();
     494:	0e 94 1e 01 	call	0x23c	; 0x23c <check_Sharp>
     498:	3d cf       	rjmp	.-390    	; 0x314 <main+0x34>

0000049a <__vector_14>:
void Timer1_init_CTC_outA(void) //A 출력을 쓰기위한 초기화 함수
{
	DDRB |= 1 << PORTB1;
	TCCR1A |= 1 << COM1A0; //TOGGLE
	TCCR1B |= 1 << WGM12 | 1 <<  CS11;  //CTC 모드//64분주
	OCR1A = 0; // 소리 끄기
     49a:	1f 92       	push	r1
     49c:	0f 92       	push	r0
     49e:	0f b6       	in	r0, 0x3f	; 63
     4a0:	0f 92       	push	r0
     4a2:	11 24       	eor	r1, r1
     4a4:	2f 93       	push	r18
     4a6:	8f 93       	push	r24
     4a8:	9f 93       	push	r25
     4aa:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <__data_end>
     4ae:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <__data_end+0x1>
     4b2:	01 96       	adiw	r24, 0x01	; 1
     4b4:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <__data_end+0x1>
     4b8:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <__data_end>
     4bc:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <__data_end>
     4c0:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <__data_end+0x1>
     4c4:	8c 3d       	cpi	r24, 0xDC	; 220
     4c6:	95 40       	sbci	r25, 0x05	; 5
     4c8:	3c f0       	brlt	.+14     	; 0x4d8 <__vector_14+0x3e>
     4ca:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <__data_end+0x1>
     4ce:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <__data_end>
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <check_DHT11_flag>
     4d8:	9f 91       	pop	r25
     4da:	8f 91       	pop	r24
     4dc:	2f 91       	pop	r18
     4de:	0f 90       	pop	r0
     4e0:	0f be       	out	0x3f, r0	; 63
     4e2:	0f 90       	pop	r0
     4e4:	1f 90       	pop	r1
     4e6:	18 95       	reti

000004e8 <Timer0_init>:
     4e8:	84 b5       	in	r24, 0x24	; 36
     4ea:	82 60       	ori	r24, 0x02	; 2
     4ec:	84 bd       	out	0x24, r24	; 36
     4ee:	85 b5       	in	r24, 0x25	; 37
     4f0:	83 60       	ori	r24, 0x03	; 3
     4f2:	85 bd       	out	0x25, r24	; 37
     4f4:	89 ef       	ldi	r24, 0xF9	; 249
     4f6:	87 bd       	out	0x27, r24	; 39
     4f8:	ee e6       	ldi	r30, 0x6E	; 110
     4fa:	f0 e0       	ldi	r31, 0x00	; 0
     4fc:	80 81       	ld	r24, Z
     4fe:	82 60       	ori	r24, 0x02	; 2
     500:	80 83       	st	Z, r24
     502:	08 95       	ret

00000504 <Timer2_init_fast_PWM_outA_Motor>:
	return;
}

void Timer2_init_fast_PWM_outA_Motor(void){
	//DDRD |= 1 << DDD3; //DDD <- 레지스터의 비트 이름 //PORTDx랑 define 값이 같음
	DDRB |= 1 << DDD3;
     504:	23 9a       	sbi	0x04, 3	; 4
	DDRD |= 1 << DDD3;
     506:	53 9a       	sbi	0x0a, 3	; 10
	
	TCCR2A |= (1 << COM2A1) | (1 << COM2B1) | (1 << WGM21) | (1 << WGM20);
     508:	e0 eb       	ldi	r30, 0xB0	; 176
     50a:	f0 e0       	ldi	r31, 0x00	; 0
     50c:	80 81       	ld	r24, Z
     50e:	83 6a       	ori	r24, 0xA3	; 163
     510:	80 83       	st	Z, r24
	//TCCR2A |= (1 << COM2B1) | (1 << WGM21) | (1 << WGM20);
	//COM2B1 , COM2B0 : 11 이면 Set OC2B on Compare Match, clear OC2B at BOTTOM, (inverting mode).
	//->match가 되면 1로 되는것. ocr값을 작게 주면 high가 길다. 반대라서 헷갈리니까 10으로 준것
	TCCR2B |= (1 << CS20); //모터 구동 시에는 CS20
     512:	e1 eb       	ldi	r30, 0xB1	; 177
     514:	f0 e0       	ldi	r31, 0x00	; 0
     516:	80 81       	ld	r24, Z
     518:	81 60       	ori	r24, 0x01	; 1
     51a:	80 83       	st	Z, r24
	
	OCR2A = 0; //BOTTOM
     51c:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	OCR2B = 0;
     520:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
     524:	08 95       	ret

00000526 <TX0_char>:
//한 문자 송신 TX
void TX0_char(char data) //ascii
{
	//상태 읽기 / UCSR0A
	//UDRE0 : USART 데이터 레지스터가 비어있으면 1로 set / initial value : 1 
	while(!(UCSR0A & (1 << UDRE0))); //0b00100000 //0이면 기다려서 1이 될때까지 (준비가 될 때까지)
     526:	e0 ec       	ldi	r30, 0xC0	; 192
     528:	f0 e0       	ldi	r31, 0x00	; 0
     52a:	90 81       	ld	r25, Z
     52c:	95 ff       	sbrs	r25, 5
     52e:	fd cf       	rjmp	.-6      	; 0x52a <TX0_char+0x4>
	
	UDR0 = data; //데이터 보낸 것
     530:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     534:	08 95       	ret

00000536 <__vector_18>:
	CR : \R 커서 맨 앞으로
	LF : \N 줄 바꿈
	=> ENTER
	터미널 프로그램마다 설정 다름
*/
ISR(USART_RX_vect) { /* USART Rx Complete */
     536:	1f 92       	push	r1
     538:	0f 92       	push	r0
     53a:	0f b6       	in	r0, 0x3f	; 63
     53c:	0f 92       	push	r0
     53e:	11 24       	eor	r1, r1
     540:	2f 93       	push	r18
     542:	3f 93       	push	r19
     544:	4f 93       	push	r20
     546:	5f 93       	push	r21
     548:	6f 93       	push	r22
     54a:	7f 93       	push	r23
     54c:	8f 93       	push	r24
     54e:	9f 93       	push	r25
     550:	af 93       	push	r26
     552:	bf 93       	push	r27
     554:	ef 93       	push	r30
     556:	ff 93       	push	r31
	static char idx = 0, buf_idx = 0; //명령어 배열 index 제어 
	RX_data = UDR0;
     558:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     55c:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <RX_data>
	
	if(idx < BUFFER_MAX && RX_cmd_count <= COMMAND_MAX) {
     560:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <idx.2082>
     564:	82 33       	cpi	r24, 0x32	; 50
     566:	08 f0       	brcs	.+2      	; 0x56a <__vector_18+0x34>
     568:	40 c0       	rjmp	.+128    	; 0x5ea <__vector_18+0xb4>
     56a:	90 91 09 04 	lds	r25, 0x0409	; 0x800409 <RX_cmd_count>
     56e:	9b 30       	cpi	r25, 0x0B	; 11
     570:	e0 f5       	brcc	.+120    	; 0x5ea <__vector_18+0xb4>
		if(RX_data == '\r' || RX_data == '\n') { //명령이 들어옴
     572:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <RX_data>
     576:	9d 30       	cpi	r25, 0x0D	; 13
     578:	21 f0       	breq	.+8      	; 0x582 <__vector_18+0x4c>
     57a:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <RX_data>
     57e:	9a 30       	cpi	r25, 0x0A	; 10
     580:	19 f5       	brne	.+70     	; 0x5c8 <__vector_18+0x92>
			buffer[buf_idx][idx] = 0; //or '\0' //문자열의 마지막에 null 넣어주기
     582:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <buf_idx.2083>
     586:	22 e3       	ldi	r18, 0x32	; 50
     588:	92 9f       	mul	r25, r18
     58a:	f0 01       	movw	r30, r0
     58c:	11 24       	eor	r1, r1
     58e:	eb 5e       	subi	r30, 0xEB	; 235
     590:	fd 4f       	sbci	r31, 0xFD	; 253
     592:	e8 0f       	add	r30, r24
     594:	f1 1d       	adc	r31, r1
     596:	10 82       	st	Z, r1
			idx = 0; //다음 명령어를 받기위한 clear
     598:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <idx.2082>
			RX_cmd_count++;
     59c:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <RX_cmd_count>
     5a0:	8f 5f       	subi	r24, 0xFF	; 255
     5a2:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <RX_cmd_count>
			
			buf_idx++;
			buf_idx = buf_idx % COMMAND_MAX;
     5a6:	9f 5f       	subi	r25, 0xFF	; 255
     5a8:	8d ec       	ldi	r24, 0xCD	; 205
     5aa:	98 9f       	mul	r25, r24
     5ac:	81 2d       	mov	r24, r1
     5ae:	11 24       	eor	r1, r1
     5b0:	86 95       	lsr	r24
     5b2:	86 95       	lsr	r24
     5b4:	86 95       	lsr	r24
     5b6:	88 0f       	add	r24, r24
     5b8:	28 2f       	mov	r18, r24
     5ba:	22 0f       	add	r18, r18
     5bc:	22 0f       	add	r18, r18
     5be:	82 0f       	add	r24, r18
     5c0:	98 1b       	sub	r25, r24
     5c2:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <buf_idx.2083>
     5c6:	11 c0       	rjmp	.+34     	; 0x5ea <__vector_18+0xb4>
		}
		else buffer[buf_idx][idx++] = RX_data;
     5c8:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <buf_idx.2083>
     5cc:	91 e0       	ldi	r25, 0x01	; 1
     5ce:	98 0f       	add	r25, r24
     5d0:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <idx.2082>
     5d4:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <RX_data>
     5d8:	22 e3       	ldi	r18, 0x32	; 50
     5da:	e2 9f       	mul	r30, r18
     5dc:	f0 01       	movw	r30, r0
     5de:	11 24       	eor	r1, r1
     5e0:	eb 5e       	subi	r30, 0xEB	; 235
     5e2:	fd 4f       	sbci	r31, 0xFD	; 253
     5e4:	e8 0f       	add	r30, r24
     5e6:	f1 1d       	adc	r31, r1
     5e8:	90 83       	st	Z, r25
	}
	
	TX0_char(RX_data);
     5ea:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <RX_data>
     5ee:	0e 94 93 02 	call	0x526	; 0x526 <TX0_char>
	RX_flag = 1;
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <RX_flag>
}
     5f8:	ff 91       	pop	r31
     5fa:	ef 91       	pop	r30
     5fc:	bf 91       	pop	r27
     5fe:	af 91       	pop	r26
     600:	9f 91       	pop	r25
     602:	8f 91       	pop	r24
     604:	7f 91       	pop	r23
     606:	6f 91       	pop	r22
     608:	5f 91       	pop	r21
     60a:	4f 91       	pop	r20
     60c:	3f 91       	pop	r19
     60e:	2f 91       	pop	r18
     610:	0f 90       	pop	r0
     612:	0f be       	out	0x3f, r0	; 63
     614:	0f 90       	pop	r0
     616:	1f 90       	pop	r1
     618:	18 95       	reti

0000061a <UART0_init>:
	
	return 0;
}

void UART0_init(unsigned long baud)
{
     61a:	cf 92       	push	r12
     61c:	df 92       	push	r13
     61e:	ef 92       	push	r14
     620:	ff 92       	push	r15
     622:	6b 01       	movw	r12, r22
     624:	7c 01       	movw	r14, r24
	char i;
	FILE* fpStdio = fdevopen(TX0_char, NULL);
     626:	60 e0       	ldi	r22, 0x00	; 0
     628:	70 e0       	ldi	r23, 0x00	; 0
     62a:	83 e9       	ldi	r24, 0x93	; 147
     62c:	92 e0       	ldi	r25, 0x02	; 2
     62e:	0e 94 81 05 	call	0xb02	; 0xb02 <fdevopen>
	
	UCSR0B |= ((1 << RXCIE0) | (1<< RXEN0) | (1<< TXEN0));	//송신, 수신 , 수신 인터럽트 활성화
     632:	e1 ec       	ldi	r30, 0xC1	; 193
     634:	f0 e0       	ldi	r31, 0x00	; 0
     636:	80 81       	ld	r24, Z
     638:	88 69       	ori	r24, 0x98	; 152
     63a:	80 83       	st	Z, r24
	/*
		//0b10011000; //bit7 : Rx complete interrupt enable, bit 4 : receiver enable , bit 3 : transmitter enable
		//7~2 bit 제어 레지스터 , 0~1 bit 데이터 레지스터
		//UCSZ 0~2 : char size / 2 -> UCSR0B , 0,1 -> UCSR0C / ASCII 8bit /9bit 통신 UCSR0B의 0, 1bit 사용(알아서된당)
	*/
	UCSR0C |= ((1 << UCSZ01) | (1 << UCSZ00));				//8bit 통신
     63c:	e2 ec       	ldi	r30, 0xC2	; 194
     63e:	f0 e0       	ldi	r31, 0x00	; 0
     640:	80 81       	ld	r24, Z
     642:	86 60       	ori	r24, 0x06	; 6
     644:	80 83       	st	Z, r24
	/*
		//UCSR0C
		//7,6bit 0 0 -> Asynchronous 
	*/
	UBRR0H = ((F_CPU/16/baud)-1) >> 8; //상위 8bit
     646:	60 e4       	ldi	r22, 0x40	; 64
     648:	72 e4       	ldi	r23, 0x42	; 66
     64a:	8f e0       	ldi	r24, 0x0F	; 15
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	a7 01       	movw	r20, r14
     650:	96 01       	movw	r18, r12
     652:	0e 94 56 05 	call	0xaac	; 0xaac <__udivmodsi4>
     656:	da 01       	movw	r26, r20
     658:	c9 01       	movw	r24, r18
     65a:	01 97       	sbiw	r24, 0x01	; 1
     65c:	a1 09       	sbc	r26, r1
     65e:	b1 09       	sbc	r27, r1
     660:	89 2f       	mov	r24, r25
     662:	9a 2f       	mov	r25, r26
     664:	ab 2f       	mov	r26, r27
     666:	bb 27       	eor	r27, r27
     668:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L =  ((F_CPU/16/baud)-1) & 0xFF; //하위 8bit//0x00FF//0b0000000011111111 //상위 8bit는 자리가 없어서 &안해줘도 안들어감
     66c:	21 50       	subi	r18, 0x01	; 1
     66e:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	/*
		// 9600은 우리가 설정해준 속도
		//Asynchronous Normal mode(U2X0 = 0으로 설정했음)
		//UBRR0L(low), UBRR0H(high) : 보호 레이트 레지스터 , 송수신 속도 맞춰주는
	*/
	i = UDR0; //수신 버퍼 비우기 // 한번 읽으면 비워지기 때문에 읽어주는 것 
     672:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     676:	8f e9       	ldi	r24, 0x9F	; 159
     678:	9f e0       	ldi	r25, 0x0F	; 15
     67a:	01 97       	sbiw	r24, 0x01	; 1
     67c:	f1 f7       	brne	.-4      	; 0x67a <UART0_init+0x60>
     67e:	00 c0       	rjmp	.+0      	; 0x680 <UART0_init+0x66>
     680:	00 00       	nop
			//송신, 수신 레지스터 이름을 같이 쓰는데 컴파일러가 알아서 구분해줌
	
	_delay_ms(1); //약간의 딜레이
	
	return;
}
     682:	ff 90       	pop	r15
     684:	ef 90       	pop	r14
     686:	df 90       	pop	r13
     688:	cf 90       	pop	r12
     68a:	08 95       	ret

0000068c <__subsf3>:
     68c:	50 58       	subi	r21, 0x80	; 128

0000068e <__addsf3>:
     68e:	bb 27       	eor	r27, r27
     690:	aa 27       	eor	r26, r26
     692:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__addsf3x>
     696:	0c 94 af 04 	jmp	0x95e	; 0x95e <__fp_round>
     69a:	0e 94 a1 04 	call	0x942	; 0x942 <__fp_pscA>
     69e:	38 f0       	brcs	.+14     	; 0x6ae <__addsf3+0x20>
     6a0:	0e 94 a8 04 	call	0x950	; 0x950 <__fp_pscB>
     6a4:	20 f0       	brcs	.+8      	; 0x6ae <__addsf3+0x20>
     6a6:	39 f4       	brne	.+14     	; 0x6b6 <__addsf3+0x28>
     6a8:	9f 3f       	cpi	r25, 0xFF	; 255
     6aa:	19 f4       	brne	.+6      	; 0x6b2 <__addsf3+0x24>
     6ac:	26 f4       	brtc	.+8      	; 0x6b6 <__addsf3+0x28>
     6ae:	0c 94 9e 04 	jmp	0x93c	; 0x93c <__fp_nan>
     6b2:	0e f4       	brtc	.+2      	; 0x6b6 <__addsf3+0x28>
     6b4:	e0 95       	com	r30
     6b6:	e7 fb       	bst	r30, 7
     6b8:	0c 94 98 04 	jmp	0x930	; 0x930 <__fp_inf>

000006bc <__addsf3x>:
     6bc:	e9 2f       	mov	r30, r25
     6be:	0e 94 c0 04 	call	0x980	; 0x980 <__fp_split3>
     6c2:	58 f3       	brcs	.-42     	; 0x69a <__addsf3+0xc>
     6c4:	ba 17       	cp	r27, r26
     6c6:	62 07       	cpc	r22, r18
     6c8:	73 07       	cpc	r23, r19
     6ca:	84 07       	cpc	r24, r20
     6cc:	95 07       	cpc	r25, r21
     6ce:	20 f0       	brcs	.+8      	; 0x6d8 <__addsf3x+0x1c>
     6d0:	79 f4       	brne	.+30     	; 0x6f0 <__addsf3x+0x34>
     6d2:	a6 f5       	brtc	.+104    	; 0x73c <__addsf3x+0x80>
     6d4:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__fp_zero>
     6d8:	0e f4       	brtc	.+2      	; 0x6dc <__addsf3x+0x20>
     6da:	e0 95       	com	r30
     6dc:	0b 2e       	mov	r0, r27
     6de:	ba 2f       	mov	r27, r26
     6e0:	a0 2d       	mov	r26, r0
     6e2:	0b 01       	movw	r0, r22
     6e4:	b9 01       	movw	r22, r18
     6e6:	90 01       	movw	r18, r0
     6e8:	0c 01       	movw	r0, r24
     6ea:	ca 01       	movw	r24, r20
     6ec:	a0 01       	movw	r20, r0
     6ee:	11 24       	eor	r1, r1
     6f0:	ff 27       	eor	r31, r31
     6f2:	59 1b       	sub	r21, r25
     6f4:	99 f0       	breq	.+38     	; 0x71c <__addsf3x+0x60>
     6f6:	59 3f       	cpi	r21, 0xF9	; 249
     6f8:	50 f4       	brcc	.+20     	; 0x70e <__addsf3x+0x52>
     6fa:	50 3e       	cpi	r21, 0xE0	; 224
     6fc:	68 f1       	brcs	.+90     	; 0x758 <__addsf3x+0x9c>
     6fe:	1a 16       	cp	r1, r26
     700:	f0 40       	sbci	r31, 0x00	; 0
     702:	a2 2f       	mov	r26, r18
     704:	23 2f       	mov	r18, r19
     706:	34 2f       	mov	r19, r20
     708:	44 27       	eor	r20, r20
     70a:	58 5f       	subi	r21, 0xF8	; 248
     70c:	f3 cf       	rjmp	.-26     	; 0x6f4 <__addsf3x+0x38>
     70e:	46 95       	lsr	r20
     710:	37 95       	ror	r19
     712:	27 95       	ror	r18
     714:	a7 95       	ror	r26
     716:	f0 40       	sbci	r31, 0x00	; 0
     718:	53 95       	inc	r21
     71a:	c9 f7       	brne	.-14     	; 0x70e <__addsf3x+0x52>
     71c:	7e f4       	brtc	.+30     	; 0x73c <__addsf3x+0x80>
     71e:	1f 16       	cp	r1, r31
     720:	ba 0b       	sbc	r27, r26
     722:	62 0b       	sbc	r22, r18
     724:	73 0b       	sbc	r23, r19
     726:	84 0b       	sbc	r24, r20
     728:	ba f0       	brmi	.+46     	; 0x758 <__addsf3x+0x9c>
     72a:	91 50       	subi	r25, 0x01	; 1
     72c:	a1 f0       	breq	.+40     	; 0x756 <__addsf3x+0x9a>
     72e:	ff 0f       	add	r31, r31
     730:	bb 1f       	adc	r27, r27
     732:	66 1f       	adc	r22, r22
     734:	77 1f       	adc	r23, r23
     736:	88 1f       	adc	r24, r24
     738:	c2 f7       	brpl	.-16     	; 0x72a <__addsf3x+0x6e>
     73a:	0e c0       	rjmp	.+28     	; 0x758 <__addsf3x+0x9c>
     73c:	ba 0f       	add	r27, r26
     73e:	62 1f       	adc	r22, r18
     740:	73 1f       	adc	r23, r19
     742:	84 1f       	adc	r24, r20
     744:	48 f4       	brcc	.+18     	; 0x758 <__addsf3x+0x9c>
     746:	87 95       	ror	r24
     748:	77 95       	ror	r23
     74a:	67 95       	ror	r22
     74c:	b7 95       	ror	r27
     74e:	f7 95       	ror	r31
     750:	9e 3f       	cpi	r25, 0xFE	; 254
     752:	08 f0       	brcs	.+2      	; 0x756 <__addsf3x+0x9a>
     754:	b0 cf       	rjmp	.-160    	; 0x6b6 <__addsf3+0x28>
     756:	93 95       	inc	r25
     758:	88 0f       	add	r24, r24
     75a:	08 f0       	brcs	.+2      	; 0x75e <__addsf3x+0xa2>
     75c:	99 27       	eor	r25, r25
     75e:	ee 0f       	add	r30, r30
     760:	97 95       	ror	r25
     762:	87 95       	ror	r24
     764:	08 95       	ret

00000766 <__divsf3>:
     766:	0e 94 c7 03 	call	0x78e	; 0x78e <__divsf3x>
     76a:	0c 94 af 04 	jmp	0x95e	; 0x95e <__fp_round>
     76e:	0e 94 a8 04 	call	0x950	; 0x950 <__fp_pscB>
     772:	58 f0       	brcs	.+22     	; 0x78a <__divsf3+0x24>
     774:	0e 94 a1 04 	call	0x942	; 0x942 <__fp_pscA>
     778:	40 f0       	brcs	.+16     	; 0x78a <__divsf3+0x24>
     77a:	29 f4       	brne	.+10     	; 0x786 <__divsf3+0x20>
     77c:	5f 3f       	cpi	r21, 0xFF	; 255
     77e:	29 f0       	breq	.+10     	; 0x78a <__divsf3+0x24>
     780:	0c 94 98 04 	jmp	0x930	; 0x930 <__fp_inf>
     784:	51 11       	cpse	r21, r1
     786:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__fp_szero>
     78a:	0c 94 9e 04 	jmp	0x93c	; 0x93c <__fp_nan>

0000078e <__divsf3x>:
     78e:	0e 94 c0 04 	call	0x980	; 0x980 <__fp_split3>
     792:	68 f3       	brcs	.-38     	; 0x76e <__divsf3+0x8>

00000794 <__divsf3_pse>:
     794:	99 23       	and	r25, r25
     796:	b1 f3       	breq	.-20     	; 0x784 <__divsf3+0x1e>
     798:	55 23       	and	r21, r21
     79a:	91 f3       	breq	.-28     	; 0x780 <__divsf3+0x1a>
     79c:	95 1b       	sub	r25, r21
     79e:	55 0b       	sbc	r21, r21
     7a0:	bb 27       	eor	r27, r27
     7a2:	aa 27       	eor	r26, r26
     7a4:	62 17       	cp	r22, r18
     7a6:	73 07       	cpc	r23, r19
     7a8:	84 07       	cpc	r24, r20
     7aa:	38 f0       	brcs	.+14     	; 0x7ba <__divsf3_pse+0x26>
     7ac:	9f 5f       	subi	r25, 0xFF	; 255
     7ae:	5f 4f       	sbci	r21, 0xFF	; 255
     7b0:	22 0f       	add	r18, r18
     7b2:	33 1f       	adc	r19, r19
     7b4:	44 1f       	adc	r20, r20
     7b6:	aa 1f       	adc	r26, r26
     7b8:	a9 f3       	breq	.-22     	; 0x7a4 <__divsf3_pse+0x10>
     7ba:	35 d0       	rcall	.+106    	; 0x826 <__divsf3_pse+0x92>
     7bc:	0e 2e       	mov	r0, r30
     7be:	3a f0       	brmi	.+14     	; 0x7ce <__divsf3_pse+0x3a>
     7c0:	e0 e8       	ldi	r30, 0x80	; 128
     7c2:	32 d0       	rcall	.+100    	; 0x828 <__divsf3_pse+0x94>
     7c4:	91 50       	subi	r25, 0x01	; 1
     7c6:	50 40       	sbci	r21, 0x00	; 0
     7c8:	e6 95       	lsr	r30
     7ca:	00 1c       	adc	r0, r0
     7cc:	ca f7       	brpl	.-14     	; 0x7c0 <__divsf3_pse+0x2c>
     7ce:	2b d0       	rcall	.+86     	; 0x826 <__divsf3_pse+0x92>
     7d0:	fe 2f       	mov	r31, r30
     7d2:	29 d0       	rcall	.+82     	; 0x826 <__divsf3_pse+0x92>
     7d4:	66 0f       	add	r22, r22
     7d6:	77 1f       	adc	r23, r23
     7d8:	88 1f       	adc	r24, r24
     7da:	bb 1f       	adc	r27, r27
     7dc:	26 17       	cp	r18, r22
     7de:	37 07       	cpc	r19, r23
     7e0:	48 07       	cpc	r20, r24
     7e2:	ab 07       	cpc	r26, r27
     7e4:	b0 e8       	ldi	r27, 0x80	; 128
     7e6:	09 f0       	breq	.+2      	; 0x7ea <__divsf3_pse+0x56>
     7e8:	bb 0b       	sbc	r27, r27
     7ea:	80 2d       	mov	r24, r0
     7ec:	bf 01       	movw	r22, r30
     7ee:	ff 27       	eor	r31, r31
     7f0:	93 58       	subi	r25, 0x83	; 131
     7f2:	5f 4f       	sbci	r21, 0xFF	; 255
     7f4:	3a f0       	brmi	.+14     	; 0x804 <__divsf3_pse+0x70>
     7f6:	9e 3f       	cpi	r25, 0xFE	; 254
     7f8:	51 05       	cpc	r21, r1
     7fa:	78 f0       	brcs	.+30     	; 0x81a <__divsf3_pse+0x86>
     7fc:	0c 94 98 04 	jmp	0x930	; 0x930 <__fp_inf>
     800:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__fp_szero>
     804:	5f 3f       	cpi	r21, 0xFF	; 255
     806:	e4 f3       	brlt	.-8      	; 0x800 <__divsf3_pse+0x6c>
     808:	98 3e       	cpi	r25, 0xE8	; 232
     80a:	d4 f3       	brlt	.-12     	; 0x800 <__divsf3_pse+0x6c>
     80c:	86 95       	lsr	r24
     80e:	77 95       	ror	r23
     810:	67 95       	ror	r22
     812:	b7 95       	ror	r27
     814:	f7 95       	ror	r31
     816:	9f 5f       	subi	r25, 0xFF	; 255
     818:	c9 f7       	brne	.-14     	; 0x80c <__divsf3_pse+0x78>
     81a:	88 0f       	add	r24, r24
     81c:	91 1d       	adc	r25, r1
     81e:	96 95       	lsr	r25
     820:	87 95       	ror	r24
     822:	97 f9       	bld	r25, 7
     824:	08 95       	ret
     826:	e1 e0       	ldi	r30, 0x01	; 1
     828:	66 0f       	add	r22, r22
     82a:	77 1f       	adc	r23, r23
     82c:	88 1f       	adc	r24, r24
     82e:	bb 1f       	adc	r27, r27
     830:	62 17       	cp	r22, r18
     832:	73 07       	cpc	r23, r19
     834:	84 07       	cpc	r24, r20
     836:	ba 07       	cpc	r27, r26
     838:	20 f0       	brcs	.+8      	; 0x842 <__divsf3_pse+0xae>
     83a:	62 1b       	sub	r22, r18
     83c:	73 0b       	sbc	r23, r19
     83e:	84 0b       	sbc	r24, r20
     840:	ba 0b       	sbc	r27, r26
     842:	ee 1f       	adc	r30, r30
     844:	88 f7       	brcc	.-30     	; 0x828 <__divsf3_pse+0x94>
     846:	e0 95       	com	r30
     848:	08 95       	ret

0000084a <__fixsfsi>:
     84a:	0e 94 2c 04 	call	0x858	; 0x858 <__fixunssfsi>
     84e:	68 94       	set
     850:	b1 11       	cpse	r27, r1
     852:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__fp_szero>
     856:	08 95       	ret

00000858 <__fixunssfsi>:
     858:	0e 94 c8 04 	call	0x990	; 0x990 <__fp_splitA>
     85c:	88 f0       	brcs	.+34     	; 0x880 <__fixunssfsi+0x28>
     85e:	9f 57       	subi	r25, 0x7F	; 127
     860:	98 f0       	brcs	.+38     	; 0x888 <__fixunssfsi+0x30>
     862:	b9 2f       	mov	r27, r25
     864:	99 27       	eor	r25, r25
     866:	b7 51       	subi	r27, 0x17	; 23
     868:	b0 f0       	brcs	.+44     	; 0x896 <__fixunssfsi+0x3e>
     86a:	e1 f0       	breq	.+56     	; 0x8a4 <__fixunssfsi+0x4c>
     86c:	66 0f       	add	r22, r22
     86e:	77 1f       	adc	r23, r23
     870:	88 1f       	adc	r24, r24
     872:	99 1f       	adc	r25, r25
     874:	1a f0       	brmi	.+6      	; 0x87c <__fixunssfsi+0x24>
     876:	ba 95       	dec	r27
     878:	c9 f7       	brne	.-14     	; 0x86c <__fixunssfsi+0x14>
     87a:	14 c0       	rjmp	.+40     	; 0x8a4 <__fixunssfsi+0x4c>
     87c:	b1 30       	cpi	r27, 0x01	; 1
     87e:	91 f0       	breq	.+36     	; 0x8a4 <__fixunssfsi+0x4c>
     880:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__fp_zero>
     884:	b1 e0       	ldi	r27, 0x01	; 1
     886:	08 95       	ret
     888:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__fp_zero>
     88c:	67 2f       	mov	r22, r23
     88e:	78 2f       	mov	r23, r24
     890:	88 27       	eor	r24, r24
     892:	b8 5f       	subi	r27, 0xF8	; 248
     894:	39 f0       	breq	.+14     	; 0x8a4 <__fixunssfsi+0x4c>
     896:	b9 3f       	cpi	r27, 0xF9	; 249
     898:	cc f3       	brlt	.-14     	; 0x88c <__fixunssfsi+0x34>
     89a:	86 95       	lsr	r24
     89c:	77 95       	ror	r23
     89e:	67 95       	ror	r22
     8a0:	b3 95       	inc	r27
     8a2:	d9 f7       	brne	.-10     	; 0x89a <__fixunssfsi+0x42>
     8a4:	3e f4       	brtc	.+14     	; 0x8b4 <__fixunssfsi+0x5c>
     8a6:	90 95       	com	r25
     8a8:	80 95       	com	r24
     8aa:	70 95       	com	r23
     8ac:	61 95       	neg	r22
     8ae:	7f 4f       	sbci	r23, 0xFF	; 255
     8b0:	8f 4f       	sbci	r24, 0xFF	; 255
     8b2:	9f 4f       	sbci	r25, 0xFF	; 255
     8b4:	08 95       	ret

000008b6 <__floatunsisf>:
     8b6:	e8 94       	clt
     8b8:	09 c0       	rjmp	.+18     	; 0x8cc <__floatsisf+0x12>

000008ba <__floatsisf>:
     8ba:	97 fb       	bst	r25, 7
     8bc:	3e f4       	brtc	.+14     	; 0x8cc <__floatsisf+0x12>
     8be:	90 95       	com	r25
     8c0:	80 95       	com	r24
     8c2:	70 95       	com	r23
     8c4:	61 95       	neg	r22
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	8f 4f       	sbci	r24, 0xFF	; 255
     8ca:	9f 4f       	sbci	r25, 0xFF	; 255
     8cc:	99 23       	and	r25, r25
     8ce:	a9 f0       	breq	.+42     	; 0x8fa <__floatsisf+0x40>
     8d0:	f9 2f       	mov	r31, r25
     8d2:	96 e9       	ldi	r25, 0x96	; 150
     8d4:	bb 27       	eor	r27, r27
     8d6:	93 95       	inc	r25
     8d8:	f6 95       	lsr	r31
     8da:	87 95       	ror	r24
     8dc:	77 95       	ror	r23
     8de:	67 95       	ror	r22
     8e0:	b7 95       	ror	r27
     8e2:	f1 11       	cpse	r31, r1
     8e4:	f8 cf       	rjmp	.-16     	; 0x8d6 <__floatsisf+0x1c>
     8e6:	fa f4       	brpl	.+62     	; 0x926 <__stack+0x27>
     8e8:	bb 0f       	add	r27, r27
     8ea:	11 f4       	brne	.+4      	; 0x8f0 <__floatsisf+0x36>
     8ec:	60 ff       	sbrs	r22, 0
     8ee:	1b c0       	rjmp	.+54     	; 0x926 <__stack+0x27>
     8f0:	6f 5f       	subi	r22, 0xFF	; 255
     8f2:	7f 4f       	sbci	r23, 0xFF	; 255
     8f4:	8f 4f       	sbci	r24, 0xFF	; 255
     8f6:	9f 4f       	sbci	r25, 0xFF	; 255
     8f8:	16 c0       	rjmp	.+44     	; 0x926 <__stack+0x27>
     8fa:	88 23       	and	r24, r24
     8fc:	11 f0       	breq	.+4      	; 0x902 <__stack+0x3>
     8fe:	96 e9       	ldi	r25, 0x96	; 150
     900:	11 c0       	rjmp	.+34     	; 0x924 <__stack+0x25>
     902:	77 23       	and	r23, r23
     904:	21 f0       	breq	.+8      	; 0x90e <__stack+0xf>
     906:	9e e8       	ldi	r25, 0x8E	; 142
     908:	87 2f       	mov	r24, r23
     90a:	76 2f       	mov	r23, r22
     90c:	05 c0       	rjmp	.+10     	; 0x918 <__stack+0x19>
     90e:	66 23       	and	r22, r22
     910:	71 f0       	breq	.+28     	; 0x92e <__stack+0x2f>
     912:	96 e8       	ldi	r25, 0x86	; 134
     914:	86 2f       	mov	r24, r22
     916:	70 e0       	ldi	r23, 0x00	; 0
     918:	60 e0       	ldi	r22, 0x00	; 0
     91a:	2a f0       	brmi	.+10     	; 0x926 <__stack+0x27>
     91c:	9a 95       	dec	r25
     91e:	66 0f       	add	r22, r22
     920:	77 1f       	adc	r23, r23
     922:	88 1f       	adc	r24, r24
     924:	da f7       	brpl	.-10     	; 0x91c <__stack+0x1d>
     926:	88 0f       	add	r24, r24
     928:	96 95       	lsr	r25
     92a:	87 95       	ror	r24
     92c:	97 f9       	bld	r25, 7
     92e:	08 95       	ret

00000930 <__fp_inf>:
     930:	97 f9       	bld	r25, 7
     932:	9f 67       	ori	r25, 0x7F	; 127
     934:	80 e8       	ldi	r24, 0x80	; 128
     936:	70 e0       	ldi	r23, 0x00	; 0
     938:	60 e0       	ldi	r22, 0x00	; 0
     93a:	08 95       	ret

0000093c <__fp_nan>:
     93c:	9f ef       	ldi	r25, 0xFF	; 255
     93e:	80 ec       	ldi	r24, 0xC0	; 192
     940:	08 95       	ret

00000942 <__fp_pscA>:
     942:	00 24       	eor	r0, r0
     944:	0a 94       	dec	r0
     946:	16 16       	cp	r1, r22
     948:	17 06       	cpc	r1, r23
     94a:	18 06       	cpc	r1, r24
     94c:	09 06       	cpc	r0, r25
     94e:	08 95       	ret

00000950 <__fp_pscB>:
     950:	00 24       	eor	r0, r0
     952:	0a 94       	dec	r0
     954:	12 16       	cp	r1, r18
     956:	13 06       	cpc	r1, r19
     958:	14 06       	cpc	r1, r20
     95a:	05 06       	cpc	r0, r21
     95c:	08 95       	ret

0000095e <__fp_round>:
     95e:	09 2e       	mov	r0, r25
     960:	03 94       	inc	r0
     962:	00 0c       	add	r0, r0
     964:	11 f4       	brne	.+4      	; 0x96a <__fp_round+0xc>
     966:	88 23       	and	r24, r24
     968:	52 f0       	brmi	.+20     	; 0x97e <__fp_round+0x20>
     96a:	bb 0f       	add	r27, r27
     96c:	40 f4       	brcc	.+16     	; 0x97e <__fp_round+0x20>
     96e:	bf 2b       	or	r27, r31
     970:	11 f4       	brne	.+4      	; 0x976 <__fp_round+0x18>
     972:	60 ff       	sbrs	r22, 0
     974:	04 c0       	rjmp	.+8      	; 0x97e <__fp_round+0x20>
     976:	6f 5f       	subi	r22, 0xFF	; 255
     978:	7f 4f       	sbci	r23, 0xFF	; 255
     97a:	8f 4f       	sbci	r24, 0xFF	; 255
     97c:	9f 4f       	sbci	r25, 0xFF	; 255
     97e:	08 95       	ret

00000980 <__fp_split3>:
     980:	57 fd       	sbrc	r21, 7
     982:	90 58       	subi	r25, 0x80	; 128
     984:	44 0f       	add	r20, r20
     986:	55 1f       	adc	r21, r21
     988:	59 f0       	breq	.+22     	; 0x9a0 <__fp_splitA+0x10>
     98a:	5f 3f       	cpi	r21, 0xFF	; 255
     98c:	71 f0       	breq	.+28     	; 0x9aa <__fp_splitA+0x1a>
     98e:	47 95       	ror	r20

00000990 <__fp_splitA>:
     990:	88 0f       	add	r24, r24
     992:	97 fb       	bst	r25, 7
     994:	99 1f       	adc	r25, r25
     996:	61 f0       	breq	.+24     	; 0x9b0 <__fp_splitA+0x20>
     998:	9f 3f       	cpi	r25, 0xFF	; 255
     99a:	79 f0       	breq	.+30     	; 0x9ba <__fp_splitA+0x2a>
     99c:	87 95       	ror	r24
     99e:	08 95       	ret
     9a0:	12 16       	cp	r1, r18
     9a2:	13 06       	cpc	r1, r19
     9a4:	14 06       	cpc	r1, r20
     9a6:	55 1f       	adc	r21, r21
     9a8:	f2 cf       	rjmp	.-28     	; 0x98e <__fp_split3+0xe>
     9aa:	46 95       	lsr	r20
     9ac:	f1 df       	rcall	.-30     	; 0x990 <__fp_splitA>
     9ae:	08 c0       	rjmp	.+16     	; 0x9c0 <__fp_splitA+0x30>
     9b0:	16 16       	cp	r1, r22
     9b2:	17 06       	cpc	r1, r23
     9b4:	18 06       	cpc	r1, r24
     9b6:	99 1f       	adc	r25, r25
     9b8:	f1 cf       	rjmp	.-30     	; 0x99c <__fp_splitA+0xc>
     9ba:	86 95       	lsr	r24
     9bc:	71 05       	cpc	r23, r1
     9be:	61 05       	cpc	r22, r1
     9c0:	08 94       	sec
     9c2:	08 95       	ret

000009c4 <__fp_zero>:
     9c4:	e8 94       	clt

000009c6 <__fp_szero>:
     9c6:	bb 27       	eor	r27, r27
     9c8:	66 27       	eor	r22, r22
     9ca:	77 27       	eor	r23, r23
     9cc:	cb 01       	movw	r24, r22
     9ce:	97 f9       	bld	r25, 7
     9d0:	08 95       	ret

000009d2 <__mulsf3>:
     9d2:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__mulsf3x>
     9d6:	0c 94 af 04 	jmp	0x95e	; 0x95e <__fp_round>
     9da:	0e 94 a1 04 	call	0x942	; 0x942 <__fp_pscA>
     9de:	38 f0       	brcs	.+14     	; 0x9ee <__mulsf3+0x1c>
     9e0:	0e 94 a8 04 	call	0x950	; 0x950 <__fp_pscB>
     9e4:	20 f0       	brcs	.+8      	; 0x9ee <__mulsf3+0x1c>
     9e6:	95 23       	and	r25, r21
     9e8:	11 f0       	breq	.+4      	; 0x9ee <__mulsf3+0x1c>
     9ea:	0c 94 98 04 	jmp	0x930	; 0x930 <__fp_inf>
     9ee:	0c 94 9e 04 	jmp	0x93c	; 0x93c <__fp_nan>
     9f2:	11 24       	eor	r1, r1
     9f4:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__fp_szero>

000009f8 <__mulsf3x>:
     9f8:	0e 94 c0 04 	call	0x980	; 0x980 <__fp_split3>
     9fc:	70 f3       	brcs	.-36     	; 0x9da <__mulsf3+0x8>

000009fe <__mulsf3_pse>:
     9fe:	95 9f       	mul	r25, r21
     a00:	c1 f3       	breq	.-16     	; 0x9f2 <__mulsf3+0x20>
     a02:	95 0f       	add	r25, r21
     a04:	50 e0       	ldi	r21, 0x00	; 0
     a06:	55 1f       	adc	r21, r21
     a08:	62 9f       	mul	r22, r18
     a0a:	f0 01       	movw	r30, r0
     a0c:	72 9f       	mul	r23, r18
     a0e:	bb 27       	eor	r27, r27
     a10:	f0 0d       	add	r31, r0
     a12:	b1 1d       	adc	r27, r1
     a14:	63 9f       	mul	r22, r19
     a16:	aa 27       	eor	r26, r26
     a18:	f0 0d       	add	r31, r0
     a1a:	b1 1d       	adc	r27, r1
     a1c:	aa 1f       	adc	r26, r26
     a1e:	64 9f       	mul	r22, r20
     a20:	66 27       	eor	r22, r22
     a22:	b0 0d       	add	r27, r0
     a24:	a1 1d       	adc	r26, r1
     a26:	66 1f       	adc	r22, r22
     a28:	82 9f       	mul	r24, r18
     a2a:	22 27       	eor	r18, r18
     a2c:	b0 0d       	add	r27, r0
     a2e:	a1 1d       	adc	r26, r1
     a30:	62 1f       	adc	r22, r18
     a32:	73 9f       	mul	r23, r19
     a34:	b0 0d       	add	r27, r0
     a36:	a1 1d       	adc	r26, r1
     a38:	62 1f       	adc	r22, r18
     a3a:	83 9f       	mul	r24, r19
     a3c:	a0 0d       	add	r26, r0
     a3e:	61 1d       	adc	r22, r1
     a40:	22 1f       	adc	r18, r18
     a42:	74 9f       	mul	r23, r20
     a44:	33 27       	eor	r19, r19
     a46:	a0 0d       	add	r26, r0
     a48:	61 1d       	adc	r22, r1
     a4a:	23 1f       	adc	r18, r19
     a4c:	84 9f       	mul	r24, r20
     a4e:	60 0d       	add	r22, r0
     a50:	21 1d       	adc	r18, r1
     a52:	82 2f       	mov	r24, r18
     a54:	76 2f       	mov	r23, r22
     a56:	6a 2f       	mov	r22, r26
     a58:	11 24       	eor	r1, r1
     a5a:	9f 57       	subi	r25, 0x7F	; 127
     a5c:	50 40       	sbci	r21, 0x00	; 0
     a5e:	9a f0       	brmi	.+38     	; 0xa86 <__mulsf3_pse+0x88>
     a60:	f1 f0       	breq	.+60     	; 0xa9e <__mulsf3_pse+0xa0>
     a62:	88 23       	and	r24, r24
     a64:	4a f0       	brmi	.+18     	; 0xa78 <__mulsf3_pse+0x7a>
     a66:	ee 0f       	add	r30, r30
     a68:	ff 1f       	adc	r31, r31
     a6a:	bb 1f       	adc	r27, r27
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	88 1f       	adc	r24, r24
     a72:	91 50       	subi	r25, 0x01	; 1
     a74:	50 40       	sbci	r21, 0x00	; 0
     a76:	a9 f7       	brne	.-22     	; 0xa62 <__mulsf3_pse+0x64>
     a78:	9e 3f       	cpi	r25, 0xFE	; 254
     a7a:	51 05       	cpc	r21, r1
     a7c:	80 f0       	brcs	.+32     	; 0xa9e <__mulsf3_pse+0xa0>
     a7e:	0c 94 98 04 	jmp	0x930	; 0x930 <__fp_inf>
     a82:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__fp_szero>
     a86:	5f 3f       	cpi	r21, 0xFF	; 255
     a88:	e4 f3       	brlt	.-8      	; 0xa82 <__mulsf3_pse+0x84>
     a8a:	98 3e       	cpi	r25, 0xE8	; 232
     a8c:	d4 f3       	brlt	.-12     	; 0xa82 <__mulsf3_pse+0x84>
     a8e:	86 95       	lsr	r24
     a90:	77 95       	ror	r23
     a92:	67 95       	ror	r22
     a94:	b7 95       	ror	r27
     a96:	f7 95       	ror	r31
     a98:	e7 95       	ror	r30
     a9a:	9f 5f       	subi	r25, 0xFF	; 255
     a9c:	c1 f7       	brne	.-16     	; 0xa8e <__mulsf3_pse+0x90>
     a9e:	fe 2b       	or	r31, r30
     aa0:	88 0f       	add	r24, r24
     aa2:	91 1d       	adc	r25, r1
     aa4:	96 95       	lsr	r25
     aa6:	87 95       	ror	r24
     aa8:	97 f9       	bld	r25, 7
     aaa:	08 95       	ret

00000aac <__udivmodsi4>:
     aac:	a1 e2       	ldi	r26, 0x21	; 33
     aae:	1a 2e       	mov	r1, r26
     ab0:	aa 1b       	sub	r26, r26
     ab2:	bb 1b       	sub	r27, r27
     ab4:	fd 01       	movw	r30, r26
     ab6:	0d c0       	rjmp	.+26     	; 0xad2 <__udivmodsi4_ep>

00000ab8 <__udivmodsi4_loop>:
     ab8:	aa 1f       	adc	r26, r26
     aba:	bb 1f       	adc	r27, r27
     abc:	ee 1f       	adc	r30, r30
     abe:	ff 1f       	adc	r31, r31
     ac0:	a2 17       	cp	r26, r18
     ac2:	b3 07       	cpc	r27, r19
     ac4:	e4 07       	cpc	r30, r20
     ac6:	f5 07       	cpc	r31, r21
     ac8:	20 f0       	brcs	.+8      	; 0xad2 <__udivmodsi4_ep>
     aca:	a2 1b       	sub	r26, r18
     acc:	b3 0b       	sbc	r27, r19
     ace:	e4 0b       	sbc	r30, r20
     ad0:	f5 0b       	sbc	r31, r21

00000ad2 <__udivmodsi4_ep>:
     ad2:	66 1f       	adc	r22, r22
     ad4:	77 1f       	adc	r23, r23
     ad6:	88 1f       	adc	r24, r24
     ad8:	99 1f       	adc	r25, r25
     ada:	1a 94       	dec	r1
     adc:	69 f7       	brne	.-38     	; 0xab8 <__udivmodsi4_loop>
     ade:	60 95       	com	r22
     ae0:	70 95       	com	r23
     ae2:	80 95       	com	r24
     ae4:	90 95       	com	r25
     ae6:	9b 01       	movw	r18, r22
     ae8:	ac 01       	movw	r20, r24
     aea:	bd 01       	movw	r22, r26
     aec:	cf 01       	movw	r24, r30
     aee:	08 95       	ret

00000af0 <strcmp>:
     af0:	fb 01       	movw	r30, r22
     af2:	dc 01       	movw	r26, r24
     af4:	8d 91       	ld	r24, X+
     af6:	01 90       	ld	r0, Z+
     af8:	80 19       	sub	r24, r0
     afa:	01 10       	cpse	r0, r1
     afc:	d9 f3       	breq	.-10     	; 0xaf4 <strcmp+0x4>
     afe:	99 0b       	sbc	r25, r25
     b00:	08 95       	ret

00000b02 <fdevopen>:
     b02:	0f 93       	push	r16
     b04:	1f 93       	push	r17
     b06:	cf 93       	push	r28
     b08:	df 93       	push	r29
     b0a:	00 97       	sbiw	r24, 0x00	; 0
     b0c:	31 f4       	brne	.+12     	; 0xb1a <fdevopen+0x18>
     b0e:	61 15       	cp	r22, r1
     b10:	71 05       	cpc	r23, r1
     b12:	19 f4       	brne	.+6      	; 0xb1a <fdevopen+0x18>
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	3a c0       	rjmp	.+116    	; 0xb8e <fdevopen+0x8c>
     b1a:	8b 01       	movw	r16, r22
     b1c:	ec 01       	movw	r28, r24
     b1e:	6e e0       	ldi	r22, 0x0E	; 14
     b20:	70 e0       	ldi	r23, 0x00	; 0
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	0e 94 c3 07 	call	0xf86	; 0xf86 <calloc>
     b2a:	fc 01       	movw	r30, r24
     b2c:	89 2b       	or	r24, r25
     b2e:	91 f3       	breq	.-28     	; 0xb14 <fdevopen+0x12>
     b30:	80 e8       	ldi	r24, 0x80	; 128
     b32:	83 83       	std	Z+3, r24	; 0x03
     b34:	01 15       	cp	r16, r1
     b36:	11 05       	cpc	r17, r1
     b38:	71 f0       	breq	.+28     	; 0xb56 <fdevopen+0x54>
     b3a:	13 87       	std	Z+11, r17	; 0x0b
     b3c:	02 87       	std	Z+10, r16	; 0x0a
     b3e:	81 e8       	ldi	r24, 0x81	; 129
     b40:	83 83       	std	Z+3, r24	; 0x03
     b42:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <__iob>
     b46:	90 91 0c 04 	lds	r25, 0x040C	; 0x80040c <__iob+0x1>
     b4a:	89 2b       	or	r24, r25
     b4c:	21 f4       	brne	.+8      	; 0xb56 <fdevopen+0x54>
     b4e:	f0 93 0c 04 	sts	0x040C, r31	; 0x80040c <__iob+0x1>
     b52:	e0 93 0b 04 	sts	0x040B, r30	; 0x80040b <__iob>
     b56:	20 97       	sbiw	r28, 0x00	; 0
     b58:	c9 f0       	breq	.+50     	; 0xb8c <fdevopen+0x8a>
     b5a:	d1 87       	std	Z+9, r29	; 0x09
     b5c:	c0 87       	std	Z+8, r28	; 0x08
     b5e:	83 81       	ldd	r24, Z+3	; 0x03
     b60:	82 60       	ori	r24, 0x02	; 2
     b62:	83 83       	std	Z+3, r24	; 0x03
     b64:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <__iob+0x2>
     b68:	90 91 0e 04 	lds	r25, 0x040E	; 0x80040e <__iob+0x3>
     b6c:	89 2b       	or	r24, r25
     b6e:	71 f4       	brne	.+28     	; 0xb8c <fdevopen+0x8a>
     b70:	f0 93 0e 04 	sts	0x040E, r31	; 0x80040e <__iob+0x3>
     b74:	e0 93 0d 04 	sts	0x040D, r30	; 0x80040d <__iob+0x2>
     b78:	80 91 0f 04 	lds	r24, 0x040F	; 0x80040f <__iob+0x4>
     b7c:	90 91 10 04 	lds	r25, 0x0410	; 0x800410 <__iob+0x5>
     b80:	89 2b       	or	r24, r25
     b82:	21 f4       	brne	.+8      	; 0xb8c <fdevopen+0x8a>
     b84:	f0 93 10 04 	sts	0x0410, r31	; 0x800410 <__iob+0x5>
     b88:	e0 93 0f 04 	sts	0x040F, r30	; 0x80040f <__iob+0x4>
     b8c:	cf 01       	movw	r24, r30
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	1f 91       	pop	r17
     b94:	0f 91       	pop	r16
     b96:	08 95       	ret

00000b98 <printf>:
     b98:	a0 e0       	ldi	r26, 0x00	; 0
     b9a:	b0 e0       	ldi	r27, 0x00	; 0
     b9c:	e2 ed       	ldi	r30, 0xD2	; 210
     b9e:	f5 e0       	ldi	r31, 0x05	; 5
     ba0:	0c 94 c7 09 	jmp	0x138e	; 0x138e <__prologue_saves__+0x20>
     ba4:	ae 01       	movw	r20, r28
     ba6:	4b 5f       	subi	r20, 0xFB	; 251
     ba8:	5f 4f       	sbci	r21, 0xFF	; 255
     baa:	fa 01       	movw	r30, r20
     bac:	61 91       	ld	r22, Z+
     bae:	71 91       	ld	r23, Z+
     bb0:	af 01       	movw	r20, r30
     bb2:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <__iob+0x2>
     bb6:	90 91 0e 04 	lds	r25, 0x040E	; 0x80040e <__iob+0x3>
     bba:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <vfprintf>
     bbe:	e2 e0       	ldi	r30, 0x02	; 2
     bc0:	0c 94 e3 09 	jmp	0x13c6	; 0x13c6 <__epilogue_restores__+0x20>

00000bc4 <vfprintf>:
     bc4:	ab e0       	ldi	r26, 0x0B	; 11
     bc6:	b0 e0       	ldi	r27, 0x00	; 0
     bc8:	e8 ee       	ldi	r30, 0xE8	; 232
     bca:	f5 e0       	ldi	r31, 0x05	; 5
     bcc:	0c 94 b7 09 	jmp	0x136e	; 0x136e <__prologue_saves__>
     bd0:	6c 01       	movw	r12, r24
     bd2:	7b 01       	movw	r14, r22
     bd4:	8a 01       	movw	r16, r20
     bd6:	fc 01       	movw	r30, r24
     bd8:	17 82       	std	Z+7, r1	; 0x07
     bda:	16 82       	std	Z+6, r1	; 0x06
     bdc:	83 81       	ldd	r24, Z+3	; 0x03
     bde:	81 ff       	sbrs	r24, 1
     be0:	cc c1       	rjmp	.+920    	; 0xf7a <vfprintf+0x3b6>
     be2:	ce 01       	movw	r24, r28
     be4:	01 96       	adiw	r24, 0x01	; 1
     be6:	3c 01       	movw	r6, r24
     be8:	f6 01       	movw	r30, r12
     bea:	93 81       	ldd	r25, Z+3	; 0x03
     bec:	f7 01       	movw	r30, r14
     bee:	93 fd       	sbrc	r25, 3
     bf0:	85 91       	lpm	r24, Z+
     bf2:	93 ff       	sbrs	r25, 3
     bf4:	81 91       	ld	r24, Z+
     bf6:	7f 01       	movw	r14, r30
     bf8:	88 23       	and	r24, r24
     bfa:	09 f4       	brne	.+2      	; 0xbfe <vfprintf+0x3a>
     bfc:	ba c1       	rjmp	.+884    	; 0xf72 <vfprintf+0x3ae>
     bfe:	85 32       	cpi	r24, 0x25	; 37
     c00:	39 f4       	brne	.+14     	; 0xc10 <vfprintf+0x4c>
     c02:	93 fd       	sbrc	r25, 3
     c04:	85 91       	lpm	r24, Z+
     c06:	93 ff       	sbrs	r25, 3
     c08:	81 91       	ld	r24, Z+
     c0a:	7f 01       	movw	r14, r30
     c0c:	85 32       	cpi	r24, 0x25	; 37
     c0e:	29 f4       	brne	.+10     	; 0xc1a <vfprintf+0x56>
     c10:	b6 01       	movw	r22, r12
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	0e 94 1d 09 	call	0x123a	; 0x123a <fputc>
     c18:	e7 cf       	rjmp	.-50     	; 0xbe8 <vfprintf+0x24>
     c1a:	91 2c       	mov	r9, r1
     c1c:	21 2c       	mov	r2, r1
     c1e:	31 2c       	mov	r3, r1
     c20:	ff e1       	ldi	r31, 0x1F	; 31
     c22:	f3 15       	cp	r31, r3
     c24:	d8 f0       	brcs	.+54     	; 0xc5c <vfprintf+0x98>
     c26:	8b 32       	cpi	r24, 0x2B	; 43
     c28:	79 f0       	breq	.+30     	; 0xc48 <vfprintf+0x84>
     c2a:	38 f4       	brcc	.+14     	; 0xc3a <vfprintf+0x76>
     c2c:	80 32       	cpi	r24, 0x20	; 32
     c2e:	79 f0       	breq	.+30     	; 0xc4e <vfprintf+0x8a>
     c30:	83 32       	cpi	r24, 0x23	; 35
     c32:	a1 f4       	brne	.+40     	; 0xc5c <vfprintf+0x98>
     c34:	23 2d       	mov	r18, r3
     c36:	20 61       	ori	r18, 0x10	; 16
     c38:	1d c0       	rjmp	.+58     	; 0xc74 <vfprintf+0xb0>
     c3a:	8d 32       	cpi	r24, 0x2D	; 45
     c3c:	61 f0       	breq	.+24     	; 0xc56 <vfprintf+0x92>
     c3e:	80 33       	cpi	r24, 0x30	; 48
     c40:	69 f4       	brne	.+26     	; 0xc5c <vfprintf+0x98>
     c42:	23 2d       	mov	r18, r3
     c44:	21 60       	ori	r18, 0x01	; 1
     c46:	16 c0       	rjmp	.+44     	; 0xc74 <vfprintf+0xb0>
     c48:	83 2d       	mov	r24, r3
     c4a:	82 60       	ori	r24, 0x02	; 2
     c4c:	38 2e       	mov	r3, r24
     c4e:	e3 2d       	mov	r30, r3
     c50:	e4 60       	ori	r30, 0x04	; 4
     c52:	3e 2e       	mov	r3, r30
     c54:	2a c0       	rjmp	.+84     	; 0xcaa <vfprintf+0xe6>
     c56:	f3 2d       	mov	r31, r3
     c58:	f8 60       	ori	r31, 0x08	; 8
     c5a:	1d c0       	rjmp	.+58     	; 0xc96 <vfprintf+0xd2>
     c5c:	37 fc       	sbrc	r3, 7
     c5e:	2d c0       	rjmp	.+90     	; 0xcba <vfprintf+0xf6>
     c60:	20 ed       	ldi	r18, 0xD0	; 208
     c62:	28 0f       	add	r18, r24
     c64:	2a 30       	cpi	r18, 0x0A	; 10
     c66:	40 f0       	brcs	.+16     	; 0xc78 <vfprintf+0xb4>
     c68:	8e 32       	cpi	r24, 0x2E	; 46
     c6a:	b9 f4       	brne	.+46     	; 0xc9a <vfprintf+0xd6>
     c6c:	36 fc       	sbrc	r3, 6
     c6e:	81 c1       	rjmp	.+770    	; 0xf72 <vfprintf+0x3ae>
     c70:	23 2d       	mov	r18, r3
     c72:	20 64       	ori	r18, 0x40	; 64
     c74:	32 2e       	mov	r3, r18
     c76:	19 c0       	rjmp	.+50     	; 0xcaa <vfprintf+0xe6>
     c78:	36 fe       	sbrs	r3, 6
     c7a:	06 c0       	rjmp	.+12     	; 0xc88 <vfprintf+0xc4>
     c7c:	8a e0       	ldi	r24, 0x0A	; 10
     c7e:	98 9e       	mul	r9, r24
     c80:	20 0d       	add	r18, r0
     c82:	11 24       	eor	r1, r1
     c84:	92 2e       	mov	r9, r18
     c86:	11 c0       	rjmp	.+34     	; 0xcaa <vfprintf+0xe6>
     c88:	ea e0       	ldi	r30, 0x0A	; 10
     c8a:	2e 9e       	mul	r2, r30
     c8c:	20 0d       	add	r18, r0
     c8e:	11 24       	eor	r1, r1
     c90:	22 2e       	mov	r2, r18
     c92:	f3 2d       	mov	r31, r3
     c94:	f0 62       	ori	r31, 0x20	; 32
     c96:	3f 2e       	mov	r3, r31
     c98:	08 c0       	rjmp	.+16     	; 0xcaa <vfprintf+0xe6>
     c9a:	8c 36       	cpi	r24, 0x6C	; 108
     c9c:	21 f4       	brne	.+8      	; 0xca6 <vfprintf+0xe2>
     c9e:	83 2d       	mov	r24, r3
     ca0:	80 68       	ori	r24, 0x80	; 128
     ca2:	38 2e       	mov	r3, r24
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <vfprintf+0xe6>
     ca6:	88 36       	cpi	r24, 0x68	; 104
     ca8:	41 f4       	brne	.+16     	; 0xcba <vfprintf+0xf6>
     caa:	f7 01       	movw	r30, r14
     cac:	93 fd       	sbrc	r25, 3
     cae:	85 91       	lpm	r24, Z+
     cb0:	93 ff       	sbrs	r25, 3
     cb2:	81 91       	ld	r24, Z+
     cb4:	7f 01       	movw	r14, r30
     cb6:	81 11       	cpse	r24, r1
     cb8:	b3 cf       	rjmp	.-154    	; 0xc20 <vfprintf+0x5c>
     cba:	98 2f       	mov	r25, r24
     cbc:	9f 7d       	andi	r25, 0xDF	; 223
     cbe:	95 54       	subi	r25, 0x45	; 69
     cc0:	93 30       	cpi	r25, 0x03	; 3
     cc2:	28 f4       	brcc	.+10     	; 0xcce <vfprintf+0x10a>
     cc4:	0c 5f       	subi	r16, 0xFC	; 252
     cc6:	1f 4f       	sbci	r17, 0xFF	; 255
     cc8:	9f e3       	ldi	r25, 0x3F	; 63
     cca:	99 83       	std	Y+1, r25	; 0x01
     ccc:	0d c0       	rjmp	.+26     	; 0xce8 <vfprintf+0x124>
     cce:	83 36       	cpi	r24, 0x63	; 99
     cd0:	31 f0       	breq	.+12     	; 0xcde <vfprintf+0x11a>
     cd2:	83 37       	cpi	r24, 0x73	; 115
     cd4:	71 f0       	breq	.+28     	; 0xcf2 <vfprintf+0x12e>
     cd6:	83 35       	cpi	r24, 0x53	; 83
     cd8:	09 f0       	breq	.+2      	; 0xcdc <vfprintf+0x118>
     cda:	59 c0       	rjmp	.+178    	; 0xd8e <vfprintf+0x1ca>
     cdc:	21 c0       	rjmp	.+66     	; 0xd20 <vfprintf+0x15c>
     cde:	f8 01       	movw	r30, r16
     ce0:	80 81       	ld	r24, Z
     ce2:	89 83       	std	Y+1, r24	; 0x01
     ce4:	0e 5f       	subi	r16, 0xFE	; 254
     ce6:	1f 4f       	sbci	r17, 0xFF	; 255
     ce8:	88 24       	eor	r8, r8
     cea:	83 94       	inc	r8
     cec:	91 2c       	mov	r9, r1
     cee:	53 01       	movw	r10, r6
     cf0:	13 c0       	rjmp	.+38     	; 0xd18 <vfprintf+0x154>
     cf2:	28 01       	movw	r4, r16
     cf4:	f2 e0       	ldi	r31, 0x02	; 2
     cf6:	4f 0e       	add	r4, r31
     cf8:	51 1c       	adc	r5, r1
     cfa:	f8 01       	movw	r30, r16
     cfc:	a0 80       	ld	r10, Z
     cfe:	b1 80       	ldd	r11, Z+1	; 0x01
     d00:	36 fe       	sbrs	r3, 6
     d02:	03 c0       	rjmp	.+6      	; 0xd0a <vfprintf+0x146>
     d04:	69 2d       	mov	r22, r9
     d06:	70 e0       	ldi	r23, 0x00	; 0
     d08:	02 c0       	rjmp	.+4      	; 0xd0e <vfprintf+0x14a>
     d0a:	6f ef       	ldi	r22, 0xFF	; 255
     d0c:	7f ef       	ldi	r23, 0xFF	; 255
     d0e:	c5 01       	movw	r24, r10
     d10:	0e 94 12 09 	call	0x1224	; 0x1224 <strnlen>
     d14:	4c 01       	movw	r8, r24
     d16:	82 01       	movw	r16, r4
     d18:	f3 2d       	mov	r31, r3
     d1a:	ff 77       	andi	r31, 0x7F	; 127
     d1c:	3f 2e       	mov	r3, r31
     d1e:	16 c0       	rjmp	.+44     	; 0xd4c <vfprintf+0x188>
     d20:	28 01       	movw	r4, r16
     d22:	22 e0       	ldi	r18, 0x02	; 2
     d24:	42 0e       	add	r4, r18
     d26:	51 1c       	adc	r5, r1
     d28:	f8 01       	movw	r30, r16
     d2a:	a0 80       	ld	r10, Z
     d2c:	b1 80       	ldd	r11, Z+1	; 0x01
     d2e:	36 fe       	sbrs	r3, 6
     d30:	03 c0       	rjmp	.+6      	; 0xd38 <vfprintf+0x174>
     d32:	69 2d       	mov	r22, r9
     d34:	70 e0       	ldi	r23, 0x00	; 0
     d36:	02 c0       	rjmp	.+4      	; 0xd3c <vfprintf+0x178>
     d38:	6f ef       	ldi	r22, 0xFF	; 255
     d3a:	7f ef       	ldi	r23, 0xFF	; 255
     d3c:	c5 01       	movw	r24, r10
     d3e:	0e 94 00 09 	call	0x1200	; 0x1200 <strnlen_P>
     d42:	4c 01       	movw	r8, r24
     d44:	f3 2d       	mov	r31, r3
     d46:	f0 68       	ori	r31, 0x80	; 128
     d48:	3f 2e       	mov	r3, r31
     d4a:	82 01       	movw	r16, r4
     d4c:	33 fc       	sbrc	r3, 3
     d4e:	1b c0       	rjmp	.+54     	; 0xd86 <vfprintf+0x1c2>
     d50:	82 2d       	mov	r24, r2
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	88 16       	cp	r8, r24
     d56:	99 06       	cpc	r9, r25
     d58:	b0 f4       	brcc	.+44     	; 0xd86 <vfprintf+0x1c2>
     d5a:	b6 01       	movw	r22, r12
     d5c:	80 e2       	ldi	r24, 0x20	; 32
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	0e 94 1d 09 	call	0x123a	; 0x123a <fputc>
     d64:	2a 94       	dec	r2
     d66:	f4 cf       	rjmp	.-24     	; 0xd50 <vfprintf+0x18c>
     d68:	f5 01       	movw	r30, r10
     d6a:	37 fc       	sbrc	r3, 7
     d6c:	85 91       	lpm	r24, Z+
     d6e:	37 fe       	sbrs	r3, 7
     d70:	81 91       	ld	r24, Z+
     d72:	5f 01       	movw	r10, r30
     d74:	b6 01       	movw	r22, r12
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	0e 94 1d 09 	call	0x123a	; 0x123a <fputc>
     d7c:	21 10       	cpse	r2, r1
     d7e:	2a 94       	dec	r2
     d80:	21 e0       	ldi	r18, 0x01	; 1
     d82:	82 1a       	sub	r8, r18
     d84:	91 08       	sbc	r9, r1
     d86:	81 14       	cp	r8, r1
     d88:	91 04       	cpc	r9, r1
     d8a:	71 f7       	brne	.-36     	; 0xd68 <vfprintf+0x1a4>
     d8c:	e8 c0       	rjmp	.+464    	; 0xf5e <vfprintf+0x39a>
     d8e:	84 36       	cpi	r24, 0x64	; 100
     d90:	11 f0       	breq	.+4      	; 0xd96 <vfprintf+0x1d2>
     d92:	89 36       	cpi	r24, 0x69	; 105
     d94:	41 f5       	brne	.+80     	; 0xde6 <vfprintf+0x222>
     d96:	f8 01       	movw	r30, r16
     d98:	37 fe       	sbrs	r3, 7
     d9a:	07 c0       	rjmp	.+14     	; 0xdaa <vfprintf+0x1e6>
     d9c:	60 81       	ld	r22, Z
     d9e:	71 81       	ldd	r23, Z+1	; 0x01
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	0c 5f       	subi	r16, 0xFC	; 252
     da6:	1f 4f       	sbci	r17, 0xFF	; 255
     da8:	08 c0       	rjmp	.+16     	; 0xdba <vfprintf+0x1f6>
     daa:	60 81       	ld	r22, Z
     dac:	71 81       	ldd	r23, Z+1	; 0x01
     dae:	07 2e       	mov	r0, r23
     db0:	00 0c       	add	r0, r0
     db2:	88 0b       	sbc	r24, r24
     db4:	99 0b       	sbc	r25, r25
     db6:	0e 5f       	subi	r16, 0xFE	; 254
     db8:	1f 4f       	sbci	r17, 0xFF	; 255
     dba:	f3 2d       	mov	r31, r3
     dbc:	ff 76       	andi	r31, 0x6F	; 111
     dbe:	3f 2e       	mov	r3, r31
     dc0:	97 ff       	sbrs	r25, 7
     dc2:	09 c0       	rjmp	.+18     	; 0xdd6 <vfprintf+0x212>
     dc4:	90 95       	com	r25
     dc6:	80 95       	com	r24
     dc8:	70 95       	com	r23
     dca:	61 95       	neg	r22
     dcc:	7f 4f       	sbci	r23, 0xFF	; 255
     dce:	8f 4f       	sbci	r24, 0xFF	; 255
     dd0:	9f 4f       	sbci	r25, 0xFF	; 255
     dd2:	f0 68       	ori	r31, 0x80	; 128
     dd4:	3f 2e       	mov	r3, r31
     dd6:	2a e0       	ldi	r18, 0x0A	; 10
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	a3 01       	movw	r20, r6
     ddc:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__ultoa_invert>
     de0:	88 2e       	mov	r8, r24
     de2:	86 18       	sub	r8, r6
     de4:	45 c0       	rjmp	.+138    	; 0xe70 <vfprintf+0x2ac>
     de6:	85 37       	cpi	r24, 0x75	; 117
     de8:	31 f4       	brne	.+12     	; 0xdf6 <vfprintf+0x232>
     dea:	23 2d       	mov	r18, r3
     dec:	2f 7e       	andi	r18, 0xEF	; 239
     dee:	b2 2e       	mov	r11, r18
     df0:	2a e0       	ldi	r18, 0x0A	; 10
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	25 c0       	rjmp	.+74     	; 0xe40 <vfprintf+0x27c>
     df6:	93 2d       	mov	r25, r3
     df8:	99 7f       	andi	r25, 0xF9	; 249
     dfa:	b9 2e       	mov	r11, r25
     dfc:	8f 36       	cpi	r24, 0x6F	; 111
     dfe:	c1 f0       	breq	.+48     	; 0xe30 <vfprintf+0x26c>
     e00:	18 f4       	brcc	.+6      	; 0xe08 <vfprintf+0x244>
     e02:	88 35       	cpi	r24, 0x58	; 88
     e04:	79 f0       	breq	.+30     	; 0xe24 <vfprintf+0x260>
     e06:	b5 c0       	rjmp	.+362    	; 0xf72 <vfprintf+0x3ae>
     e08:	80 37       	cpi	r24, 0x70	; 112
     e0a:	19 f0       	breq	.+6      	; 0xe12 <vfprintf+0x24e>
     e0c:	88 37       	cpi	r24, 0x78	; 120
     e0e:	21 f0       	breq	.+8      	; 0xe18 <vfprintf+0x254>
     e10:	b0 c0       	rjmp	.+352    	; 0xf72 <vfprintf+0x3ae>
     e12:	e9 2f       	mov	r30, r25
     e14:	e0 61       	ori	r30, 0x10	; 16
     e16:	be 2e       	mov	r11, r30
     e18:	b4 fe       	sbrs	r11, 4
     e1a:	0d c0       	rjmp	.+26     	; 0xe36 <vfprintf+0x272>
     e1c:	fb 2d       	mov	r31, r11
     e1e:	f4 60       	ori	r31, 0x04	; 4
     e20:	bf 2e       	mov	r11, r31
     e22:	09 c0       	rjmp	.+18     	; 0xe36 <vfprintf+0x272>
     e24:	34 fe       	sbrs	r3, 4
     e26:	0a c0       	rjmp	.+20     	; 0xe3c <vfprintf+0x278>
     e28:	29 2f       	mov	r18, r25
     e2a:	26 60       	ori	r18, 0x06	; 6
     e2c:	b2 2e       	mov	r11, r18
     e2e:	06 c0       	rjmp	.+12     	; 0xe3c <vfprintf+0x278>
     e30:	28 e0       	ldi	r18, 0x08	; 8
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	05 c0       	rjmp	.+10     	; 0xe40 <vfprintf+0x27c>
     e36:	20 e1       	ldi	r18, 0x10	; 16
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <vfprintf+0x27c>
     e3c:	20 e1       	ldi	r18, 0x10	; 16
     e3e:	32 e0       	ldi	r19, 0x02	; 2
     e40:	f8 01       	movw	r30, r16
     e42:	b7 fe       	sbrs	r11, 7
     e44:	07 c0       	rjmp	.+14     	; 0xe54 <vfprintf+0x290>
     e46:	60 81       	ld	r22, Z
     e48:	71 81       	ldd	r23, Z+1	; 0x01
     e4a:	82 81       	ldd	r24, Z+2	; 0x02
     e4c:	93 81       	ldd	r25, Z+3	; 0x03
     e4e:	0c 5f       	subi	r16, 0xFC	; 252
     e50:	1f 4f       	sbci	r17, 0xFF	; 255
     e52:	06 c0       	rjmp	.+12     	; 0xe60 <vfprintf+0x29c>
     e54:	60 81       	ld	r22, Z
     e56:	71 81       	ldd	r23, Z+1	; 0x01
     e58:	80 e0       	ldi	r24, 0x00	; 0
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	0e 5f       	subi	r16, 0xFE	; 254
     e5e:	1f 4f       	sbci	r17, 0xFF	; 255
     e60:	a3 01       	movw	r20, r6
     e62:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__ultoa_invert>
     e66:	88 2e       	mov	r8, r24
     e68:	86 18       	sub	r8, r6
     e6a:	fb 2d       	mov	r31, r11
     e6c:	ff 77       	andi	r31, 0x7F	; 127
     e6e:	3f 2e       	mov	r3, r31
     e70:	36 fe       	sbrs	r3, 6
     e72:	0d c0       	rjmp	.+26     	; 0xe8e <vfprintf+0x2ca>
     e74:	23 2d       	mov	r18, r3
     e76:	2e 7f       	andi	r18, 0xFE	; 254
     e78:	a2 2e       	mov	r10, r18
     e7a:	89 14       	cp	r8, r9
     e7c:	58 f4       	brcc	.+22     	; 0xe94 <vfprintf+0x2d0>
     e7e:	34 fe       	sbrs	r3, 4
     e80:	0b c0       	rjmp	.+22     	; 0xe98 <vfprintf+0x2d4>
     e82:	32 fc       	sbrc	r3, 2
     e84:	09 c0       	rjmp	.+18     	; 0xe98 <vfprintf+0x2d4>
     e86:	83 2d       	mov	r24, r3
     e88:	8e 7e       	andi	r24, 0xEE	; 238
     e8a:	a8 2e       	mov	r10, r24
     e8c:	05 c0       	rjmp	.+10     	; 0xe98 <vfprintf+0x2d4>
     e8e:	b8 2c       	mov	r11, r8
     e90:	a3 2c       	mov	r10, r3
     e92:	03 c0       	rjmp	.+6      	; 0xe9a <vfprintf+0x2d6>
     e94:	b8 2c       	mov	r11, r8
     e96:	01 c0       	rjmp	.+2      	; 0xe9a <vfprintf+0x2d6>
     e98:	b9 2c       	mov	r11, r9
     e9a:	a4 fe       	sbrs	r10, 4
     e9c:	0f c0       	rjmp	.+30     	; 0xebc <vfprintf+0x2f8>
     e9e:	fe 01       	movw	r30, r28
     ea0:	e8 0d       	add	r30, r8
     ea2:	f1 1d       	adc	r31, r1
     ea4:	80 81       	ld	r24, Z
     ea6:	80 33       	cpi	r24, 0x30	; 48
     ea8:	21 f4       	brne	.+8      	; 0xeb2 <vfprintf+0x2ee>
     eaa:	9a 2d       	mov	r25, r10
     eac:	99 7e       	andi	r25, 0xE9	; 233
     eae:	a9 2e       	mov	r10, r25
     eb0:	09 c0       	rjmp	.+18     	; 0xec4 <vfprintf+0x300>
     eb2:	a2 fe       	sbrs	r10, 2
     eb4:	06 c0       	rjmp	.+12     	; 0xec2 <vfprintf+0x2fe>
     eb6:	b3 94       	inc	r11
     eb8:	b3 94       	inc	r11
     eba:	04 c0       	rjmp	.+8      	; 0xec4 <vfprintf+0x300>
     ebc:	8a 2d       	mov	r24, r10
     ebe:	86 78       	andi	r24, 0x86	; 134
     ec0:	09 f0       	breq	.+2      	; 0xec4 <vfprintf+0x300>
     ec2:	b3 94       	inc	r11
     ec4:	a3 fc       	sbrc	r10, 3
     ec6:	11 c0       	rjmp	.+34     	; 0xeea <vfprintf+0x326>
     ec8:	a0 fe       	sbrs	r10, 0
     eca:	06 c0       	rjmp	.+12     	; 0xed8 <vfprintf+0x314>
     ecc:	b2 14       	cp	r11, r2
     ece:	88 f4       	brcc	.+34     	; 0xef2 <vfprintf+0x32e>
     ed0:	28 0c       	add	r2, r8
     ed2:	92 2c       	mov	r9, r2
     ed4:	9b 18       	sub	r9, r11
     ed6:	0e c0       	rjmp	.+28     	; 0xef4 <vfprintf+0x330>
     ed8:	b2 14       	cp	r11, r2
     eda:	60 f4       	brcc	.+24     	; 0xef4 <vfprintf+0x330>
     edc:	b6 01       	movw	r22, r12
     ede:	80 e2       	ldi	r24, 0x20	; 32
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	0e 94 1d 09 	call	0x123a	; 0x123a <fputc>
     ee6:	b3 94       	inc	r11
     ee8:	f7 cf       	rjmp	.-18     	; 0xed8 <vfprintf+0x314>
     eea:	b2 14       	cp	r11, r2
     eec:	18 f4       	brcc	.+6      	; 0xef4 <vfprintf+0x330>
     eee:	2b 18       	sub	r2, r11
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <vfprintf+0x332>
     ef2:	98 2c       	mov	r9, r8
     ef4:	21 2c       	mov	r2, r1
     ef6:	a4 fe       	sbrs	r10, 4
     ef8:	10 c0       	rjmp	.+32     	; 0xf1a <vfprintf+0x356>
     efa:	b6 01       	movw	r22, r12
     efc:	80 e3       	ldi	r24, 0x30	; 48
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	0e 94 1d 09 	call	0x123a	; 0x123a <fputc>
     f04:	a2 fe       	sbrs	r10, 2
     f06:	17 c0       	rjmp	.+46     	; 0xf36 <vfprintf+0x372>
     f08:	a1 fc       	sbrc	r10, 1
     f0a:	03 c0       	rjmp	.+6      	; 0xf12 <vfprintf+0x34e>
     f0c:	88 e7       	ldi	r24, 0x78	; 120
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	02 c0       	rjmp	.+4      	; 0xf16 <vfprintf+0x352>
     f12:	88 e5       	ldi	r24, 0x58	; 88
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	b6 01       	movw	r22, r12
     f18:	0c c0       	rjmp	.+24     	; 0xf32 <vfprintf+0x36e>
     f1a:	8a 2d       	mov	r24, r10
     f1c:	86 78       	andi	r24, 0x86	; 134
     f1e:	59 f0       	breq	.+22     	; 0xf36 <vfprintf+0x372>
     f20:	a1 fe       	sbrs	r10, 1
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <vfprintf+0x364>
     f24:	8b e2       	ldi	r24, 0x2B	; 43
     f26:	01 c0       	rjmp	.+2      	; 0xf2a <vfprintf+0x366>
     f28:	80 e2       	ldi	r24, 0x20	; 32
     f2a:	a7 fc       	sbrc	r10, 7
     f2c:	8d e2       	ldi	r24, 0x2D	; 45
     f2e:	b6 01       	movw	r22, r12
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	0e 94 1d 09 	call	0x123a	; 0x123a <fputc>
     f36:	89 14       	cp	r8, r9
     f38:	38 f4       	brcc	.+14     	; 0xf48 <vfprintf+0x384>
     f3a:	b6 01       	movw	r22, r12
     f3c:	80 e3       	ldi	r24, 0x30	; 48
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	0e 94 1d 09 	call	0x123a	; 0x123a <fputc>
     f44:	9a 94       	dec	r9
     f46:	f7 cf       	rjmp	.-18     	; 0xf36 <vfprintf+0x372>
     f48:	8a 94       	dec	r8
     f4a:	f3 01       	movw	r30, r6
     f4c:	e8 0d       	add	r30, r8
     f4e:	f1 1d       	adc	r31, r1
     f50:	80 81       	ld	r24, Z
     f52:	b6 01       	movw	r22, r12
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	0e 94 1d 09 	call	0x123a	; 0x123a <fputc>
     f5a:	81 10       	cpse	r8, r1
     f5c:	f5 cf       	rjmp	.-22     	; 0xf48 <vfprintf+0x384>
     f5e:	22 20       	and	r2, r2
     f60:	09 f4       	brne	.+2      	; 0xf64 <vfprintf+0x3a0>
     f62:	42 ce       	rjmp	.-892    	; 0xbe8 <vfprintf+0x24>
     f64:	b6 01       	movw	r22, r12
     f66:	80 e2       	ldi	r24, 0x20	; 32
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	0e 94 1d 09 	call	0x123a	; 0x123a <fputc>
     f6e:	2a 94       	dec	r2
     f70:	f6 cf       	rjmp	.-20     	; 0xf5e <vfprintf+0x39a>
     f72:	f6 01       	movw	r30, r12
     f74:	86 81       	ldd	r24, Z+6	; 0x06
     f76:	97 81       	ldd	r25, Z+7	; 0x07
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <vfprintf+0x3ba>
     f7a:	8f ef       	ldi	r24, 0xFF	; 255
     f7c:	9f ef       	ldi	r25, 0xFF	; 255
     f7e:	2b 96       	adiw	r28, 0x0b	; 11
     f80:	e2 e1       	ldi	r30, 0x12	; 18
     f82:	0c 94 d3 09 	jmp	0x13a6	; 0x13a6 <__epilogue_restores__>

00000f86 <calloc>:
     f86:	0f 93       	push	r16
     f88:	1f 93       	push	r17
     f8a:	cf 93       	push	r28
     f8c:	df 93       	push	r29
     f8e:	86 9f       	mul	r24, r22
     f90:	80 01       	movw	r16, r0
     f92:	87 9f       	mul	r24, r23
     f94:	10 0d       	add	r17, r0
     f96:	96 9f       	mul	r25, r22
     f98:	10 0d       	add	r17, r0
     f9a:	11 24       	eor	r1, r1
     f9c:	c8 01       	movw	r24, r16
     f9e:	0e 94 df 07 	call	0xfbe	; 0xfbe <malloc>
     fa2:	ec 01       	movw	r28, r24
     fa4:	00 97       	sbiw	r24, 0x00	; 0
     fa6:	29 f0       	breq	.+10     	; 0xfb2 <calloc+0x2c>
     fa8:	a8 01       	movw	r20, r16
     faa:	60 e0       	ldi	r22, 0x00	; 0
     fac:	70 e0       	ldi	r23, 0x00	; 0
     fae:	0e 94 0b 09 	call	0x1216	; 0x1216 <memset>
     fb2:	ce 01       	movw	r24, r28
     fb4:	df 91       	pop	r29
     fb6:	cf 91       	pop	r28
     fb8:	1f 91       	pop	r17
     fba:	0f 91       	pop	r16
     fbc:	08 95       	ret

00000fbe <malloc>:
     fbe:	0f 93       	push	r16
     fc0:	1f 93       	push	r17
     fc2:	cf 93       	push	r28
     fc4:	df 93       	push	r29
     fc6:	82 30       	cpi	r24, 0x02	; 2
     fc8:	91 05       	cpc	r25, r1
     fca:	10 f4       	brcc	.+4      	; 0xfd0 <malloc+0x12>
     fcc:	82 e0       	ldi	r24, 0x02	; 2
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	e0 91 13 04 	lds	r30, 0x0413	; 0x800413 <__flp>
     fd4:	f0 91 14 04 	lds	r31, 0x0414	; 0x800414 <__flp+0x1>
     fd8:	20 e0       	ldi	r18, 0x00	; 0
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	a0 e0       	ldi	r26, 0x00	; 0
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	30 97       	sbiw	r30, 0x00	; 0
     fe2:	19 f1       	breq	.+70     	; 0x102a <malloc+0x6c>
     fe4:	40 81       	ld	r20, Z
     fe6:	51 81       	ldd	r21, Z+1	; 0x01
     fe8:	02 81       	ldd	r16, Z+2	; 0x02
     fea:	13 81       	ldd	r17, Z+3	; 0x03
     fec:	48 17       	cp	r20, r24
     fee:	59 07       	cpc	r21, r25
     ff0:	c8 f0       	brcs	.+50     	; 0x1024 <malloc+0x66>
     ff2:	84 17       	cp	r24, r20
     ff4:	95 07       	cpc	r25, r21
     ff6:	69 f4       	brne	.+26     	; 0x1012 <malloc+0x54>
     ff8:	10 97       	sbiw	r26, 0x00	; 0
     ffa:	31 f0       	breq	.+12     	; 0x1008 <malloc+0x4a>
     ffc:	12 96       	adiw	r26, 0x02	; 2
     ffe:	0c 93       	st	X, r16
    1000:	12 97       	sbiw	r26, 0x02	; 2
    1002:	13 96       	adiw	r26, 0x03	; 3
    1004:	1c 93       	st	X, r17
    1006:	27 c0       	rjmp	.+78     	; 0x1056 <malloc+0x98>
    1008:	00 93 13 04 	sts	0x0413, r16	; 0x800413 <__flp>
    100c:	10 93 14 04 	sts	0x0414, r17	; 0x800414 <__flp+0x1>
    1010:	22 c0       	rjmp	.+68     	; 0x1056 <malloc+0x98>
    1012:	21 15       	cp	r18, r1
    1014:	31 05       	cpc	r19, r1
    1016:	19 f0       	breq	.+6      	; 0x101e <malloc+0x60>
    1018:	42 17       	cp	r20, r18
    101a:	53 07       	cpc	r21, r19
    101c:	18 f4       	brcc	.+6      	; 0x1024 <malloc+0x66>
    101e:	9a 01       	movw	r18, r20
    1020:	bd 01       	movw	r22, r26
    1022:	ef 01       	movw	r28, r30
    1024:	df 01       	movw	r26, r30
    1026:	f8 01       	movw	r30, r16
    1028:	db cf       	rjmp	.-74     	; 0xfe0 <malloc+0x22>
    102a:	21 15       	cp	r18, r1
    102c:	31 05       	cpc	r19, r1
    102e:	f9 f0       	breq	.+62     	; 0x106e <malloc+0xb0>
    1030:	28 1b       	sub	r18, r24
    1032:	39 0b       	sbc	r19, r25
    1034:	24 30       	cpi	r18, 0x04	; 4
    1036:	31 05       	cpc	r19, r1
    1038:	80 f4       	brcc	.+32     	; 0x105a <malloc+0x9c>
    103a:	8a 81       	ldd	r24, Y+2	; 0x02
    103c:	9b 81       	ldd	r25, Y+3	; 0x03
    103e:	61 15       	cp	r22, r1
    1040:	71 05       	cpc	r23, r1
    1042:	21 f0       	breq	.+8      	; 0x104c <malloc+0x8e>
    1044:	fb 01       	movw	r30, r22
    1046:	93 83       	std	Z+3, r25	; 0x03
    1048:	82 83       	std	Z+2, r24	; 0x02
    104a:	04 c0       	rjmp	.+8      	; 0x1054 <malloc+0x96>
    104c:	90 93 14 04 	sts	0x0414, r25	; 0x800414 <__flp+0x1>
    1050:	80 93 13 04 	sts	0x0413, r24	; 0x800413 <__flp>
    1054:	fe 01       	movw	r30, r28
    1056:	32 96       	adiw	r30, 0x02	; 2
    1058:	44 c0       	rjmp	.+136    	; 0x10e2 <malloc+0x124>
    105a:	fe 01       	movw	r30, r28
    105c:	e2 0f       	add	r30, r18
    105e:	f3 1f       	adc	r31, r19
    1060:	81 93       	st	Z+, r24
    1062:	91 93       	st	Z+, r25
    1064:	22 50       	subi	r18, 0x02	; 2
    1066:	31 09       	sbc	r19, r1
    1068:	39 83       	std	Y+1, r19	; 0x01
    106a:	28 83       	st	Y, r18
    106c:	3a c0       	rjmp	.+116    	; 0x10e2 <malloc+0x124>
    106e:	20 91 11 04 	lds	r18, 0x0411	; 0x800411 <__brkval>
    1072:	30 91 12 04 	lds	r19, 0x0412	; 0x800412 <__brkval+0x1>
    1076:	23 2b       	or	r18, r19
    1078:	41 f4       	brne	.+16     	; 0x108a <malloc+0xcc>
    107a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    107e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1082:	30 93 12 04 	sts	0x0412, r19	; 0x800412 <__brkval+0x1>
    1086:	20 93 11 04 	sts	0x0411, r18	; 0x800411 <__brkval>
    108a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    108e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1092:	21 15       	cp	r18, r1
    1094:	31 05       	cpc	r19, r1
    1096:	41 f4       	brne	.+16     	; 0x10a8 <malloc+0xea>
    1098:	2d b7       	in	r18, 0x3d	; 61
    109a:	3e b7       	in	r19, 0x3e	; 62
    109c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    10a0:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    10a4:	24 1b       	sub	r18, r20
    10a6:	35 0b       	sbc	r19, r21
    10a8:	e0 91 11 04 	lds	r30, 0x0411	; 0x800411 <__brkval>
    10ac:	f0 91 12 04 	lds	r31, 0x0412	; 0x800412 <__brkval+0x1>
    10b0:	e2 17       	cp	r30, r18
    10b2:	f3 07       	cpc	r31, r19
    10b4:	a0 f4       	brcc	.+40     	; 0x10de <malloc+0x120>
    10b6:	2e 1b       	sub	r18, r30
    10b8:	3f 0b       	sbc	r19, r31
    10ba:	28 17       	cp	r18, r24
    10bc:	39 07       	cpc	r19, r25
    10be:	78 f0       	brcs	.+30     	; 0x10de <malloc+0x120>
    10c0:	ac 01       	movw	r20, r24
    10c2:	4e 5f       	subi	r20, 0xFE	; 254
    10c4:	5f 4f       	sbci	r21, 0xFF	; 255
    10c6:	24 17       	cp	r18, r20
    10c8:	35 07       	cpc	r19, r21
    10ca:	48 f0       	brcs	.+18     	; 0x10de <malloc+0x120>
    10cc:	4e 0f       	add	r20, r30
    10ce:	5f 1f       	adc	r21, r31
    10d0:	50 93 12 04 	sts	0x0412, r21	; 0x800412 <__brkval+0x1>
    10d4:	40 93 11 04 	sts	0x0411, r20	; 0x800411 <__brkval>
    10d8:	81 93       	st	Z+, r24
    10da:	91 93       	st	Z+, r25
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <malloc+0x124>
    10de:	e0 e0       	ldi	r30, 0x00	; 0
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	cf 01       	movw	r24, r30
    10e4:	df 91       	pop	r29
    10e6:	cf 91       	pop	r28
    10e8:	1f 91       	pop	r17
    10ea:	0f 91       	pop	r16
    10ec:	08 95       	ret

000010ee <free>:
    10ee:	cf 93       	push	r28
    10f0:	df 93       	push	r29
    10f2:	00 97       	sbiw	r24, 0x00	; 0
    10f4:	09 f4       	brne	.+2      	; 0x10f8 <free+0xa>
    10f6:	81 c0       	rjmp	.+258    	; 0x11fa <free+0x10c>
    10f8:	fc 01       	movw	r30, r24
    10fa:	32 97       	sbiw	r30, 0x02	; 2
    10fc:	13 82       	std	Z+3, r1	; 0x03
    10fe:	12 82       	std	Z+2, r1	; 0x02
    1100:	a0 91 13 04 	lds	r26, 0x0413	; 0x800413 <__flp>
    1104:	b0 91 14 04 	lds	r27, 0x0414	; 0x800414 <__flp+0x1>
    1108:	10 97       	sbiw	r26, 0x00	; 0
    110a:	81 f4       	brne	.+32     	; 0x112c <free+0x3e>
    110c:	20 81       	ld	r18, Z
    110e:	31 81       	ldd	r19, Z+1	; 0x01
    1110:	82 0f       	add	r24, r18
    1112:	93 1f       	adc	r25, r19
    1114:	20 91 11 04 	lds	r18, 0x0411	; 0x800411 <__brkval>
    1118:	30 91 12 04 	lds	r19, 0x0412	; 0x800412 <__brkval+0x1>
    111c:	28 17       	cp	r18, r24
    111e:	39 07       	cpc	r19, r25
    1120:	51 f5       	brne	.+84     	; 0x1176 <free+0x88>
    1122:	f0 93 12 04 	sts	0x0412, r31	; 0x800412 <__brkval+0x1>
    1126:	e0 93 11 04 	sts	0x0411, r30	; 0x800411 <__brkval>
    112a:	67 c0       	rjmp	.+206    	; 0x11fa <free+0x10c>
    112c:	ed 01       	movw	r28, r26
    112e:	20 e0       	ldi	r18, 0x00	; 0
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	ce 17       	cp	r28, r30
    1134:	df 07       	cpc	r29, r31
    1136:	40 f4       	brcc	.+16     	; 0x1148 <free+0x5a>
    1138:	4a 81       	ldd	r20, Y+2	; 0x02
    113a:	5b 81       	ldd	r21, Y+3	; 0x03
    113c:	9e 01       	movw	r18, r28
    113e:	41 15       	cp	r20, r1
    1140:	51 05       	cpc	r21, r1
    1142:	f1 f0       	breq	.+60     	; 0x1180 <free+0x92>
    1144:	ea 01       	movw	r28, r20
    1146:	f5 cf       	rjmp	.-22     	; 0x1132 <free+0x44>
    1148:	d3 83       	std	Z+3, r29	; 0x03
    114a:	c2 83       	std	Z+2, r28	; 0x02
    114c:	40 81       	ld	r20, Z
    114e:	51 81       	ldd	r21, Z+1	; 0x01
    1150:	84 0f       	add	r24, r20
    1152:	95 1f       	adc	r25, r21
    1154:	c8 17       	cp	r28, r24
    1156:	d9 07       	cpc	r29, r25
    1158:	59 f4       	brne	.+22     	; 0x1170 <free+0x82>
    115a:	88 81       	ld	r24, Y
    115c:	99 81       	ldd	r25, Y+1	; 0x01
    115e:	84 0f       	add	r24, r20
    1160:	95 1f       	adc	r25, r21
    1162:	02 96       	adiw	r24, 0x02	; 2
    1164:	91 83       	std	Z+1, r25	; 0x01
    1166:	80 83       	st	Z, r24
    1168:	8a 81       	ldd	r24, Y+2	; 0x02
    116a:	9b 81       	ldd	r25, Y+3	; 0x03
    116c:	93 83       	std	Z+3, r25	; 0x03
    116e:	82 83       	std	Z+2, r24	; 0x02
    1170:	21 15       	cp	r18, r1
    1172:	31 05       	cpc	r19, r1
    1174:	29 f4       	brne	.+10     	; 0x1180 <free+0x92>
    1176:	f0 93 14 04 	sts	0x0414, r31	; 0x800414 <__flp+0x1>
    117a:	e0 93 13 04 	sts	0x0413, r30	; 0x800413 <__flp>
    117e:	3d c0       	rjmp	.+122    	; 0x11fa <free+0x10c>
    1180:	e9 01       	movw	r28, r18
    1182:	fb 83       	std	Y+3, r31	; 0x03
    1184:	ea 83       	std	Y+2, r30	; 0x02
    1186:	49 91       	ld	r20, Y+
    1188:	59 91       	ld	r21, Y+
    118a:	c4 0f       	add	r28, r20
    118c:	d5 1f       	adc	r29, r21
    118e:	ec 17       	cp	r30, r28
    1190:	fd 07       	cpc	r31, r29
    1192:	61 f4       	brne	.+24     	; 0x11ac <free+0xbe>
    1194:	80 81       	ld	r24, Z
    1196:	91 81       	ldd	r25, Z+1	; 0x01
    1198:	84 0f       	add	r24, r20
    119a:	95 1f       	adc	r25, r21
    119c:	02 96       	adiw	r24, 0x02	; 2
    119e:	e9 01       	movw	r28, r18
    11a0:	99 83       	std	Y+1, r25	; 0x01
    11a2:	88 83       	st	Y, r24
    11a4:	82 81       	ldd	r24, Z+2	; 0x02
    11a6:	93 81       	ldd	r25, Z+3	; 0x03
    11a8:	9b 83       	std	Y+3, r25	; 0x03
    11aa:	8a 83       	std	Y+2, r24	; 0x02
    11ac:	e0 e0       	ldi	r30, 0x00	; 0
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	12 96       	adiw	r26, 0x02	; 2
    11b2:	8d 91       	ld	r24, X+
    11b4:	9c 91       	ld	r25, X
    11b6:	13 97       	sbiw	r26, 0x03	; 3
    11b8:	00 97       	sbiw	r24, 0x00	; 0
    11ba:	19 f0       	breq	.+6      	; 0x11c2 <free+0xd4>
    11bc:	fd 01       	movw	r30, r26
    11be:	dc 01       	movw	r26, r24
    11c0:	f7 cf       	rjmp	.-18     	; 0x11b0 <free+0xc2>
    11c2:	8d 91       	ld	r24, X+
    11c4:	9c 91       	ld	r25, X
    11c6:	11 97       	sbiw	r26, 0x01	; 1
    11c8:	9d 01       	movw	r18, r26
    11ca:	2e 5f       	subi	r18, 0xFE	; 254
    11cc:	3f 4f       	sbci	r19, 0xFF	; 255
    11ce:	82 0f       	add	r24, r18
    11d0:	93 1f       	adc	r25, r19
    11d2:	20 91 11 04 	lds	r18, 0x0411	; 0x800411 <__brkval>
    11d6:	30 91 12 04 	lds	r19, 0x0412	; 0x800412 <__brkval+0x1>
    11da:	28 17       	cp	r18, r24
    11dc:	39 07       	cpc	r19, r25
    11de:	69 f4       	brne	.+26     	; 0x11fa <free+0x10c>
    11e0:	30 97       	sbiw	r30, 0x00	; 0
    11e2:	29 f4       	brne	.+10     	; 0x11ee <free+0x100>
    11e4:	10 92 14 04 	sts	0x0414, r1	; 0x800414 <__flp+0x1>
    11e8:	10 92 13 04 	sts	0x0413, r1	; 0x800413 <__flp>
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <free+0x104>
    11ee:	13 82       	std	Z+3, r1	; 0x03
    11f0:	12 82       	std	Z+2, r1	; 0x02
    11f2:	b0 93 12 04 	sts	0x0412, r27	; 0x800412 <__brkval+0x1>
    11f6:	a0 93 11 04 	sts	0x0411, r26	; 0x800411 <__brkval>
    11fa:	df 91       	pop	r29
    11fc:	cf 91       	pop	r28
    11fe:	08 95       	ret

00001200 <strnlen_P>:
    1200:	fc 01       	movw	r30, r24
    1202:	05 90       	lpm	r0, Z+
    1204:	61 50       	subi	r22, 0x01	; 1
    1206:	70 40       	sbci	r23, 0x00	; 0
    1208:	01 10       	cpse	r0, r1
    120a:	d8 f7       	brcc	.-10     	; 0x1202 <strnlen_P+0x2>
    120c:	80 95       	com	r24
    120e:	90 95       	com	r25
    1210:	8e 0f       	add	r24, r30
    1212:	9f 1f       	adc	r25, r31
    1214:	08 95       	ret

00001216 <memset>:
    1216:	dc 01       	movw	r26, r24
    1218:	01 c0       	rjmp	.+2      	; 0x121c <memset+0x6>
    121a:	6d 93       	st	X+, r22
    121c:	41 50       	subi	r20, 0x01	; 1
    121e:	50 40       	sbci	r21, 0x00	; 0
    1220:	e0 f7       	brcc	.-8      	; 0x121a <memset+0x4>
    1222:	08 95       	ret

00001224 <strnlen>:
    1224:	fc 01       	movw	r30, r24
    1226:	61 50       	subi	r22, 0x01	; 1
    1228:	70 40       	sbci	r23, 0x00	; 0
    122a:	01 90       	ld	r0, Z+
    122c:	01 10       	cpse	r0, r1
    122e:	d8 f7       	brcc	.-10     	; 0x1226 <strnlen+0x2>
    1230:	80 95       	com	r24
    1232:	90 95       	com	r25
    1234:	8e 0f       	add	r24, r30
    1236:	9f 1f       	adc	r25, r31
    1238:	08 95       	ret

0000123a <fputc>:
    123a:	0f 93       	push	r16
    123c:	1f 93       	push	r17
    123e:	cf 93       	push	r28
    1240:	df 93       	push	r29
    1242:	fb 01       	movw	r30, r22
    1244:	23 81       	ldd	r18, Z+3	; 0x03
    1246:	21 fd       	sbrc	r18, 1
    1248:	03 c0       	rjmp	.+6      	; 0x1250 <fputc+0x16>
    124a:	8f ef       	ldi	r24, 0xFF	; 255
    124c:	9f ef       	ldi	r25, 0xFF	; 255
    124e:	2c c0       	rjmp	.+88     	; 0x12a8 <fputc+0x6e>
    1250:	22 ff       	sbrs	r18, 2
    1252:	16 c0       	rjmp	.+44     	; 0x1280 <fputc+0x46>
    1254:	46 81       	ldd	r20, Z+6	; 0x06
    1256:	57 81       	ldd	r21, Z+7	; 0x07
    1258:	24 81       	ldd	r18, Z+4	; 0x04
    125a:	35 81       	ldd	r19, Z+5	; 0x05
    125c:	42 17       	cp	r20, r18
    125e:	53 07       	cpc	r21, r19
    1260:	44 f4       	brge	.+16     	; 0x1272 <fputc+0x38>
    1262:	a0 81       	ld	r26, Z
    1264:	b1 81       	ldd	r27, Z+1	; 0x01
    1266:	9d 01       	movw	r18, r26
    1268:	2f 5f       	subi	r18, 0xFF	; 255
    126a:	3f 4f       	sbci	r19, 0xFF	; 255
    126c:	31 83       	std	Z+1, r19	; 0x01
    126e:	20 83       	st	Z, r18
    1270:	8c 93       	st	X, r24
    1272:	26 81       	ldd	r18, Z+6	; 0x06
    1274:	37 81       	ldd	r19, Z+7	; 0x07
    1276:	2f 5f       	subi	r18, 0xFF	; 255
    1278:	3f 4f       	sbci	r19, 0xFF	; 255
    127a:	37 83       	std	Z+7, r19	; 0x07
    127c:	26 83       	std	Z+6, r18	; 0x06
    127e:	14 c0       	rjmp	.+40     	; 0x12a8 <fputc+0x6e>
    1280:	8b 01       	movw	r16, r22
    1282:	ec 01       	movw	r28, r24
    1284:	fb 01       	movw	r30, r22
    1286:	00 84       	ldd	r0, Z+8	; 0x08
    1288:	f1 85       	ldd	r31, Z+9	; 0x09
    128a:	e0 2d       	mov	r30, r0
    128c:	09 95       	icall
    128e:	89 2b       	or	r24, r25
    1290:	e1 f6       	brne	.-72     	; 0x124a <fputc+0x10>
    1292:	d8 01       	movw	r26, r16
    1294:	16 96       	adiw	r26, 0x06	; 6
    1296:	8d 91       	ld	r24, X+
    1298:	9c 91       	ld	r25, X
    129a:	17 97       	sbiw	r26, 0x07	; 7
    129c:	01 96       	adiw	r24, 0x01	; 1
    129e:	17 96       	adiw	r26, 0x07	; 7
    12a0:	9c 93       	st	X, r25
    12a2:	8e 93       	st	-X, r24
    12a4:	16 97       	sbiw	r26, 0x06	; 6
    12a6:	ce 01       	movw	r24, r28
    12a8:	df 91       	pop	r29
    12aa:	cf 91       	pop	r28
    12ac:	1f 91       	pop	r17
    12ae:	0f 91       	pop	r16
    12b0:	08 95       	ret

000012b2 <__ultoa_invert>:
    12b2:	fa 01       	movw	r30, r20
    12b4:	aa 27       	eor	r26, r26
    12b6:	28 30       	cpi	r18, 0x08	; 8
    12b8:	51 f1       	breq	.+84     	; 0x130e <__ultoa_invert+0x5c>
    12ba:	20 31       	cpi	r18, 0x10	; 16
    12bc:	81 f1       	breq	.+96     	; 0x131e <__ultoa_invert+0x6c>
    12be:	e8 94       	clt
    12c0:	6f 93       	push	r22
    12c2:	6e 7f       	andi	r22, 0xFE	; 254
    12c4:	6e 5f       	subi	r22, 0xFE	; 254
    12c6:	7f 4f       	sbci	r23, 0xFF	; 255
    12c8:	8f 4f       	sbci	r24, 0xFF	; 255
    12ca:	9f 4f       	sbci	r25, 0xFF	; 255
    12cc:	af 4f       	sbci	r26, 0xFF	; 255
    12ce:	b1 e0       	ldi	r27, 0x01	; 1
    12d0:	3e d0       	rcall	.+124    	; 0x134e <__ultoa_invert+0x9c>
    12d2:	b4 e0       	ldi	r27, 0x04	; 4
    12d4:	3c d0       	rcall	.+120    	; 0x134e <__ultoa_invert+0x9c>
    12d6:	67 0f       	add	r22, r23
    12d8:	78 1f       	adc	r23, r24
    12da:	89 1f       	adc	r24, r25
    12dc:	9a 1f       	adc	r25, r26
    12de:	a1 1d       	adc	r26, r1
    12e0:	68 0f       	add	r22, r24
    12e2:	79 1f       	adc	r23, r25
    12e4:	8a 1f       	adc	r24, r26
    12e6:	91 1d       	adc	r25, r1
    12e8:	a1 1d       	adc	r26, r1
    12ea:	6a 0f       	add	r22, r26
    12ec:	71 1d       	adc	r23, r1
    12ee:	81 1d       	adc	r24, r1
    12f0:	91 1d       	adc	r25, r1
    12f2:	a1 1d       	adc	r26, r1
    12f4:	20 d0       	rcall	.+64     	; 0x1336 <__ultoa_invert+0x84>
    12f6:	09 f4       	brne	.+2      	; 0x12fa <__ultoa_invert+0x48>
    12f8:	68 94       	set
    12fa:	3f 91       	pop	r19
    12fc:	2a e0       	ldi	r18, 0x0A	; 10
    12fe:	26 9f       	mul	r18, r22
    1300:	11 24       	eor	r1, r1
    1302:	30 19       	sub	r19, r0
    1304:	30 5d       	subi	r19, 0xD0	; 208
    1306:	31 93       	st	Z+, r19
    1308:	de f6       	brtc	.-74     	; 0x12c0 <__ultoa_invert+0xe>
    130a:	cf 01       	movw	r24, r30
    130c:	08 95       	ret
    130e:	46 2f       	mov	r20, r22
    1310:	47 70       	andi	r20, 0x07	; 7
    1312:	40 5d       	subi	r20, 0xD0	; 208
    1314:	41 93       	st	Z+, r20
    1316:	b3 e0       	ldi	r27, 0x03	; 3
    1318:	0f d0       	rcall	.+30     	; 0x1338 <__ultoa_invert+0x86>
    131a:	c9 f7       	brne	.-14     	; 0x130e <__ultoa_invert+0x5c>
    131c:	f6 cf       	rjmp	.-20     	; 0x130a <__ultoa_invert+0x58>
    131e:	46 2f       	mov	r20, r22
    1320:	4f 70       	andi	r20, 0x0F	; 15
    1322:	40 5d       	subi	r20, 0xD0	; 208
    1324:	4a 33       	cpi	r20, 0x3A	; 58
    1326:	18 f0       	brcs	.+6      	; 0x132e <__ultoa_invert+0x7c>
    1328:	49 5d       	subi	r20, 0xD9	; 217
    132a:	31 fd       	sbrc	r19, 1
    132c:	40 52       	subi	r20, 0x20	; 32
    132e:	41 93       	st	Z+, r20
    1330:	02 d0       	rcall	.+4      	; 0x1336 <__ultoa_invert+0x84>
    1332:	a9 f7       	brne	.-22     	; 0x131e <__ultoa_invert+0x6c>
    1334:	ea cf       	rjmp	.-44     	; 0x130a <__ultoa_invert+0x58>
    1336:	b4 e0       	ldi	r27, 0x04	; 4
    1338:	a6 95       	lsr	r26
    133a:	97 95       	ror	r25
    133c:	87 95       	ror	r24
    133e:	77 95       	ror	r23
    1340:	67 95       	ror	r22
    1342:	ba 95       	dec	r27
    1344:	c9 f7       	brne	.-14     	; 0x1338 <__ultoa_invert+0x86>
    1346:	00 97       	sbiw	r24, 0x00	; 0
    1348:	61 05       	cpc	r22, r1
    134a:	71 05       	cpc	r23, r1
    134c:	08 95       	ret
    134e:	9b 01       	movw	r18, r22
    1350:	ac 01       	movw	r20, r24
    1352:	0a 2e       	mov	r0, r26
    1354:	06 94       	lsr	r0
    1356:	57 95       	ror	r21
    1358:	47 95       	ror	r20
    135a:	37 95       	ror	r19
    135c:	27 95       	ror	r18
    135e:	ba 95       	dec	r27
    1360:	c9 f7       	brne	.-14     	; 0x1354 <__ultoa_invert+0xa2>
    1362:	62 0f       	add	r22, r18
    1364:	73 1f       	adc	r23, r19
    1366:	84 1f       	adc	r24, r20
    1368:	95 1f       	adc	r25, r21
    136a:	a0 1d       	adc	r26, r0
    136c:	08 95       	ret

0000136e <__prologue_saves__>:
    136e:	2f 92       	push	r2
    1370:	3f 92       	push	r3
    1372:	4f 92       	push	r4
    1374:	5f 92       	push	r5
    1376:	6f 92       	push	r6
    1378:	7f 92       	push	r7
    137a:	8f 92       	push	r8
    137c:	9f 92       	push	r9
    137e:	af 92       	push	r10
    1380:	bf 92       	push	r11
    1382:	cf 92       	push	r12
    1384:	df 92       	push	r13
    1386:	ef 92       	push	r14
    1388:	ff 92       	push	r15
    138a:	0f 93       	push	r16
    138c:	1f 93       	push	r17
    138e:	cf 93       	push	r28
    1390:	df 93       	push	r29
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62
    1396:	ca 1b       	sub	r28, r26
    1398:	db 0b       	sbc	r29, r27
    139a:	0f b6       	in	r0, 0x3f	; 63
    139c:	f8 94       	cli
    139e:	de bf       	out	0x3e, r29	; 62
    13a0:	0f be       	out	0x3f, r0	; 63
    13a2:	cd bf       	out	0x3d, r28	; 61
    13a4:	09 94       	ijmp

000013a6 <__epilogue_restores__>:
    13a6:	2a 88       	ldd	r2, Y+18	; 0x12
    13a8:	39 88       	ldd	r3, Y+17	; 0x11
    13aa:	48 88       	ldd	r4, Y+16	; 0x10
    13ac:	5f 84       	ldd	r5, Y+15	; 0x0f
    13ae:	6e 84       	ldd	r6, Y+14	; 0x0e
    13b0:	7d 84       	ldd	r7, Y+13	; 0x0d
    13b2:	8c 84       	ldd	r8, Y+12	; 0x0c
    13b4:	9b 84       	ldd	r9, Y+11	; 0x0b
    13b6:	aa 84       	ldd	r10, Y+10	; 0x0a
    13b8:	b9 84       	ldd	r11, Y+9	; 0x09
    13ba:	c8 84       	ldd	r12, Y+8	; 0x08
    13bc:	df 80       	ldd	r13, Y+7	; 0x07
    13be:	ee 80       	ldd	r14, Y+6	; 0x06
    13c0:	fd 80       	ldd	r15, Y+5	; 0x05
    13c2:	0c 81       	ldd	r16, Y+4	; 0x04
    13c4:	1b 81       	ldd	r17, Y+3	; 0x03
    13c6:	aa 81       	ldd	r26, Y+2	; 0x02
    13c8:	b9 81       	ldd	r27, Y+1	; 0x01
    13ca:	ce 0f       	add	r28, r30
    13cc:	d1 1d       	adc	r29, r1
    13ce:	0f b6       	in	r0, 0x3f	; 63
    13d0:	f8 94       	cli
    13d2:	de bf       	out	0x3e, r29	; 62
    13d4:	0f be       	out	0x3f, r0	; 63
    13d6:	cd bf       	out	0x3d, r28	; 61
    13d8:	ed 01       	movw	r28, r26
    13da:	08 95       	ret

000013dc <_exit>:
    13dc:	f8 94       	cli

000013de <__stop_program>:
    13de:	ff cf       	rjmp	.-2      	; 0x13de <__stop_program>
