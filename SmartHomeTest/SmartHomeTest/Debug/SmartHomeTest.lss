
SmartHomeTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000320  00800100  000016ce  00001762  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000204  00800420  00800420  00001a82  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001a82  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ae0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00001b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001aa3  00000000  00000000  00001c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cef  00000000  00000000  0000370b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d26  00000000  00000000  000043fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000284  00000000  00000000  00005120  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000631  00000000  00000000  000053a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000081a  00000000  00000000  000059d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  000061ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 87 03 	jmp	0x70e	; 0x70e <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	14 e0       	ldi	r17, 0x04	; 4
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee ec       	ldi	r30, 0xCE	; 206
      7c:	f6 e1       	ldi	r31, 0x16	; 22
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 32       	cpi	r26, 0x20	; 32
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	26 e0       	ldi	r18, 0x06	; 6
      8c:	a0 e2       	ldi	r26, 0x20	; 32
      8e:	b4 e0       	ldi	r27, 0x04	; 4
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a4 32       	cpi	r26, 0x24	; 36
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 cb 01 	call	0x396	; 0x396 <main>
      9e:	0c 94 65 0b 	jmp	0x16ca	; 0x16ca <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_init>:
#include "ADC.h"


void ADC_init(void)
{
	ADMUX |= (1 << REFS0); //Voltage Reference Selection : AVCC with external capacitor at AREF pin
      a6:	ec e7       	ldi	r30, 0x7C	; 124
      a8:	f0 e0       	ldi	r31, 0x00	; 0
      aa:	80 81       	ld	r24, Z
      ac:	80 64       	ori	r24, 0x40	; 64
      ae:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); //ADC enable, prescaler 128분주
      b0:	ea e7       	ldi	r30, 0x7A	; 122
      b2:	f0 e0       	ldi	r31, 0x00	; 0
      b4:	80 81       	ld	r24, Z
      b6:	87 68       	ori	r24, 0x87	; 135
      b8:	80 83       	st	Z, r24
      ba:	08 95       	ret

000000bc <ADC_converting_value>:

int ADC_converting_value(char channel)
{
	int value = 0;
	
	ADMUX &= 0b11110000; //Analog Channel Selection Bits 초기화
      bc:	ec e7       	ldi	r30, 0x7C	; 124
      be:	f0 e0       	ldi	r31, 0x00	; 0
      c0:	90 81       	ld	r25, Z
      c2:	90 7f       	andi	r25, 0xF0	; 240
      c4:	90 83       	st	Z, r25
	ADMUX |= channel; //채널 설정
      c6:	90 81       	ld	r25, Z
      c8:	89 2b       	or	r24, r25
      ca:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      cc:	8f e1       	ldi	r24, 0x1F	; 31
      ce:	93 e0       	ldi	r25, 0x03	; 3
      d0:	01 97       	sbiw	r24, 0x01	; 1
      d2:	f1 f7       	brne	.-4      	; 0xd0 <ADC_converting_value+0x14>
      d4:	00 c0       	rjmp	.+0      	; 0xd6 <ADC_converting_value+0x1a>
      d6:	00 00       	nop
	_delay_us(200); //제대로 동작하는데 약간의 시간 필요
	
	ADCSRA |= (1 << ADSC); //Start Conversion //When the conversion is complete, it returns to zero
      d8:	ea e7       	ldi	r30, 0x7A	; 122
      da:	f0 e0       	ldi	r31, 0x00	; 0
      dc:	80 81       	ld	r24, Z
      de:	80 64       	ori	r24, 0x40	; 64
      e0:	80 83       	st	Z, r24
	while(!(ADCSRA  & (1 << ADIF))); //ADIF : conversing 이 완료되면 set //ADIF가 0인동안 기다려주기
      e2:	80 81       	ld	r24, Z
      e4:	84 ff       	sbrs	r24, 4
      e6:	fd cf       	rjmp	.-6      	; 0xe2 <ADC_converting_value+0x26>
	
	value = ADCL + ADCH * 256;
      e8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
      ec:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	value = (value + 1) * 500.0 / 1024 + 3; //+3 : 오차 보정 //5 * 100 / 1024 : 0 ~ 5V 사이의 값 , 소숫점을 위해서 *100
      f0:	70 e0       	ldi	r23, 0x00	; 0
      f2:	76 2f       	mov	r23, r22
      f4:	66 27       	eor	r22, r22
      f6:	68 0f       	add	r22, r24
      f8:	71 1d       	adc	r23, r1
      fa:	6f 5f       	subi	r22, 0xFF	; 255
      fc:	7f 4f       	sbci	r23, 0xFF	; 255
      fe:	07 2e       	mov	r0, r23
     100:	00 0c       	add	r0, r0
     102:	88 0b       	sbc	r24, r24
     104:	99 0b       	sbc	r25, r25
     106:	0e 94 a4 05 	call	0xb48	; 0xb48 <__floatsisf>
     10a:	20 e0       	ldi	r18, 0x00	; 0
     10c:	30 e0       	ldi	r19, 0x00	; 0
     10e:	4a ef       	ldi	r20, 0xFA	; 250
     110:	53 e4       	ldi	r21, 0x43	; 67
     112:	0e 94 30 06 	call	0xc60	; 0xc60 <__mulsf3>
     116:	20 e0       	ldi	r18, 0x00	; 0
     118:	30 e0       	ldi	r19, 0x00	; 0
     11a:	40 e8       	ldi	r20, 0x80	; 128
     11c:	5a e3       	ldi	r21, 0x3A	; 58
     11e:	0e 94 30 06 	call	0xc60	; 0xc60 <__mulsf3>
     122:	20 e0       	ldi	r18, 0x00	; 0
     124:	30 e0       	ldi	r19, 0x00	; 0
     126:	40 e4       	ldi	r20, 0x40	; 64
     128:	50 e4       	ldi	r21, 0x40	; 64
     12a:	0e 94 8e 04 	call	0x91c	; 0x91c <__addsf3>
	
	return value;
     12e:	0e 94 6c 05 	call	0xad8	; 0xad8 <__fixsfsi>
}
     132:	cb 01       	movw	r24, r22
     134:	08 95       	ret

00000136 <Volt_to_cm>:
int Volt_to_cm(int value)  //SHARP 2Y0A21 적외선 거리센서
{
	int cm = 0;
	cm = 20.0 / ((value / 100.0) - 0.3); //데이터 시트 보고 대충 계산한 값 //제품마다 다르기때문에 완전 정확하지않음
	
	return cm; 
     136:	bc 01       	movw	r22, r24
     138:	99 0f       	add	r25, r25
     13a:	88 0b       	sbc	r24, r24
     13c:	99 0b       	sbc	r25, r25
     13e:	0e 94 a4 05 	call	0xb48	; 0xb48 <__floatsisf>
     142:	20 e0       	ldi	r18, 0x00	; 0
     144:	30 e0       	ldi	r19, 0x00	; 0
     146:	48 ec       	ldi	r20, 0xC8	; 200
     148:	52 e4       	ldi	r21, 0x42	; 66
     14a:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__divsf3>
     14e:	2a e9       	ldi	r18, 0x9A	; 154
     150:	39 e9       	ldi	r19, 0x99	; 153
     152:	49 e9       	ldi	r20, 0x99	; 153
     154:	5e e3       	ldi	r21, 0x3E	; 62
     156:	0e 94 8d 04 	call	0x91a	; 0x91a <__subsf3>
     15a:	9b 01       	movw	r18, r22
     15c:	ac 01       	movw	r20, r24
     15e:	60 e0       	ldi	r22, 0x00	; 0
     160:	70 e0       	ldi	r23, 0x00	; 0
     162:	80 ea       	ldi	r24, 0xA0	; 160
     164:	91 e4       	ldi	r25, 0x41	; 65
     166:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__divsf3>
     16a:	0e 94 6c 05 	call	0xad8	; 0xad8 <__fixsfsi>
}
     16e:	cb 01       	movw	r24, r22
     170:	08 95       	ret

00000172 <check_Sharp>:

void check_Sharp(void){
	int cm = 0;
	
	cm = Volt_to_cm(ADC_converting_value(2));
     172:	82 e0       	ldi	r24, 0x02	; 2
     174:	0e 94 5e 00 	call	0xbc	; 0xbc <ADC_converting_value>
     178:	0e 94 9b 00 	call	0x136	; 0x136 <Volt_to_cm>
	// printf("%d\n", cm);
	if(cm <= 9) printf("bathroom : on\n");
     17c:	0a 97       	sbiw	r24, 0x0a	; 10
     17e:	2c f4       	brge	.+10     	; 0x18a <check_Sharp+0x18>
     180:	89 e0       	ldi	r24, 0x09	; 9
     182:	91 e0       	ldi	r25, 0x01	; 1
     184:	0e 94 29 07 	call	0xe52	; 0xe52 <puts>
     188:	08 95       	ret
	else printf("bathroom : off\n");
     18a:	87 e1       	ldi	r24, 0x17	; 23
     18c:	91 e0       	ldi	r25, 0x01	; 1
     18e:	0e 94 29 07 	call	0xe52	; 0xe52 <puts>
     192:	08 95       	ret

00000194 <Bluetooth_init>:

#include "Bluetooth.h"
#include "Uart.h"

void Bluetooth_init(void) {
	UART0_init(9600);
     194:	60 e8       	ldi	r22, 0x80	; 128
     196:	75 e2       	ldi	r23, 0x25	; 37
     198:	80 e0       	ldi	r24, 0x00	; 0
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	0e 94 54 04 	call	0x8a8	; 0x8a8 <UART0_init>
     1a0:	08 95       	ret

000001a2 <DHT11_init>:

extern volatile char doorAutoFlag;

void DHT11_init(void)
{
   DHT11_DDR |= 1 << DHT11_PORT_num;
     1a2:	24 9a       	sbi	0x04, 4	; 4
   DHT11_PORT |= 1 << DHT11_PORT_num;
     1a4:	2c 9a       	sbi	0x05, 4	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1a6:	2f ef       	ldi	r18, 0xFF	; 255
     1a8:	8b e7       	ldi	r24, 0x7B	; 123
     1aa:	92 e9       	ldi	r25, 0x92	; 146
     1ac:	21 50       	subi	r18, 0x01	; 1
     1ae:	80 40       	sbci	r24, 0x00	; 0
     1b0:	90 40       	sbci	r25, 0x00	; 0
     1b2:	e1 f7       	brne	.-8      	; 0x1ac <DHT11_init+0xa>
     1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <DHT11_init+0x14>
     1b6:	00 00       	nop
     1b8:	08 95       	ret

000001ba <rx_byte>:
   
   return;
}

char rx_byte(void)
{
     1ba:	48 e0       	ldi	r20, 0x08	; 8
     1bc:	50 e0       	ldi	r21, 0x00	; 0
   char data = 0;
     1be:	80 e0       	ldi	r24, 0x00	; 0
     1c0:	0a c0       	rjmp	.+20     	; 0x1d6 <rx_byte+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1c2:	95 e0       	ldi	r25, 0x05	; 5
     1c4:	9a 95       	dec	r25
     1c6:	f1 f7       	brne	.-4      	; 0x1c4 <rx_byte+0xa>
     1c8:	00 00       	nop
   {
	   //
      while(!(DHT11_PIN & (1 << DHT11_PORT_num))) // low인동안 기다리기 // 50us
	  {
		  _delay_us(1);
		  count++;
     1ca:	2f 5f       	subi	r18, 0xFF	; 255
     1cc:	3f 4f       	sbci	r19, 0xFF	; 255
		  if(count >= 200) break;
     1ce:	28 3c       	cpi	r18, 0xC8	; 200
     1d0:	31 05       	cpc	r19, r1
     1d2:	19 f4       	brne	.+6      	; 0x1da <rx_byte+0x20>
     1d4:	26 c0       	rjmp	.+76     	; 0x222 <rx_byte+0x68>
   return;
}

char rx_byte(void)
{
   char data = 0;
     1d6:	20 e0       	ldi	r18, 0x00	; 0
     1d8:	30 e0       	ldi	r19, 0x00	; 0
   int count = 0;
   for(int i = 0; i < 8; i++)
   {
	   //
      while(!(DHT11_PIN & (1 << DHT11_PORT_num))) // low인동안 기다리기 // 50us
     1da:	1c 9b       	sbis	0x03, 4	; 3
     1dc:	f2 cf       	rjmp	.-28     	; 0x1c2 <rx_byte+0x8>
	  {
		  _delay_us(1);
		  count++;
		  if(count >= 200) break;
	  }
	  if(count >= 200) break;
     1de:	28 3c       	cpi	r18, 0xC8	; 200
     1e0:	31 05       	cpc	r19, r1
     1e2:	ec f4       	brge	.+58     	; 0x21e <rx_byte+0x64>
     1e4:	90 ea       	ldi	r25, 0xA0	; 160
     1e6:	9a 95       	dec	r25
     1e8:	f1 f7       	brne	.-4      	; 0x1e6 <rx_byte+0x2c>
	  count = 0;
     
	  _delay_us(30); // high 26-28 us : data "0"  // 데이터 값이 1이면 30us 지나도 여전히 high 이기때문에
     
	  data = data << 1;      // RH_integral <<= 1;
     1ea:	88 0f       	add	r24, r24
      if(DHT11_PIN & (1 << DHT11_PORT_num))//들어온게 1일때만 끝자리에 넣어준다
     1ec:	1c 9b       	sbis	0x03, 4	; 3
     1ee:	0c c0       	rjmp	.+24     	; 0x208 <rx_byte+0x4e>
      {
         data |= 0b00000001;
     1f0:	81 60       	ori	r24, 0x01	; 1
     1f2:	0a c0       	rjmp	.+20     	; 0x208 <rx_byte+0x4e>
     1f4:	95 e0       	ldi	r25, 0x05	; 5
     1f6:	9a 95       	dec	r25
     1f8:	f1 f7       	brne	.-4      	; 0x1f6 <rx_byte+0x3c>
     1fa:	00 00       	nop
      }
	  
      while(DHT11_PIN & (1 << DHT11_PORT_num)) //data 값이 1인 경우(high) 시간 보내주기
	  {
		  _delay_us(1);
		  count++;
     1fc:	2f 5f       	subi	r18, 0xFF	; 255
     1fe:	3f 4f       	sbci	r19, 0xFF	; 255
		  if(count >= 200) break;
     200:	28 3c       	cpi	r18, 0xC8	; 200
     202:	31 05       	cpc	r19, r1
     204:	19 f4       	brne	.+6      	; 0x20c <rx_byte+0x52>
     206:	0d c0       	rjmp	.+26     	; 0x222 <rx_byte+0x68>
   return;
}

char rx_byte(void)
{
   char data = 0;
     208:	20 e0       	ldi	r18, 0x00	; 0
     20a:	30 e0       	ldi	r19, 0x00	; 0
      if(DHT11_PIN & (1 << DHT11_PORT_num))//들어온게 1일때만 끝자리에 넣어준다
      {
         data |= 0b00000001;
      }
	  
      while(DHT11_PIN & (1 << DHT11_PORT_num)) //data 값이 1인 경우(high) 시간 보내주기
     20c:	1c 99       	sbic	0x03, 4	; 3
     20e:	f2 cf       	rjmp	.-28     	; 0x1f4 <rx_byte+0x3a>
	  {
		  _delay_us(1);
		  count++;
		  if(count >= 200) break;
	  }
	  if(count >= 200) break;
     210:	28 3c       	cpi	r18, 0xC8	; 200
     212:	31 05       	cpc	r19, r1
     214:	24 f4       	brge	.+8      	; 0x21e <rx_byte+0x64>
     216:	41 50       	subi	r20, 0x01	; 1
     218:	51 09       	sbc	r21, r1

char rx_byte(void)
{
   char data = 0;
   int count = 0;
   for(int i = 0; i < 8; i++)
     21a:	e9 f6       	brne	.-70     	; 0x1d6 <rx_byte+0x1c>
     21c:	08 95       	ret
	  }
	  if(count >= 200) break;
	  count = 0;
   }
  
   if(count >= 200) return 255;
     21e:	8f ef       	ldi	r24, 0xFF	; 255
     220:	08 95       	ret
     222:	8f ef       	ldi	r24, 0xFF	; 255
   else return data;
}
     224:	08 95       	ret

00000226 <data_output>:

void data_output(void)//data 핀 아웃풋 설정
{
   //대기 상태로 만들어주기
   DHT11_DDR |= (1 << DHT11_PORT_num);   //출력 전환
     226:	24 9a       	sbi	0x04, 4	; 4
   DHT11_PORT |= 1 << DHT11_PORT_num;
     228:	2c 9a       	sbi	0x05, 4	; 5
     22a:	08 95       	ret

0000022c <data_input>:
}

void data_input(void)
{
   //DHT11_PORT &= ~(1 << DHT11_PORT4); //내부 PULL UP 없이
   DHT11_DDR &= ~(1 << DHT11_PORT_num);  //입력 전환
     22c:	24 98       	cbi	0x04, 4	; 4
     22e:	08 95       	ret

00000230 <dumi_read>:

void dumi_read(void) //비트 읽고 흘려보내기
{
	
	
	while(DHT11_PIN & (1 << DHT11_PORT_num));  //4번 핀의 값이 1인 동안 기다리기
     230:	1c 99       	sbic	0x03, 4	; 3
     232:	fe cf       	rjmp	.-4      	; 0x230 <dumi_read>
	while(!(DHT11_PIN & (1 << DHT11_PORT_num))); // 0인 동안, low인동안 80 마이크로 s 기다리는거
     234:	1c 9b       	sbis	0x03, 4	; 3
     236:	fe cf       	rjmp	.-4      	; 0x234 <dumi_read+0x4>
	while(DHT11_PIN & (1 << DHT11_PORT_num)); //1인 동안, high 인동안 80 마이크로s 기다리기
     238:	1c 99       	sbic	0x03, 4	; 3
     23a:	fe cf       	rjmp	.-4      	; 0x238 <dumi_read+0x8>
	
	// => 버리는 신호들 , 대기/ 5.2 MCU Sends out Start Signal to DHT
	
	return;
}
     23c:	08 95       	ret

0000023e <DHT11_trigger>:

void DHT11_trigger(void)
{
   DHT11_PORT &= ~(1 << DHT11_PORT_num); //Trigger신호 , low
     23e:	2c 98       	cbi	0x05, 4	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     240:	2f ef       	ldi	r18, 0xFF	; 255
     242:	80 ee       	ldi	r24, 0xE0	; 224
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	21 50       	subi	r18, 0x01	; 1
     248:	80 40       	sbci	r24, 0x00	; 0
     24a:	90 40       	sbci	r25, 0x00	; 0
     24c:	e1 f7       	brne	.-8      	; 0x246 <DHT11_trigger+0x8>
     24e:	00 c0       	rjmp	.+0      	; 0x250 <DHT11_trigger+0x12>
     250:	00 00       	nop
   
   _delay_ms(18);
   
   DHT11_PORT |= 1 << DHT11_PORT_num; //high
     252:	2c 9a       	sbi	0x05, 4	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     254:	2a e1       	ldi	r18, 0x1A	; 26
     256:	2a 95       	dec	r18
     258:	f1 f7       	brne	.-4      	; 0x256 <DHT11_trigger+0x18>
     25a:	00 c0       	rjmp	.+0      	; 0x25c <DHT11_trigger+0x1e>
     25c:	08 95       	ret

0000025e <check_DHT11>:
   
   
   return;
}

void check_DHT11(void) {
     25e:	ef 92       	push	r14
     260:	ff 92       	push	r15
     262:	0f 93       	push	r16
     264:	1f 93       	push	r17
     266:	cf 93       	push	r28
     268:	df 93       	push	r29
	char RH_integral, RH_decimal, Tmpr_integral, Tmpr_decimal;
	
	int lux = ADC_converting_value(1);
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	0e 94 5e 00 	call	0xbc	; 0xbc <ADC_converting_value>
     272:	ec 01       	movw	r28, r24
	
	if(doorAutoFlag) {
     274:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <doorAutoFlag>
     278:	88 23       	and	r24, r24
     27a:	61 f0       	breq	.+24     	; 0x294 <check_DHT11+0x36>
		if(lux <= 200) printf("lux : off\n");
     27c:	c9 3c       	cpi	r28, 0xC9	; 201
     27e:	d1 05       	cpc	r29, r1
     280:	2c f4       	brge	.+10     	; 0x28c <check_DHT11+0x2e>
     282:	86 e2       	ldi	r24, 0x26	; 38
     284:	91 e0       	ldi	r25, 0x01	; 1
     286:	0e 94 29 07 	call	0xe52	; 0xe52 <puts>
     28a:	04 c0       	rjmp	.+8      	; 0x294 <check_DHT11+0x36>
		else printf("lux : on\n");
     28c:	80 e3       	ldi	r24, 0x30	; 48
     28e:	91 e0       	ldi	r25, 0x01	; 1
     290:	0e 94 29 07 	call	0xe52	; 0xe52 <puts>
	}
	
	
	DHT11_trigger(); //트리거
     294:	0e 94 1f 01 	call	0x23e	; 0x23e <DHT11_trigger>
	data_input(); //입력 전환
     298:	0e 94 16 01 	call	0x22c	; 0x22c <data_input>
	dumi_read(); // 데이터 전송 전에 시간 흘려보내기
     29c:	0e 94 18 01 	call	0x230	; 0x230 <dumi_read>
	
	
	RH_integral = rx_byte(); //데이터 값 저장
     2a0:	0e 94 dd 00 	call	0x1ba	; 0x1ba <rx_byte>
     2a4:	18 2f       	mov	r17, r24
	RH_decimal  = rx_byte();
     2a6:	0e 94 dd 00 	call	0x1ba	; 0x1ba <rx_byte>
     2aa:	08 2f       	mov	r16, r24
	Tmpr_integral = rx_byte();
     2ac:	0e 94 dd 00 	call	0x1ba	; 0x1ba <rx_byte>
     2b0:	f8 2e       	mov	r15, r24
	Tmpr_decimal = rx_byte();
     2b2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <rx_byte>
     2b6:	e8 2e       	mov	r14, r24
	
	rx_byte(); //check_sum
     2b8:	0e 94 dd 00 	call	0x1ba	; 0x1ba <rx_byte>
	
	data_output(); // data pin 출력 전환
     2bc:	0e 94 13 01 	call	0x226	; 0x226 <data_output>

	printf("env : humi %d.%d temper %d.%d lux %d\n", RH_integral, RH_decimal, Tmpr_integral, Tmpr_decimal, lux);
     2c0:	df 93       	push	r29
     2c2:	cf 93       	push	r28
     2c4:	1f 92       	push	r1
     2c6:	ef 92       	push	r14
     2c8:	1f 92       	push	r1
     2ca:	ff 92       	push	r15
     2cc:	1f 92       	push	r1
     2ce:	0f 93       	push	r16
     2d0:	1f 92       	push	r1
     2d2:	1f 93       	push	r17
     2d4:	89 e3       	ldi	r24, 0x39	; 57
     2d6:	91 e0       	ldi	r25, 0x01	; 1
     2d8:	9f 93       	push	r25
     2da:	8f 93       	push	r24
     2dc:	0e 94 13 07 	call	0xe26	; 0xe26 <printf>
	
	
	
	return;
     2e0:	8d b7       	in	r24, 0x3d	; 61
     2e2:	9e b7       	in	r25, 0x3e	; 62
     2e4:	0c 96       	adiw	r24, 0x0c	; 12
     2e6:	0f b6       	in	r0, 0x3f	; 63
     2e8:	f8 94       	cli
     2ea:	9e bf       	out	0x3e, r25	; 62
     2ec:	0f be       	out	0x3f, r0	; 63
     2ee:	8d bf       	out	0x3d, r24	; 61
	
	
}
     2f0:	df 91       	pop	r29
     2f2:	cf 91       	pop	r28
     2f4:	1f 91       	pop	r17
     2f6:	0f 91       	pop	r16
     2f8:	ff 90       	pop	r15
     2fa:	ef 90       	pop	r14
     2fc:	08 95       	ret

000002fe <WholeLED_On>:
	}
}

void WholeLED_On(char mode){
	
	switch(mode){
     2fe:	82 30       	cpi	r24, 0x02	; 2
     300:	69 f0       	breq	.+26     	; 0x31c <WholeLED_On+0x1e>
     302:	18 f4       	brcc	.+6      	; 0x30a <WholeLED_On+0xc>
     304:	81 30       	cpi	r24, 0x01	; 1
     306:	31 f0       	breq	.+12     	; 0x314 <WholeLED_On+0x16>
     308:	08 95       	ret
     30a:	83 30       	cpi	r24, 0x03	; 3
     30c:	59 f0       	breq	.+22     	; 0x324 <WholeLED_On+0x26>
     30e:	84 30       	cpi	r24, 0x04	; 4
     310:	69 f0       	breq	.+26     	; 0x32c <WholeLED_On+0x2e>
     312:	08 95       	ret
		case LED_WHOLE:
			PORTD |= 1 << LED_ROOM | 1 << LED_LIVING | 1 << LED_KITCHEN | 1 << LED_BATH | 1 << LED_DOOR;
     314:	8b b1       	in	r24, 0x0b	; 11
     316:	84 6f       	ori	r24, 0xF4	; 244
     318:	8b b9       	out	0x0b, r24	; 11
			break;
     31a:	08 95       	ret
		case LED_WHOLE_AUTO:
			PORTD |= 1 << LED_ROOM | 1 << LED_LIVING | 1 << LED_KITCHEN;
     31c:	8b b1       	in	r24, 0x0b	; 11
     31e:	84 63       	ori	r24, 0x34	; 52
     320:	8b b9       	out	0x0b, r24	; 11
			break;
     322:	08 95       	ret
		case LED_WHOLE_AUTO_BATH:
			PORTD |= 1 << LED_ROOM | 1 << LED_LIVING | 1 << LED_KITCHEN | 1 << LED_DOOR;
     324:	8b b1       	in	r24, 0x0b	; 11
     326:	84 6b       	ori	r24, 0xB4	; 180
     328:	8b b9       	out	0x0b, r24	; 11
			break;
     32a:	08 95       	ret
		case LED_WHOLE_AUTO_DOOR:
			PORTD |= 1 << LED_ROOM | 1 << LED_LIVING | 1 << LED_KITCHEN | 1 << LED_BATH;
     32c:	8b b1       	in	r24, 0x0b	; 11
     32e:	84 67       	ori	r24, 0x74	; 116
     330:	8b b9       	out	0x0b, r24	; 11
     332:	08 95       	ret

00000334 <WholeLED_Off>:
	return;
}

void WholeLED_Off(char mode){
	
	switch(mode){
     334:	82 30       	cpi	r24, 0x02	; 2
     336:	69 f0       	breq	.+26     	; 0x352 <WholeLED_Off+0x1e>
     338:	18 f4       	brcc	.+6      	; 0x340 <WholeLED_Off+0xc>
     33a:	81 30       	cpi	r24, 0x01	; 1
     33c:	31 f0       	breq	.+12     	; 0x34a <WholeLED_Off+0x16>
     33e:	08 95       	ret
     340:	83 30       	cpi	r24, 0x03	; 3
     342:	59 f0       	breq	.+22     	; 0x35a <WholeLED_Off+0x26>
     344:	84 30       	cpi	r24, 0x04	; 4
     346:	69 f0       	breq	.+26     	; 0x362 <WholeLED_Off+0x2e>
     348:	08 95       	ret
		case LED_WHOLE:
			PORTD &= ~(1 << LED_ROOM | 1 << LED_LIVING | 1 << LED_KITCHEN | 1 << LED_BATH | 1 << LED_DOOR);
     34a:	8b b1       	in	r24, 0x0b	; 11
     34c:	8b 70       	andi	r24, 0x0B	; 11
     34e:	8b b9       	out	0x0b, r24	; 11
			break;
     350:	08 95       	ret
		case LED_WHOLE_AUTO:
			PORTD &= ~(1 << LED_ROOM | 1 << LED_LIVING | 1 << LED_KITCHEN);
     352:	8b b1       	in	r24, 0x0b	; 11
     354:	8b 7c       	andi	r24, 0xCB	; 203
     356:	8b b9       	out	0x0b, r24	; 11
			break;
     358:	08 95       	ret
		case LED_WHOLE_AUTO_BATH:
			PORTD &= ~(1 << LED_ROOM | 1 << LED_LIVING | 1 << LED_KITCHEN | 1 << LED_DOOR);
     35a:	8b b1       	in	r24, 0x0b	; 11
     35c:	8b 74       	andi	r24, 0x4B	; 75
     35e:	8b b9       	out	0x0b, r24	; 11
			break;
     360:	08 95       	ret
		case LED_WHOLE_AUTO_DOOR:
			PORTD &= ~(1 << LED_ROOM | 1 << LED_LIVING | 1 << LED_KITCHEN | 1 << LED_BATH);
     362:	8b b1       	in	r24, 0x0b	; 11
     364:	8b 78       	andi	r24, 0x8B	; 139
     366:	8b b9       	out	0x0b, r24	; 11
     368:	08 95       	ret

0000036a <SmartHome_Init>:
	}
	return;
}

void SmartHome_Init(void){
	DDRD |= (1 << PORTD2) | (1 << PORTD4) | (1 << PORTD5) | (1 << PORTD6) | (1 << PORTD7);
     36a:	8a b1       	in	r24, 0x0a	; 10
     36c:	84 6f       	ori	r24, 0xF4	; 244
     36e:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~((1 << PORTD2) | (1 << PORTD4) | (1 << PORTD5) | (1 << PORTD6) | (1 << PORTD7));
     370:	8b b1       	in	r24, 0x0b	; 11
     372:	8b 70       	andi	r24, 0x0B	; 11
     374:	8b b9       	out	0x0b, r24	; 11
	DDRB |= 1 << PORTB5;
     376:	25 9a       	sbi	0x04, 5	; 4
	PORTB &= ~(1<< PORTB5);
     378:	2d 98       	cbi	0x05, 5	; 5
	Bluetooth_init();
     37a:	0e 94 ca 00 	call	0x194	; 0x194 <Bluetooth_init>
		
	Timer0_init();
     37e:	0e 94 b2 03 	call	0x764	; 0x764 <Timer0_init>
	Timer1_init_fast_PWM_outA(); // OCR1A : DOOR, OCR1B : WINDOW
     382:	0e 94 c0 03 	call	0x780	; 0x780 <Timer1_init_fast_PWM_outA>
	Timer2_init_fast_PWM_outA_Motor(); // OCR2B : FAN
     386:	0e 94 de 03 	call	0x7bc	; 0x7bc <Timer2_init_fast_PWM_outA_Motor>
		
	DHT11_init(); // 온,습도 측정
     38a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <DHT11_init>
	ADC_init(); // 적외선 센서, 조도 센서
     38e:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_init>
		

		
	sei();
     392:	78 94       	sei
     394:	08 95       	ret

00000396 <main>:

int main(void)
{
	char cmd_idx = 0;
	
	SmartHome_Init();
     396:	0e 94 b5 01 	call	0x36a	; 0x36a <SmartHome_Init>
volatile char doorAutoFlag = 1, bathroomAutoFlag = 1, doorOpenFalg = 0;
int lux;

int main(void)
{
	char cmd_idx = 0;
     39a:	d1 2c       	mov	r13, r1
		
		if(RX_cmd_count) {
			RX_cmd_count--;
			
			// 조명 관리
			if(!strcmp(buffer[cmd_idx], "led room on")) { //strcmp() : 비교해서 같으면 return 0
     39c:	0f 2e       	mov	r0, r31
     39e:	f2 e3       	ldi	r31, 0x32	; 50
     3a0:	bf 2e       	mov	r11, r31
     3a2:	f0 2d       	mov	r31, r0
			else if(!strcmp(buffer[cmd_idx], "bathroomLedAutoStatefalse")){
				bathroomAutoFlag = 0;
			}
			
			cmd_idx++;
			cmd_idx = cmd_idx % COMMAND_MAX;
     3a4:	0f 2e       	mov	r0, r31
     3a6:	fd ec       	ldi	r31, 0xCD	; 205
     3a8:	cf 2e       	mov	r12, r31
     3aa:	f0 2d       	mov	r31, r0
			}
			else if(!strcmp(buffer[cmd_idx], "doorLedAutoStatefalse")){
				doorAutoFlag = 0;
			}
			else if(!strcmp(buffer[cmd_idx], "bathroomLedAutoStatetrue")){
				bathroomAutoFlag = 1;
     3ac:	aa 24       	eor	r10, r10
     3ae:	a3 94       	inc	r10
			else if(!strcmp(buffer[cmd_idx], "window open")){
				OCR1B = 1300;
			}
			
			else if(!strcmp(buffer[cmd_idx], "window close")){
				OCR1B = 4900;
     3b0:	0f 2e       	mov	r0, r31
     3b2:	fa e8       	ldi	r31, 0x8A	; 138
     3b4:	8f 2e       	mov	r8, r31
     3b6:	91 2c       	mov	r9, r1
     3b8:	f0 2d       	mov	r31, r0
     3ba:	0f 2e       	mov	r0, r31
     3bc:	f4 e2       	ldi	r31, 0x24	; 36
     3be:	ef 2e       	mov	r14, r31
     3c0:	f3 e1       	ldi	r31, 0x13	; 19
     3c2:	ff 2e       	mov	r15, r31
     3c4:	f0 2d       	mov	r31, r0
			}
			else if(!strcmp(buffer[cmd_idx], "door close")){
				OCR1A = 4900;
			}
			else if(!strcmp(buffer[cmd_idx], "window open")){
				OCR1B = 1300;
     3c6:	0f 2e       	mov	r0, r31
     3c8:	f4 e1       	ldi	r31, 0x14	; 20
     3ca:	2f 2e       	mov	r2, r31
     3cc:	f5 e0       	ldi	r31, 0x05	; 5
     3ce:	3f 2e       	mov	r3, r31
     3d0:	f0 2d       	mov	r31, r0
			}
			else if(!strcmp(buffer[cmd_idx], "door open")){
				OCR1A = 2900;
			}
			else if(!strcmp(buffer[cmd_idx], "door close")){
				OCR1A = 4900;
     3d2:	0f 2e       	mov	r0, r31
     3d4:	f8 e8       	ldi	r31, 0x88	; 136
     3d6:	4f 2e       	mov	r4, r31
     3d8:	51 2c       	mov	r5, r1
     3da:	f0 2d       	mov	r31, r0
			}
			else if(!strcmp(buffer[cmd_idx], "fan off")) {
				OCR2B = 0;
			}
			else if(!strcmp(buffer[cmd_idx], "door open")){
				OCR1A = 2900;
     3dc:	0f 2e       	mov	r0, r31
     3de:	f4 e5       	ldi	r31, 0x54	; 84
     3e0:	6f 2e       	mov	r6, r31
     3e2:	fb e0       	ldi	r31, 0x0B	; 11
     3e4:	7f 2e       	mov	r7, r31
     3e6:	f0 2d       	mov	r31, r0
			// 환경 관리 
			else if(!strcmp(buffer[cmd_idx], "fan on")) {
				OCR2B = 200;
			}
			else if(!strcmp(buffer[cmd_idx], "fan off")) {
				OCR2B = 0;
     3e8:	04 eb       	ldi	r16, 0xB4	; 180
     3ea:	10 e0       	ldi	r17, 0x00	; 0
	SmartHome_Init();
	
	while (1) 
    {
		
		if(RX_cmd_count) {
     3ec:	80 91 19 06 	lds	r24, 0x0619	; 0x800619 <RX_cmd_count>
     3f0:	88 23       	and	r24, r24
     3f2:	09 f4       	brne	.+2      	; 0x3f6 <main+0x60>
     3f4:	7b c1       	rjmp	.+758    	; 0x6ec <__LOCK_REGION_LENGTH__+0x2ec>
			RX_cmd_count--;
     3f6:	80 91 19 06 	lds	r24, 0x0619	; 0x800619 <RX_cmd_count>
     3fa:	81 50       	subi	r24, 0x01	; 1
     3fc:	80 93 19 06 	sts	0x0619, r24	; 0x800619 <RX_cmd_count>
			
			// 조명 관리
			if(!strcmp(buffer[cmd_idx], "led room on")) { //strcmp() : 비교해서 같으면 return 0
     400:	bd 9c       	mul	r11, r13
     402:	e0 01       	movw	r28, r0
     404:	11 24       	eor	r1, r1
     406:	cb 5d       	subi	r28, 0xDB	; 219
     408:	db 4f       	sbci	r29, 0xFB	; 251
     40a:	6f e5       	ldi	r22, 0x5F	; 95
     40c:	71 e0       	ldi	r23, 0x01	; 1
     40e:	ce 01       	movw	r24, r28
     410:	0e 94 bf 06 	call	0xd7e	; 0xd7e <strcmp>
     414:	89 2b       	or	r24, r25
     416:	31 f4       	brne	.+12     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
				PORTD |= 1 << LED_ROOM;
     418:	5a 9a       	sbi	0x0b, 2	; 11
				printf("led : room on\n");
     41a:	8b e6       	ldi	r24, 0x6B	; 107
     41c:	91 e0       	ldi	r25, 0x01	; 1
     41e:	0e 94 29 07 	call	0xe52	; 0xe52 <puts>
     422:	55 c1       	rjmp	.+682    	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
			}
			else if(!strcmp(buffer[cmd_idx], "led room off")) {
     424:	69 e7       	ldi	r22, 0x79	; 121
     426:	71 e0       	ldi	r23, 0x01	; 1
     428:	ce 01       	movw	r24, r28
     42a:	0e 94 bf 06 	call	0xd7e	; 0xd7e <strcmp>
     42e:	89 2b       	or	r24, r25
     430:	31 f4       	brne	.+12     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
				PORTD &= ~(1 << LED_ROOM);
     432:	5a 98       	cbi	0x0b, 2	; 11
				printf("led : room off\n");
     434:	86 e8       	ldi	r24, 0x86	; 134
     436:	91 e0       	ldi	r25, 0x01	; 1
     438:	0e 94 29 07 	call	0xe52	; 0xe52 <puts>
     43c:	48 c1       	rjmp	.+656    	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
			}
			else if(!strcmp(buffer[cmd_idx], "led living on")) {
     43e:	65 e9       	ldi	r22, 0x95	; 149
     440:	71 e0       	ldi	r23, 0x01	; 1
     442:	ce 01       	movw	r24, r28
     444:	0e 94 bf 06 	call	0xd7e	; 0xd7e <strcmp>
     448:	89 2b       	or	r24, r25
     44a:	31 f4       	brne	.+12     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
				PORTD |= 1 << LED_LIVING;
     44c:	5c 9a       	sbi	0x0b, 4	; 11
				printf("led : living on\n");
     44e:	83 ea       	ldi	r24, 0xA3	; 163
     450:	91 e0       	ldi	r25, 0x01	; 1
     452:	0e 94 29 07 	call	0xe52	; 0xe52 <puts>
     456:	3b c1       	rjmp	.+630    	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
			}
			else if(!strcmp(buffer[cmd_idx], "led living off")) {
     458:	63 eb       	ldi	r22, 0xB3	; 179
     45a:	71 e0       	ldi	r23, 0x01	; 1
     45c:	ce 01       	movw	r24, r28
     45e:	0e 94 bf 06 	call	0xd7e	; 0xd7e <strcmp>
     462:	89 2b       	or	r24, r25
     464:	31 f4       	brne	.+12     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
				PORTD &= ~(1 << LED_LIVING);
     466:	5c 98       	cbi	0x0b, 4	; 11
				printf("led : living off\n");
     468:	82 ec       	ldi	r24, 0xC2	; 194
     46a:	91 e0       	ldi	r25, 0x01	; 1
     46c:	0e 94 29 07 	call	0xe52	; 0xe52 <puts>
     470:	2e c1       	rjmp	.+604    	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
			}
			else if(!strcmp(buffer[cmd_idx], "led kitchen on")) {
     472:	63 ed       	ldi	r22, 0xD3	; 211
     474:	71 e0       	ldi	r23, 0x01	; 1
     476:	ce 01       	movw	r24, r28
     478:	0e 94 bf 06 	call	0xd7e	; 0xd7e <strcmp>
     47c:	89 2b       	or	r24, r25
     47e:	31 f4       	brne	.+12     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
				PORTD |= 1 << LED_KITCHEN;
     480:	5d 9a       	sbi	0x0b, 5	; 11
				printf("led : kitchen on\n");
     482:	82 ee       	ldi	r24, 0xE2	; 226
     484:	91 e0       	ldi	r25, 0x01	; 1
     486:	0e 94 29 07 	call	0xe52	; 0xe52 <puts>
     48a:	21 c1       	rjmp	.+578    	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
			}
			else if(!strcmp(buffer[cmd_idx], "led kitchen off")) {
     48c:	63 ef       	ldi	r22, 0xF3	; 243
     48e:	71 e0       	ldi	r23, 0x01	; 1
     490:	ce 01       	movw	r24, r28
     492:	0e 94 bf 06 	call	0xd7e	; 0xd7e <strcmp>
     496:	89 2b       	or	r24, r25
     498:	31 f4       	brne	.+12     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
				PORTD &= ~(1 << LED_KITCHEN);
     49a:	5d 98       	cbi	0x0b, 5	; 11
				printf("led : kitchen off\n");
     49c:	83 e0       	ldi	r24, 0x03	; 3
     49e:	92 e0       	ldi	r25, 0x02	; 2
     4a0:	0e 94 29 07 	call	0xe52	; 0xe52 <puts>
     4a4:	14 c1       	rjmp	.+552    	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
			}
			else if(!strcmp(buffer[cmd_idx], "led bathroom on")) {
     4a6:	65 e1       	ldi	r22, 0x15	; 21
     4a8:	72 e0       	ldi	r23, 0x02	; 2
     4aa:	ce 01       	movw	r24, r28
     4ac:	0e 94 bf 06 	call	0xd7e	; 0xd7e <strcmp>
     4b0:	89 2b       	or	r24, r25
     4b2:	31 f4       	brne	.+12     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
				PORTD |= 1 << LED_BATH;
     4b4:	5e 9a       	sbi	0x0b, 6	; 11
				printf("led : bathroom on\n");
     4b6:	85 e2       	ldi	r24, 0x25	; 37
     4b8:	92 e0       	ldi	r25, 0x02	; 2
     4ba:	0e 94 29 07 	call	0xe52	; 0xe52 <puts>
     4be:	07 c1       	rjmp	.+526    	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
			}
			else if(!strcmp(buffer[cmd_idx], "led bathroom off")) {
     4c0:	67 e3       	ldi	r22, 0x37	; 55
     4c2:	72 e0       	ldi	r23, 0x02	; 2
     4c4:	ce 01       	movw	r24, r28
     4c6:	0e 94 bf 06 	call	0xd7e	; 0xd7e <strcmp>
     4ca:	89 2b       	or	r24, r25
     4cc:	31 f4       	brne	.+12     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
				PORTD &= ~(1 << LED_BATH);
     4ce:	5e 98       	cbi	0x0b, 6	; 11
				printf("led : bathroom off\n");
     4d0:	88 e4       	ldi	r24, 0x48	; 72
     4d2:	92 e0       	ldi	r25, 0x02	; 2
     4d4:	0e 94 29 07 	call	0xe52	; 0xe52 <puts>
     4d8:	fa c0       	rjmp	.+500    	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
			}
			else if(!strcmp(buffer[cmd_idx], "led door on")) {
     4da:	6b e5       	ldi	r22, 0x5B	; 91
     4dc:	72 e0       	ldi	r23, 0x02	; 2
     4de:	ce 01       	movw	r24, r28
     4e0:	0e 94 bf 06 	call	0xd7e	; 0xd7e <strcmp>
     4e4:	89 2b       	or	r24, r25
     4e6:	31 f4       	brne	.+12     	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
				PORTD |= 1 << LED_DOOR;
     4e8:	5f 9a       	sbi	0x0b, 7	; 11
				printf("led : door on\n");
     4ea:	87 e6       	ldi	r24, 0x67	; 103
     4ec:	92 e0       	ldi	r25, 0x02	; 2
     4ee:	0e 94 29 07 	call	0xe52	; 0xe52 <puts>
     4f2:	ed c0       	rjmp	.+474    	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
			}
			else if(!strcmp(buffer[cmd_idx], "led door off")) {
     4f4:	65 e7       	ldi	r22, 0x75	; 117
     4f6:	72 e0       	ldi	r23, 0x02	; 2
     4f8:	ce 01       	movw	r24, r28
     4fa:	0e 94 bf 06 	call	0xd7e	; 0xd7e <strcmp>
     4fe:	89 2b       	or	r24, r25
     500:	31 f4       	brne	.+12     	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
				PORTD &= ~(1 << LED_DOOR);
     502:	5f 98       	cbi	0x0b, 7	; 11
				printf("led : door off\n");
     504:	82 e8       	ldi	r24, 0x82	; 130
     506:	92 e0       	ldi	r25, 0x02	; 2
     508:	0e 94 29 07 	call	0xe52	; 0xe52 <puts>
     50c:	e0 c0       	rjmp	.+448    	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
			}
			else if(!strcmp(buffer[cmd_idx], "led whole on")) {
     50e:	61 e9       	ldi	r22, 0x91	; 145
     510:	72 e0       	ldi	r23, 0x02	; 2
     512:	ce 01       	movw	r24, r28
     514:	0e 94 bf 06 	call	0xd7e	; 0xd7e <strcmp>
     518:	89 2b       	or	r24, r25
     51a:	41 f4       	brne	.+16     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
				WholeLED_On(LED_WHOLE);
     51c:	8a 2d       	mov	r24, r10
     51e:	0e 94 7f 01 	call	0x2fe	; 0x2fe <WholeLED_On>
				printf("led : whole on\n");
     522:	8e e9       	ldi	r24, 0x9E	; 158
     524:	92 e0       	ldi	r25, 0x02	; 2
     526:	0e 94 29 07 	call	0xe52	; 0xe52 <puts>
     52a:	d1 c0       	rjmp	.+418    	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
			}
			else if(!strcmp(buffer[cmd_idx], "led whole off")) {
     52c:	6d ea       	ldi	r22, 0xAD	; 173
     52e:	72 e0       	ldi	r23, 0x02	; 2
     530:	ce 01       	movw	r24, r28
     532:	0e 94 bf 06 	call	0xd7e	; 0xd7e <strcmp>
     536:	89 2b       	or	r24, r25
     538:	41 f4       	brne	.+16     	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
				WholeLED_Off(LED_WHOLE);
     53a:	8a 2d       	mov	r24, r10
     53c:	0e 94 9a 01 	call	0x334	; 0x334 <WholeLED_Off>
				printf("led : whole off\n");
     540:	8b eb       	ldi	r24, 0xBB	; 187
     542:	92 e0       	ldi	r25, 0x02	; 2
     544:	0e 94 29 07 	call	0xe52	; 0xe52 <puts>
     548:	c2 c0       	rjmp	.+388    	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
			}
			else if(!strcmp(buffer[cmd_idx], "led whole on auto")) {
     54a:	6b ec       	ldi	r22, 0xCB	; 203
     54c:	72 e0       	ldi	r23, 0x02	; 2
     54e:	ce 01       	movw	r24, r28
     550:	0e 94 bf 06 	call	0xd7e	; 0xd7e <strcmp>
     554:	89 2b       	or	r24, r25
     556:	41 f4       	brne	.+16     	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
				WholeLED_On(LED_WHOLE_AUTO);
     558:	82 e0       	ldi	r24, 0x02	; 2
     55a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <WholeLED_On>
				printf("led : whole on\n");
     55e:	8e e9       	ldi	r24, 0x9E	; 158
     560:	92 e0       	ldi	r25, 0x02	; 2
     562:	0e 94 29 07 	call	0xe52	; 0xe52 <puts>
     566:	b3 c0       	rjmp	.+358    	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
			}
			else if(!strcmp(buffer[cmd_idx], "led whole off auto")) {
     568:	6d ed       	ldi	r22, 0xDD	; 221
     56a:	72 e0       	ldi	r23, 0x02	; 2
     56c:	ce 01       	movw	r24, r28
     56e:	0e 94 bf 06 	call	0xd7e	; 0xd7e <strcmp>
     572:	89 2b       	or	r24, r25
     574:	41 f4       	brne	.+16     	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
				WholeLED_Off(LED_WHOLE_AUTO);
     576:	82 e0       	ldi	r24, 0x02	; 2
     578:	0e 94 9a 01 	call	0x334	; 0x334 <WholeLED_Off>
				printf("led : whole off\n");
     57c:	8b eb       	ldi	r24, 0xBB	; 187
     57e:	92 e0       	ldi	r25, 0x02	; 2
     580:	0e 94 29 07 	call	0xe52	; 0xe52 <puts>
     584:	a4 c0       	rjmp	.+328    	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
			}
			else if(!strcmp(buffer[cmd_idx], "led whole on bathroom")) {
     586:	60 ef       	ldi	r22, 0xF0	; 240
     588:	72 e0       	ldi	r23, 0x02	; 2
     58a:	ce 01       	movw	r24, r28
     58c:	0e 94 bf 06 	call	0xd7e	; 0xd7e <strcmp>
     590:	89 2b       	or	r24, r25
     592:	41 f4       	brne	.+16     	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
				WholeLED_On(LED_WHOLE_AUTO_BATH);
     594:	83 e0       	ldi	r24, 0x03	; 3
     596:	0e 94 7f 01 	call	0x2fe	; 0x2fe <WholeLED_On>
				printf("led : wholeb on\n");
     59a:	86 e0       	ldi	r24, 0x06	; 6
     59c:	93 e0       	ldi	r25, 0x03	; 3
     59e:	0e 94 29 07 	call	0xe52	; 0xe52 <puts>
     5a2:	95 c0       	rjmp	.+298    	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
			}
			else if(!strcmp(buffer[cmd_idx], "led whole off bathroom")) {
     5a4:	66 e1       	ldi	r22, 0x16	; 22
     5a6:	73 e0       	ldi	r23, 0x03	; 3
     5a8:	ce 01       	movw	r24, r28
     5aa:	0e 94 bf 06 	call	0xd7e	; 0xd7e <strcmp>
     5ae:	89 2b       	or	r24, r25
     5b0:	41 f4       	brne	.+16     	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
				WholeLED_Off(LED_WHOLE_AUTO_BATH);
     5b2:	83 e0       	ldi	r24, 0x03	; 3
     5b4:	0e 94 9a 01 	call	0x334	; 0x334 <WholeLED_Off>
				printf("led : wholeb off\n");
     5b8:	8d e2       	ldi	r24, 0x2D	; 45
     5ba:	93 e0       	ldi	r25, 0x03	; 3
     5bc:	0e 94 29 07 	call	0xe52	; 0xe52 <puts>
     5c0:	86 c0       	rjmp	.+268    	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
			}
			else if(!strcmp(buffer[cmd_idx], "led whole on door")) {
     5c2:	6e e3       	ldi	r22, 0x3E	; 62
     5c4:	73 e0       	ldi	r23, 0x03	; 3
     5c6:	ce 01       	movw	r24, r28
     5c8:	0e 94 bf 06 	call	0xd7e	; 0xd7e <strcmp>
     5cc:	89 2b       	or	r24, r25
     5ce:	41 f4       	brne	.+16     	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
				WholeLED_On(LED_WHOLE_AUTO_DOOR);
     5d0:	84 e0       	ldi	r24, 0x04	; 4
     5d2:	0e 94 7f 01 	call	0x2fe	; 0x2fe <WholeLED_On>
				printf("led : wholed on\n");
     5d6:	80 e5       	ldi	r24, 0x50	; 80
     5d8:	93 e0       	ldi	r25, 0x03	; 3
     5da:	0e 94 29 07 	call	0xe52	; 0xe52 <puts>
     5de:	77 c0       	rjmp	.+238    	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
			}
			else if(!strcmp(buffer[cmd_idx], "led whole off door")) {
     5e0:	60 e6       	ldi	r22, 0x60	; 96
     5e2:	73 e0       	ldi	r23, 0x03	; 3
     5e4:	ce 01       	movw	r24, r28
     5e6:	0e 94 bf 06 	call	0xd7e	; 0xd7e <strcmp>
     5ea:	89 2b       	or	r24, r25
     5ec:	41 f4       	brne	.+16     	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
				WholeLED_Off(LED_WHOLE_AUTO_DOOR);
     5ee:	84 e0       	ldi	r24, 0x04	; 4
     5f0:	0e 94 9a 01 	call	0x334	; 0x334 <WholeLED_Off>
				printf("led : wholed off\n");
     5f4:	83 e7       	ldi	r24, 0x73	; 115
     5f6:	93 e0       	ldi	r25, 0x03	; 3
     5f8:	0e 94 29 07 	call	0xe52	; 0xe52 <puts>
     5fc:	68 c0       	rjmp	.+208    	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
			}
			
			// 환경 관리 
			else if(!strcmp(buffer[cmd_idx], "fan on")) {
     5fe:	64 e8       	ldi	r22, 0x84	; 132
     600:	73 e0       	ldi	r23, 0x03	; 3
     602:	ce 01       	movw	r24, r28
     604:	0e 94 bf 06 	call	0xd7e	; 0xd7e <strcmp>
     608:	89 2b       	or	r24, r25
     60a:	21 f4       	brne	.+8      	; 0x614 <__LOCK_REGION_LENGTH__+0x214>
				OCR2B = 200;
     60c:	88 ec       	ldi	r24, 0xC8	; 200
     60e:	f8 01       	movw	r30, r16
     610:	80 83       	st	Z, r24
     612:	5d c0       	rjmp	.+186    	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
			}
			else if(!strcmp(buffer[cmd_idx], "fan off")) {
     614:	6b e8       	ldi	r22, 0x8B	; 139
     616:	73 e0       	ldi	r23, 0x03	; 3
     618:	ce 01       	movw	r24, r28
     61a:	0e 94 bf 06 	call	0xd7e	; 0xd7e <strcmp>
     61e:	89 2b       	or	r24, r25
     620:	19 f4       	brne	.+6      	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
				OCR2B = 0;
     622:	f8 01       	movw	r30, r16
     624:	10 82       	st	Z, r1
     626:	53 c0       	rjmp	.+166    	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
			}
			else if(!strcmp(buffer[cmd_idx], "door open")){
     628:	63 e9       	ldi	r22, 0x93	; 147
     62a:	73 e0       	ldi	r23, 0x03	; 3
     62c:	ce 01       	movw	r24, r28
     62e:	0e 94 bf 06 	call	0xd7e	; 0xd7e <strcmp>
     632:	89 2b       	or	r24, r25
     634:	21 f4       	brne	.+8      	; 0x63e <__LOCK_REGION_LENGTH__+0x23e>
				OCR1A = 2900;
     636:	f2 01       	movw	r30, r4
     638:	71 82       	std	Z+1, r7	; 0x01
     63a:	60 82       	st	Z, r6
     63c:	48 c0       	rjmp	.+144    	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
			}
			else if(!strcmp(buffer[cmd_idx], "door close")){
     63e:	6d e9       	ldi	r22, 0x9D	; 157
     640:	73 e0       	ldi	r23, 0x03	; 3
     642:	ce 01       	movw	r24, r28
     644:	0e 94 bf 06 	call	0xd7e	; 0xd7e <strcmp>
     648:	89 2b       	or	r24, r25
     64a:	21 f4       	brne	.+8      	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
				OCR1A = 4900;
     64c:	f2 01       	movw	r30, r4
     64e:	f1 82       	std	Z+1, r15	; 0x01
     650:	e0 82       	st	Z, r14
     652:	3d c0       	rjmp	.+122    	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
			}
			else if(!strcmp(buffer[cmd_idx], "window open")){
     654:	68 ea       	ldi	r22, 0xA8	; 168
     656:	73 e0       	ldi	r23, 0x03	; 3
     658:	ce 01       	movw	r24, r28
     65a:	0e 94 bf 06 	call	0xd7e	; 0xd7e <strcmp>
     65e:	89 2b       	or	r24, r25
     660:	21 f4       	brne	.+8      	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
				OCR1B = 1300;
     662:	f4 01       	movw	r30, r8
     664:	31 82       	std	Z+1, r3	; 0x01
     666:	20 82       	st	Z, r2
     668:	32 c0       	rjmp	.+100    	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
			}
			
			else if(!strcmp(buffer[cmd_idx], "window close")){
     66a:	64 eb       	ldi	r22, 0xB4	; 180
     66c:	73 e0       	ldi	r23, 0x03	; 3
     66e:	ce 01       	movw	r24, r28
     670:	0e 94 bf 06 	call	0xd7e	; 0xd7e <strcmp>
     674:	89 2b       	or	r24, r25
     676:	21 f4       	brne	.+8      	; 0x680 <__LOCK_REGION_LENGTH__+0x280>
				OCR1B = 4900;
     678:	f4 01       	movw	r30, r8
     67a:	f1 82       	std	Z+1, r15	; 0x01
     67c:	e0 82       	st	Z, r14
     67e:	27 c0       	rjmp	.+78     	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
				
			}
			
			// LED AUTO 상태 변경
			else if(!strcmp(buffer[cmd_idx], "doorLedAutoStatetrue")){
     680:	61 ec       	ldi	r22, 0xC1	; 193
     682:	73 e0       	ldi	r23, 0x03	; 3
     684:	ce 01       	movw	r24, r28
     686:	0e 94 bf 06 	call	0xd7e	; 0xd7e <strcmp>
     68a:	89 2b       	or	r24, r25
     68c:	19 f4       	brne	.+6      	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
				doorAutoFlag = 1;
     68e:	a0 92 07 01 	sts	0x0107, r10	; 0x800107 <doorAutoFlag>
     692:	1d c0       	rjmp	.+58     	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
			}
			else if(!strcmp(buffer[cmd_idx], "doorLedAutoStatefalse")){
     694:	66 ed       	ldi	r22, 0xD6	; 214
     696:	73 e0       	ldi	r23, 0x03	; 3
     698:	ce 01       	movw	r24, r28
     69a:	0e 94 bf 06 	call	0xd7e	; 0xd7e <strcmp>
     69e:	89 2b       	or	r24, r25
     6a0:	19 f4       	brne	.+6      	; 0x6a8 <__LOCK_REGION_LENGTH__+0x2a8>
				doorAutoFlag = 0;
     6a2:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <doorAutoFlag>
     6a6:	13 c0       	rjmp	.+38     	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
			}
			else if(!strcmp(buffer[cmd_idx], "bathroomLedAutoStatetrue")){
     6a8:	6c ee       	ldi	r22, 0xEC	; 236
     6aa:	73 e0       	ldi	r23, 0x03	; 3
     6ac:	ce 01       	movw	r24, r28
     6ae:	0e 94 bf 06 	call	0xd7e	; 0xd7e <strcmp>
     6b2:	89 2b       	or	r24, r25
     6b4:	19 f4       	brne	.+6      	; 0x6bc <__LOCK_REGION_LENGTH__+0x2bc>
				bathroomAutoFlag = 1;
     6b6:	a0 92 06 01 	sts	0x0106, r10	; 0x800106 <bathroomAutoFlag>
     6ba:	09 c0       	rjmp	.+18     	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
			}
			else if(!strcmp(buffer[cmd_idx], "bathroomLedAutoStatefalse")){
     6bc:	65 e0       	ldi	r22, 0x05	; 5
     6be:	74 e0       	ldi	r23, 0x04	; 4
     6c0:	ce 01       	movw	r24, r28
     6c2:	0e 94 bf 06 	call	0xd7e	; 0xd7e <strcmp>
     6c6:	89 2b       	or	r24, r25
     6c8:	11 f4       	brne	.+4      	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
				bathroomAutoFlag = 0;
     6ca:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <bathroomAutoFlag>
			}
			
			cmd_idx++;
     6ce:	91 e0       	ldi	r25, 0x01	; 1
     6d0:	9d 0d       	add	r25, r13
			cmd_idx = cmd_idx % COMMAND_MAX;
     6d2:	9c 9d       	mul	r25, r12
     6d4:	d1 2c       	mov	r13, r1
     6d6:	11 24       	eor	r1, r1
     6d8:	d6 94       	lsr	r13
     6da:	d6 94       	lsr	r13
     6dc:	d6 94       	lsr	r13
     6de:	dd 0c       	add	r13, r13
     6e0:	8d 2d       	mov	r24, r13
     6e2:	88 0f       	add	r24, r24
     6e4:	88 0f       	add	r24, r24
     6e6:	d8 0e       	add	r13, r24
     6e8:	9d 19       	sub	r25, r13
     6ea:	d9 2e       	mov	r13, r25
		}
		
	
		if(check_DHT11_flag) {
     6ec:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <check_DHT11_flag>
     6f0:	88 23       	and	r24, r24
     6f2:	09 f4       	brne	.+2      	; 0x6f6 <__LOCK_REGION_LENGTH__+0x2f6>
     6f4:	7b ce       	rjmp	.-778    	; 0x3ec <main+0x56>
			check_DHT11_flag = 0;
     6f6:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <check_DHT11_flag>
			check_DHT11();
     6fa:	0e 94 2f 01 	call	0x25e	; 0x25e <check_DHT11>
			if(bathroomAutoFlag){check_Sharp();}
     6fe:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <bathroomAutoFlag>
     702:	88 23       	and	r24, r24
     704:	09 f4       	brne	.+2      	; 0x708 <__LOCK_REGION_LENGTH__+0x308>
     706:	72 ce       	rjmp	.-796    	; 0x3ec <main+0x56>
     708:	0e 94 b9 00 	call	0x172	; 0x172 <check_Sharp>
     70c:	6f ce       	rjmp	.-802    	; 0x3ec <main+0x56>

0000070e <__vector_14>:
	

//isr은 가급적 빨리 실행해야 되기 때문에 딜레이 x, 함수호출x ...

ISR(TIMER0_COMPA_vect)						//interrupt 걸리면 실행하는 내용 //Interrupt Service Routine
{	
     70e:	1f 92       	push	r1
     710:	0f 92       	push	r0
     712:	0f b6       	in	r0, 0x3f	; 63
     714:	0f 92       	push	r0
     716:	11 24       	eor	r1, r1
     718:	2f 93       	push	r18
     71a:	8f 93       	push	r24
     71c:	9f 93       	push	r25

	check_DHT11_msec++;
     71e:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <__data_end>
     722:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <__data_end+0x1>
     726:	01 96       	adiw	r24, 0x01	; 1
     728:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <__data_end+0x1>
     72c:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <__data_end>
	
	if(check_DHT11_msec >= 1200) {
     730:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <__data_end>
     734:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <__data_end+0x1>
     738:	80 3b       	cpi	r24, 0xB0	; 176
     73a:	94 40       	sbci	r25, 0x04	; 4
     73c:	5c f0       	brlt	.+22     	; 0x754 <__vector_14+0x46>
		
		check_DHT11_msec = 0;
     73e:	10 92 21 04 	sts	0x0421, r1	; 0x800421 <__data_end+0x1>
     742:	10 92 20 04 	sts	0x0420, r1	; 0x800420 <__data_end>
		check_DHT11_flag = 1;
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <check_DHT11_flag>
		PORTB ^= (1<< PORTB5);
     74c:	95 b1       	in	r25, 0x05	; 5
     74e:	80 e2       	ldi	r24, 0x20	; 32
     750:	89 27       	eor	r24, r25
     752:	85 b9       	out	0x05, r24	; 5
	}
	 
} 
     754:	9f 91       	pop	r25
     756:	8f 91       	pop	r24
     758:	2f 91       	pop	r18
     75a:	0f 90       	pop	r0
     75c:	0f be       	out	0x3f, r0	; 63
     75e:	0f 90       	pop	r0
     760:	1f 90       	pop	r1
     762:	18 95       	reti

00000764 <Timer0_init>:

void Timer0_init(void)
{
	//타이머 초기화
	TCCR0A |= 1 << WGM01;					//0b00000010;  //CTC Mode
     764:	84 b5       	in	r24, 0x24	; 36
     766:	82 60       	ori	r24, 0x02	; 2
     768:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS00 | 1 << CS01);		//0b00000011;  //64분주 사용(하위 3bit : 011)
     76a:	85 b5       	in	r24, 0x25	; 37
     76c:	83 60       	ori	r24, 0x03	; 3
     76e:	85 bd       	out	0x25, r24	; 37
	OCR0A = 249;							//비교할 값 => (16,000,000 / 64) / 1000 = 250 (0 ~ "249")			//1ms 주기
     770:	89 ef       	ldi	r24, 0xF9	; 249
     772:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= 1 << OCIE0A;                  //0b00000010; //어떤 interrupt 걸리게 할건지 정하는	// OC0A 비교 매치 인터럽트 활성화
     774:	ee e6       	ldi	r30, 0x6E	; 110
     776:	f0 e0       	ldi	r31, 0x00	; 0
     778:	80 81       	ld	r24, Z
     77a:	82 60       	ori	r24, 0x02	; 2
     77c:	80 83       	st	Z, r24
     77e:	08 95       	ret

00000780 <Timer1_init_fast_PWM_outA>:
	return;
}


void Timer1_init_fast_PWM_outA(void){
	DDRB |= 1 << PORTB1 | 1 << PORTB2;
     780:	84 b1       	in	r24, 0x04	; 4
     782:	86 60       	ori	r24, 0x06	; 6
     784:	84 b9       	out	0x04, r24	; 4
	TCCR1A |= (1 << WGM11) | (1 << COM1A1) | (1 << COM1B1);
     786:	e0 e8       	ldi	r30, 0x80	; 128
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	80 81       	ld	r24, Z
     78c:	82 6a       	ori	r24, 0xA2	; 162
     78e:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM13) | (1 << WGM12)  | (1 << CS11);
     790:	e1 e8       	ldi	r30, 0x81	; 129
     792:	f0 e0       	ldi	r31, 0x00	; 0
     794:	80 81       	ld	r24, Z
     796:	8a 61       	ori	r24, 0x1A	; 26
     798:	80 83       	st	Z, r24
	
	OCR1A = 4900;
     79a:	84 e2       	ldi	r24, 0x24	; 36
     79c:	93 e1       	ldi	r25, 0x13	; 19
     79e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     7a2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = 4900;
     7a6:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     7aa:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	ICR1 = 39999; 
     7ae:	8f e3       	ldi	r24, 0x3F	; 63
     7b0:	9c e9       	ldi	r25, 0x9C	; 156
     7b2:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     7b6:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     7ba:	08 95       	ret

000007bc <Timer2_init_fast_PWM_outA_Motor>:
	
}

void Timer2_init_fast_PWM_outA_Motor(void){
	//DDRD |= 1 << DDD3; //DDD <- 레지스터의 비트 이름 //PORTDx랑 define 값이 같음
	DDRB |= 1 << DDD3;
     7bc:	23 9a       	sbi	0x04, 3	; 4
	DDRD |= 1 << DDD3;
     7be:	53 9a       	sbi	0x0a, 3	; 10
	
	TCCR2A |= (1 << COM2A1) | (1 << COM2B1) | (1 << WGM21) | (1 << WGM20);
     7c0:	e0 eb       	ldi	r30, 0xB0	; 176
     7c2:	f0 e0       	ldi	r31, 0x00	; 0
     7c4:	80 81       	ld	r24, Z
     7c6:	83 6a       	ori	r24, 0xA3	; 163
     7c8:	80 83       	st	Z, r24
	//TCCR2A |= (1 << COM2B1) | (1 << WGM21) | (1 << WGM20);
	//COM2B1 , COM2B0 : 11 이면 Set OC2B on Compare Match, clear OC2B at BOTTOM, (inverting mode).
	//->match가 되면 1로 되는것. ocr값을 작게 주면 high가 길다. 반대라서 헷갈리니까 10으로 준것
	TCCR2B |= (1 << CS20); //모터 구동 시에는 CS20
     7ca:	e1 eb       	ldi	r30, 0xB1	; 177
     7cc:	f0 e0       	ldi	r31, 0x00	; 0
     7ce:	80 81       	ld	r24, Z
     7d0:	81 60       	ori	r24, 0x01	; 1
     7d2:	80 83       	st	Z, r24
	
	OCR2A = 0; //BOTTOM
     7d4:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	OCR2B = 0;
     7d8:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
     7dc:	08 95       	ret

000007de <TX0_char>:
//한 문자 송신 TX
void TX0_char(char data) //ascii
{
	//상태 읽기 / UCSR0A
	//UDRE0 : USART 데이터 레지스터가 비어있으면 1로 set / initial value : 1 
	while(!(UCSR0A & (1 << UDRE0))); //0b00100000 //0이면 기다려서 1이 될때까지 (준비가 될 때까지)
     7de:	e0 ec       	ldi	r30, 0xC0	; 192
     7e0:	f0 e0       	ldi	r31, 0x00	; 0
     7e2:	90 81       	ld	r25, Z
     7e4:	95 ff       	sbrs	r25, 5
     7e6:	fd cf       	rjmp	.-6      	; 0x7e2 <TX0_char+0x4>
	
	UDR0 = data; //데이터 보낸 것
     7e8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     7ec:	08 95       	ret

000007ee <__vector_18>:
	CR : \R 커서 맨 앞으로
	LF : \N 줄 바꿈
	=> ENTER
	터미널 프로그램마다 설정 다름
*/
ISR(USART_RX_vect) { /* USART Rx Complete */
     7ee:	1f 92       	push	r1
     7f0:	0f 92       	push	r0
     7f2:	0f b6       	in	r0, 0x3f	; 63
     7f4:	0f 92       	push	r0
     7f6:	11 24       	eor	r1, r1
     7f8:	2f 93       	push	r18
     7fa:	8f 93       	push	r24
     7fc:	9f 93       	push	r25
     7fe:	ef 93       	push	r30
     800:	ff 93       	push	r31
	static char idx = 0, buf_idx = 0; //명령어 배열 index 제어 
	RX_data = UDR0;
     802:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     806:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <RX_data>
	
	if(idx < BUFFER_MAX && RX_cmd_count <= COMMAND_MAX) {
     80a:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <idx.2077>
     80e:	82 33       	cpi	r24, 0x32	; 50
     810:	08 f0       	brcs	.+2      	; 0x814 <__vector_18+0x26>
     812:	40 c0       	rjmp	.+128    	; 0x894 <__vector_18+0xa6>
     814:	90 91 19 06 	lds	r25, 0x0619	; 0x800619 <RX_cmd_count>
     818:	9b 30       	cpi	r25, 0x0B	; 11
     81a:	e0 f5       	brcc	.+120    	; 0x894 <__vector_18+0xa6>
		if(RX_data == '\r' || RX_data == '\n') { //명령이 들어옴
     81c:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <RX_data>
     820:	9d 30       	cpi	r25, 0x0D	; 13
     822:	21 f0       	breq	.+8      	; 0x82c <__vector_18+0x3e>
     824:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <RX_data>
     828:	9a 30       	cpi	r25, 0x0A	; 10
     82a:	19 f5       	brne	.+70     	; 0x872 <__vector_18+0x84>
			buffer[buf_idx][idx] = 0; //or '\0' //문자열의 마지막에 null 넣어주기
     82c:	90 91 22 04 	lds	r25, 0x0422	; 0x800422 <buf_idx.2078>
     830:	22 e3       	ldi	r18, 0x32	; 50
     832:	92 9f       	mul	r25, r18
     834:	f0 01       	movw	r30, r0
     836:	11 24       	eor	r1, r1
     838:	eb 5d       	subi	r30, 0xDB	; 219
     83a:	fb 4f       	sbci	r31, 0xFB	; 251
     83c:	e8 0f       	add	r30, r24
     83e:	f1 1d       	adc	r31, r1
     840:	10 82       	st	Z, r1
			idx = 0; //다음 명령어를 받기위한 clear
     842:	10 92 23 04 	sts	0x0423, r1	; 0x800423 <idx.2077>
			RX_cmd_count++;
     846:	80 91 19 06 	lds	r24, 0x0619	; 0x800619 <RX_cmd_count>
     84a:	8f 5f       	subi	r24, 0xFF	; 255
     84c:	80 93 19 06 	sts	0x0619, r24	; 0x800619 <RX_cmd_count>
			
			buf_idx++;
			buf_idx = buf_idx % COMMAND_MAX;
     850:	9f 5f       	subi	r25, 0xFF	; 255
     852:	8d ec       	ldi	r24, 0xCD	; 205
     854:	98 9f       	mul	r25, r24
     856:	81 2d       	mov	r24, r1
     858:	11 24       	eor	r1, r1
     85a:	86 95       	lsr	r24
     85c:	86 95       	lsr	r24
     85e:	86 95       	lsr	r24
     860:	88 0f       	add	r24, r24
     862:	28 2f       	mov	r18, r24
     864:	22 0f       	add	r18, r18
     866:	22 0f       	add	r18, r18
     868:	82 0f       	add	r24, r18
     86a:	98 1b       	sub	r25, r24
     86c:	90 93 22 04 	sts	0x0422, r25	; 0x800422 <buf_idx.2078>
     870:	11 c0       	rjmp	.+34     	; 0x894 <__vector_18+0xa6>
		}
		else buffer[buf_idx][idx++] = RX_data;
     872:	e0 91 22 04 	lds	r30, 0x0422	; 0x800422 <buf_idx.2078>
     876:	91 e0       	ldi	r25, 0x01	; 1
     878:	98 0f       	add	r25, r24
     87a:	90 93 23 04 	sts	0x0423, r25	; 0x800423 <idx.2077>
     87e:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <RX_data>
     882:	22 e3       	ldi	r18, 0x32	; 50
     884:	e2 9f       	mul	r30, r18
     886:	f0 01       	movw	r30, r0
     888:	11 24       	eor	r1, r1
     88a:	eb 5d       	subi	r30, 0xDB	; 219
     88c:	fb 4f       	sbci	r31, 0xFB	; 251
     88e:	e8 0f       	add	r30, r24
     890:	f1 1d       	adc	r31, r1
     892:	90 83       	st	Z, r25
	}
	
}
     894:	ff 91       	pop	r31
     896:	ef 91       	pop	r30
     898:	9f 91       	pop	r25
     89a:	8f 91       	pop	r24
     89c:	2f 91       	pop	r18
     89e:	0f 90       	pop	r0
     8a0:	0f be       	out	0x3f, r0	; 63
     8a2:	0f 90       	pop	r0
     8a4:	1f 90       	pop	r1
     8a6:	18 95       	reti

000008a8 <UART0_init>:

void UART0_init(unsigned long baud)
{
     8a8:	cf 92       	push	r12
     8aa:	df 92       	push	r13
     8ac:	ef 92       	push	r14
     8ae:	ff 92       	push	r15
     8b0:	6b 01       	movw	r12, r22
     8b2:	7c 01       	movw	r14, r24
	char i;
	FILE* fpStdio = fdevopen(TX0_char, NULL);
     8b4:	60 e0       	ldi	r22, 0x00	; 0
     8b6:	70 e0       	ldi	r23, 0x00	; 0
     8b8:	8f ee       	ldi	r24, 0xEF	; 239
     8ba:	93 e0       	ldi	r25, 0x03	; 3
     8bc:	0e 94 c8 06 	call	0xd90	; 0xd90 <fdevopen>
	
	UCSR0B |= ((1 << RXCIE0) | (1<< RXEN0) | (1<< TXEN0));	//송신, 수신 , 수신 인터럽트 활성화
     8c0:	e1 ec       	ldi	r30, 0xC1	; 193
     8c2:	f0 e0       	ldi	r31, 0x00	; 0
     8c4:	80 81       	ld	r24, Z
     8c6:	88 69       	ori	r24, 0x98	; 152
     8c8:	80 83       	st	Z, r24
	/*
		//0b10011000; //bit7 : Rx complete interrupt enable, bit 4 : receiver enable , bit 3 : transmitter enable
		//7~2 bit 제어 레지스터 , 0~1 bit 데이터 레지스터
		//UCSZ 0~2 : char size / 2 -> UCSR0B , 0,1 -> UCSR0C / ASCII 8bit /9bit 통신 UCSR0B의 0, 1bit 사용(알아서된당)
	*/
	UCSR0C |= ((1 << UCSZ01) | (1 << UCSZ00));				//8bit 통신
     8ca:	e2 ec       	ldi	r30, 0xC2	; 194
     8cc:	f0 e0       	ldi	r31, 0x00	; 0
     8ce:	80 81       	ld	r24, Z
     8d0:	86 60       	ori	r24, 0x06	; 6
     8d2:	80 83       	st	Z, r24
	/*
		//UCSR0C
		//7,6bit 0 0 -> Asynchronous 
	*/
	UBRR0H = ((F_CPU/16/baud)-1) >> 8; //상위 8bit
     8d4:	60 e4       	ldi	r22, 0x40	; 64
     8d6:	72 e4       	ldi	r23, 0x42	; 66
     8d8:	8f e0       	ldi	r24, 0x0F	; 15
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	a7 01       	movw	r20, r14
     8de:	96 01       	movw	r18, r12
     8e0:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__udivmodsi4>
     8e4:	da 01       	movw	r26, r20
     8e6:	c9 01       	movw	r24, r18
     8e8:	01 97       	sbiw	r24, 0x01	; 1
     8ea:	a1 09       	sbc	r26, r1
     8ec:	b1 09       	sbc	r27, r1
     8ee:	89 2f       	mov	r24, r25
     8f0:	9a 2f       	mov	r25, r26
     8f2:	ab 2f       	mov	r26, r27
     8f4:	bb 27       	eor	r27, r27
     8f6:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L =  ((F_CPU/16/baud)-1) & 0xFF; //하위 8bit//0x00FF//0b0000000011111111 //상위 8bit는 자리가 없어서 &안해줘도 안들어감
     8fa:	21 50       	subi	r18, 0x01	; 1
     8fc:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	/*
		// 9600은 우리가 설정해준 속도
		//Asynchronous Normal mode(U2X0 = 0으로 설정했음)
		//UBRR0L(low), UBRR0H(high) : 보호 레이트 레지스터 , 송수신 속도 맞춰주는
	*/
	i = UDR0; //수신 버퍼 비우기 // 한번 읽으면 비워지기 때문에 읽어주는 것 
     900:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     904:	8f e9       	ldi	r24, 0x9F	; 159
     906:	9f e0       	ldi	r25, 0x0F	; 15
     908:	01 97       	sbiw	r24, 0x01	; 1
     90a:	f1 f7       	brne	.-4      	; 0x908 <__stack+0x9>
     90c:	00 c0       	rjmp	.+0      	; 0x90e <__stack+0xf>
     90e:	00 00       	nop
			//송신, 수신 레지스터 이름을 같이 쓰는데 컴파일러가 알아서 구분해줌
	
	_delay_ms(1); //약간의 딜레이
	
	return;
}
     910:	ff 90       	pop	r15
     912:	ef 90       	pop	r14
     914:	df 90       	pop	r13
     916:	cf 90       	pop	r12
     918:	08 95       	ret

0000091a <__subsf3>:
     91a:	50 58       	subi	r21, 0x80	; 128

0000091c <__addsf3>:
     91c:	bb 27       	eor	r27, r27
     91e:	aa 27       	eor	r26, r26
     920:	0e 94 a5 04 	call	0x94a	; 0x94a <__addsf3x>
     924:	0c 94 f6 05 	jmp	0xbec	; 0xbec <__fp_round>
     928:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <__fp_pscA>
     92c:	38 f0       	brcs	.+14     	; 0x93c <__addsf3+0x20>
     92e:	0e 94 ef 05 	call	0xbde	; 0xbde <__fp_pscB>
     932:	20 f0       	brcs	.+8      	; 0x93c <__addsf3+0x20>
     934:	39 f4       	brne	.+14     	; 0x944 <__addsf3+0x28>
     936:	9f 3f       	cpi	r25, 0xFF	; 255
     938:	19 f4       	brne	.+6      	; 0x940 <__addsf3+0x24>
     93a:	26 f4       	brtc	.+8      	; 0x944 <__addsf3+0x28>
     93c:	0c 94 e5 05 	jmp	0xbca	; 0xbca <__fp_nan>
     940:	0e f4       	brtc	.+2      	; 0x944 <__addsf3+0x28>
     942:	e0 95       	com	r30
     944:	e7 fb       	bst	r30, 7
     946:	0c 94 df 05 	jmp	0xbbe	; 0xbbe <__fp_inf>

0000094a <__addsf3x>:
     94a:	e9 2f       	mov	r30, r25
     94c:	0e 94 07 06 	call	0xc0e	; 0xc0e <__fp_split3>
     950:	58 f3       	brcs	.-42     	; 0x928 <__addsf3+0xc>
     952:	ba 17       	cp	r27, r26
     954:	62 07       	cpc	r22, r18
     956:	73 07       	cpc	r23, r19
     958:	84 07       	cpc	r24, r20
     95a:	95 07       	cpc	r25, r21
     95c:	20 f0       	brcs	.+8      	; 0x966 <__addsf3x+0x1c>
     95e:	79 f4       	brne	.+30     	; 0x97e <__addsf3x+0x34>
     960:	a6 f5       	brtc	.+104    	; 0x9ca <__addsf3x+0x80>
     962:	0c 94 29 06 	jmp	0xc52	; 0xc52 <__fp_zero>
     966:	0e f4       	brtc	.+2      	; 0x96a <__addsf3x+0x20>
     968:	e0 95       	com	r30
     96a:	0b 2e       	mov	r0, r27
     96c:	ba 2f       	mov	r27, r26
     96e:	a0 2d       	mov	r26, r0
     970:	0b 01       	movw	r0, r22
     972:	b9 01       	movw	r22, r18
     974:	90 01       	movw	r18, r0
     976:	0c 01       	movw	r0, r24
     978:	ca 01       	movw	r24, r20
     97a:	a0 01       	movw	r20, r0
     97c:	11 24       	eor	r1, r1
     97e:	ff 27       	eor	r31, r31
     980:	59 1b       	sub	r21, r25
     982:	99 f0       	breq	.+38     	; 0x9aa <__addsf3x+0x60>
     984:	59 3f       	cpi	r21, 0xF9	; 249
     986:	50 f4       	brcc	.+20     	; 0x99c <__addsf3x+0x52>
     988:	50 3e       	cpi	r21, 0xE0	; 224
     98a:	68 f1       	brcs	.+90     	; 0x9e6 <__addsf3x+0x9c>
     98c:	1a 16       	cp	r1, r26
     98e:	f0 40       	sbci	r31, 0x00	; 0
     990:	a2 2f       	mov	r26, r18
     992:	23 2f       	mov	r18, r19
     994:	34 2f       	mov	r19, r20
     996:	44 27       	eor	r20, r20
     998:	58 5f       	subi	r21, 0xF8	; 248
     99a:	f3 cf       	rjmp	.-26     	; 0x982 <__addsf3x+0x38>
     99c:	46 95       	lsr	r20
     99e:	37 95       	ror	r19
     9a0:	27 95       	ror	r18
     9a2:	a7 95       	ror	r26
     9a4:	f0 40       	sbci	r31, 0x00	; 0
     9a6:	53 95       	inc	r21
     9a8:	c9 f7       	brne	.-14     	; 0x99c <__addsf3x+0x52>
     9aa:	7e f4       	brtc	.+30     	; 0x9ca <__addsf3x+0x80>
     9ac:	1f 16       	cp	r1, r31
     9ae:	ba 0b       	sbc	r27, r26
     9b0:	62 0b       	sbc	r22, r18
     9b2:	73 0b       	sbc	r23, r19
     9b4:	84 0b       	sbc	r24, r20
     9b6:	ba f0       	brmi	.+46     	; 0x9e6 <__addsf3x+0x9c>
     9b8:	91 50       	subi	r25, 0x01	; 1
     9ba:	a1 f0       	breq	.+40     	; 0x9e4 <__addsf3x+0x9a>
     9bc:	ff 0f       	add	r31, r31
     9be:	bb 1f       	adc	r27, r27
     9c0:	66 1f       	adc	r22, r22
     9c2:	77 1f       	adc	r23, r23
     9c4:	88 1f       	adc	r24, r24
     9c6:	c2 f7       	brpl	.-16     	; 0x9b8 <__addsf3x+0x6e>
     9c8:	0e c0       	rjmp	.+28     	; 0x9e6 <__addsf3x+0x9c>
     9ca:	ba 0f       	add	r27, r26
     9cc:	62 1f       	adc	r22, r18
     9ce:	73 1f       	adc	r23, r19
     9d0:	84 1f       	adc	r24, r20
     9d2:	48 f4       	brcc	.+18     	; 0x9e6 <__addsf3x+0x9c>
     9d4:	87 95       	ror	r24
     9d6:	77 95       	ror	r23
     9d8:	67 95       	ror	r22
     9da:	b7 95       	ror	r27
     9dc:	f7 95       	ror	r31
     9de:	9e 3f       	cpi	r25, 0xFE	; 254
     9e0:	08 f0       	brcs	.+2      	; 0x9e4 <__addsf3x+0x9a>
     9e2:	b0 cf       	rjmp	.-160    	; 0x944 <__addsf3+0x28>
     9e4:	93 95       	inc	r25
     9e6:	88 0f       	add	r24, r24
     9e8:	08 f0       	brcs	.+2      	; 0x9ec <__addsf3x+0xa2>
     9ea:	99 27       	eor	r25, r25
     9ec:	ee 0f       	add	r30, r30
     9ee:	97 95       	ror	r25
     9f0:	87 95       	ror	r24
     9f2:	08 95       	ret

000009f4 <__divsf3>:
     9f4:	0e 94 0e 05 	call	0xa1c	; 0xa1c <__divsf3x>
     9f8:	0c 94 f6 05 	jmp	0xbec	; 0xbec <__fp_round>
     9fc:	0e 94 ef 05 	call	0xbde	; 0xbde <__fp_pscB>
     a00:	58 f0       	brcs	.+22     	; 0xa18 <__divsf3+0x24>
     a02:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <__fp_pscA>
     a06:	40 f0       	brcs	.+16     	; 0xa18 <__divsf3+0x24>
     a08:	29 f4       	brne	.+10     	; 0xa14 <__divsf3+0x20>
     a0a:	5f 3f       	cpi	r21, 0xFF	; 255
     a0c:	29 f0       	breq	.+10     	; 0xa18 <__divsf3+0x24>
     a0e:	0c 94 df 05 	jmp	0xbbe	; 0xbbe <__fp_inf>
     a12:	51 11       	cpse	r21, r1
     a14:	0c 94 2a 06 	jmp	0xc54	; 0xc54 <__fp_szero>
     a18:	0c 94 e5 05 	jmp	0xbca	; 0xbca <__fp_nan>

00000a1c <__divsf3x>:
     a1c:	0e 94 07 06 	call	0xc0e	; 0xc0e <__fp_split3>
     a20:	68 f3       	brcs	.-38     	; 0x9fc <__divsf3+0x8>

00000a22 <__divsf3_pse>:
     a22:	99 23       	and	r25, r25
     a24:	b1 f3       	breq	.-20     	; 0xa12 <__divsf3+0x1e>
     a26:	55 23       	and	r21, r21
     a28:	91 f3       	breq	.-28     	; 0xa0e <__divsf3+0x1a>
     a2a:	95 1b       	sub	r25, r21
     a2c:	55 0b       	sbc	r21, r21
     a2e:	bb 27       	eor	r27, r27
     a30:	aa 27       	eor	r26, r26
     a32:	62 17       	cp	r22, r18
     a34:	73 07       	cpc	r23, r19
     a36:	84 07       	cpc	r24, r20
     a38:	38 f0       	brcs	.+14     	; 0xa48 <__divsf3_pse+0x26>
     a3a:	9f 5f       	subi	r25, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	22 0f       	add	r18, r18
     a40:	33 1f       	adc	r19, r19
     a42:	44 1f       	adc	r20, r20
     a44:	aa 1f       	adc	r26, r26
     a46:	a9 f3       	breq	.-22     	; 0xa32 <__divsf3_pse+0x10>
     a48:	35 d0       	rcall	.+106    	; 0xab4 <__divsf3_pse+0x92>
     a4a:	0e 2e       	mov	r0, r30
     a4c:	3a f0       	brmi	.+14     	; 0xa5c <__divsf3_pse+0x3a>
     a4e:	e0 e8       	ldi	r30, 0x80	; 128
     a50:	32 d0       	rcall	.+100    	; 0xab6 <__divsf3_pse+0x94>
     a52:	91 50       	subi	r25, 0x01	; 1
     a54:	50 40       	sbci	r21, 0x00	; 0
     a56:	e6 95       	lsr	r30
     a58:	00 1c       	adc	r0, r0
     a5a:	ca f7       	brpl	.-14     	; 0xa4e <__divsf3_pse+0x2c>
     a5c:	2b d0       	rcall	.+86     	; 0xab4 <__divsf3_pse+0x92>
     a5e:	fe 2f       	mov	r31, r30
     a60:	29 d0       	rcall	.+82     	; 0xab4 <__divsf3_pse+0x92>
     a62:	66 0f       	add	r22, r22
     a64:	77 1f       	adc	r23, r23
     a66:	88 1f       	adc	r24, r24
     a68:	bb 1f       	adc	r27, r27
     a6a:	26 17       	cp	r18, r22
     a6c:	37 07       	cpc	r19, r23
     a6e:	48 07       	cpc	r20, r24
     a70:	ab 07       	cpc	r26, r27
     a72:	b0 e8       	ldi	r27, 0x80	; 128
     a74:	09 f0       	breq	.+2      	; 0xa78 <__divsf3_pse+0x56>
     a76:	bb 0b       	sbc	r27, r27
     a78:	80 2d       	mov	r24, r0
     a7a:	bf 01       	movw	r22, r30
     a7c:	ff 27       	eor	r31, r31
     a7e:	93 58       	subi	r25, 0x83	; 131
     a80:	5f 4f       	sbci	r21, 0xFF	; 255
     a82:	3a f0       	brmi	.+14     	; 0xa92 <__divsf3_pse+0x70>
     a84:	9e 3f       	cpi	r25, 0xFE	; 254
     a86:	51 05       	cpc	r21, r1
     a88:	78 f0       	brcs	.+30     	; 0xaa8 <__divsf3_pse+0x86>
     a8a:	0c 94 df 05 	jmp	0xbbe	; 0xbbe <__fp_inf>
     a8e:	0c 94 2a 06 	jmp	0xc54	; 0xc54 <__fp_szero>
     a92:	5f 3f       	cpi	r21, 0xFF	; 255
     a94:	e4 f3       	brlt	.-8      	; 0xa8e <__divsf3_pse+0x6c>
     a96:	98 3e       	cpi	r25, 0xE8	; 232
     a98:	d4 f3       	brlt	.-12     	; 0xa8e <__divsf3_pse+0x6c>
     a9a:	86 95       	lsr	r24
     a9c:	77 95       	ror	r23
     a9e:	67 95       	ror	r22
     aa0:	b7 95       	ror	r27
     aa2:	f7 95       	ror	r31
     aa4:	9f 5f       	subi	r25, 0xFF	; 255
     aa6:	c9 f7       	brne	.-14     	; 0xa9a <__divsf3_pse+0x78>
     aa8:	88 0f       	add	r24, r24
     aaa:	91 1d       	adc	r25, r1
     aac:	96 95       	lsr	r25
     aae:	87 95       	ror	r24
     ab0:	97 f9       	bld	r25, 7
     ab2:	08 95       	ret
     ab4:	e1 e0       	ldi	r30, 0x01	; 1
     ab6:	66 0f       	add	r22, r22
     ab8:	77 1f       	adc	r23, r23
     aba:	88 1f       	adc	r24, r24
     abc:	bb 1f       	adc	r27, r27
     abe:	62 17       	cp	r22, r18
     ac0:	73 07       	cpc	r23, r19
     ac2:	84 07       	cpc	r24, r20
     ac4:	ba 07       	cpc	r27, r26
     ac6:	20 f0       	brcs	.+8      	; 0xad0 <__divsf3_pse+0xae>
     ac8:	62 1b       	sub	r22, r18
     aca:	73 0b       	sbc	r23, r19
     acc:	84 0b       	sbc	r24, r20
     ace:	ba 0b       	sbc	r27, r26
     ad0:	ee 1f       	adc	r30, r30
     ad2:	88 f7       	brcc	.-30     	; 0xab6 <__divsf3_pse+0x94>
     ad4:	e0 95       	com	r30
     ad6:	08 95       	ret

00000ad8 <__fixsfsi>:
     ad8:	0e 94 73 05 	call	0xae6	; 0xae6 <__fixunssfsi>
     adc:	68 94       	set
     ade:	b1 11       	cpse	r27, r1
     ae0:	0c 94 2a 06 	jmp	0xc54	; 0xc54 <__fp_szero>
     ae4:	08 95       	ret

00000ae6 <__fixunssfsi>:
     ae6:	0e 94 0f 06 	call	0xc1e	; 0xc1e <__fp_splitA>
     aea:	88 f0       	brcs	.+34     	; 0xb0e <__fixunssfsi+0x28>
     aec:	9f 57       	subi	r25, 0x7F	; 127
     aee:	98 f0       	brcs	.+38     	; 0xb16 <__fixunssfsi+0x30>
     af0:	b9 2f       	mov	r27, r25
     af2:	99 27       	eor	r25, r25
     af4:	b7 51       	subi	r27, 0x17	; 23
     af6:	b0 f0       	brcs	.+44     	; 0xb24 <__fixunssfsi+0x3e>
     af8:	e1 f0       	breq	.+56     	; 0xb32 <__fixunssfsi+0x4c>
     afa:	66 0f       	add	r22, r22
     afc:	77 1f       	adc	r23, r23
     afe:	88 1f       	adc	r24, r24
     b00:	99 1f       	adc	r25, r25
     b02:	1a f0       	brmi	.+6      	; 0xb0a <__fixunssfsi+0x24>
     b04:	ba 95       	dec	r27
     b06:	c9 f7       	brne	.-14     	; 0xafa <__fixunssfsi+0x14>
     b08:	14 c0       	rjmp	.+40     	; 0xb32 <__fixunssfsi+0x4c>
     b0a:	b1 30       	cpi	r27, 0x01	; 1
     b0c:	91 f0       	breq	.+36     	; 0xb32 <__fixunssfsi+0x4c>
     b0e:	0e 94 29 06 	call	0xc52	; 0xc52 <__fp_zero>
     b12:	b1 e0       	ldi	r27, 0x01	; 1
     b14:	08 95       	ret
     b16:	0c 94 29 06 	jmp	0xc52	; 0xc52 <__fp_zero>
     b1a:	67 2f       	mov	r22, r23
     b1c:	78 2f       	mov	r23, r24
     b1e:	88 27       	eor	r24, r24
     b20:	b8 5f       	subi	r27, 0xF8	; 248
     b22:	39 f0       	breq	.+14     	; 0xb32 <__fixunssfsi+0x4c>
     b24:	b9 3f       	cpi	r27, 0xF9	; 249
     b26:	cc f3       	brlt	.-14     	; 0xb1a <__fixunssfsi+0x34>
     b28:	86 95       	lsr	r24
     b2a:	77 95       	ror	r23
     b2c:	67 95       	ror	r22
     b2e:	b3 95       	inc	r27
     b30:	d9 f7       	brne	.-10     	; 0xb28 <__fixunssfsi+0x42>
     b32:	3e f4       	brtc	.+14     	; 0xb42 <__fixunssfsi+0x5c>
     b34:	90 95       	com	r25
     b36:	80 95       	com	r24
     b38:	70 95       	com	r23
     b3a:	61 95       	neg	r22
     b3c:	7f 4f       	sbci	r23, 0xFF	; 255
     b3e:	8f 4f       	sbci	r24, 0xFF	; 255
     b40:	9f 4f       	sbci	r25, 0xFF	; 255
     b42:	08 95       	ret

00000b44 <__floatunsisf>:
     b44:	e8 94       	clt
     b46:	09 c0       	rjmp	.+18     	; 0xb5a <__floatsisf+0x12>

00000b48 <__floatsisf>:
     b48:	97 fb       	bst	r25, 7
     b4a:	3e f4       	brtc	.+14     	; 0xb5a <__floatsisf+0x12>
     b4c:	90 95       	com	r25
     b4e:	80 95       	com	r24
     b50:	70 95       	com	r23
     b52:	61 95       	neg	r22
     b54:	7f 4f       	sbci	r23, 0xFF	; 255
     b56:	8f 4f       	sbci	r24, 0xFF	; 255
     b58:	9f 4f       	sbci	r25, 0xFF	; 255
     b5a:	99 23       	and	r25, r25
     b5c:	a9 f0       	breq	.+42     	; 0xb88 <__floatsisf+0x40>
     b5e:	f9 2f       	mov	r31, r25
     b60:	96 e9       	ldi	r25, 0x96	; 150
     b62:	bb 27       	eor	r27, r27
     b64:	93 95       	inc	r25
     b66:	f6 95       	lsr	r31
     b68:	87 95       	ror	r24
     b6a:	77 95       	ror	r23
     b6c:	67 95       	ror	r22
     b6e:	b7 95       	ror	r27
     b70:	f1 11       	cpse	r31, r1
     b72:	f8 cf       	rjmp	.-16     	; 0xb64 <__floatsisf+0x1c>
     b74:	fa f4       	brpl	.+62     	; 0xbb4 <__floatsisf+0x6c>
     b76:	bb 0f       	add	r27, r27
     b78:	11 f4       	brne	.+4      	; 0xb7e <__floatsisf+0x36>
     b7a:	60 ff       	sbrs	r22, 0
     b7c:	1b c0       	rjmp	.+54     	; 0xbb4 <__floatsisf+0x6c>
     b7e:	6f 5f       	subi	r22, 0xFF	; 255
     b80:	7f 4f       	sbci	r23, 0xFF	; 255
     b82:	8f 4f       	sbci	r24, 0xFF	; 255
     b84:	9f 4f       	sbci	r25, 0xFF	; 255
     b86:	16 c0       	rjmp	.+44     	; 0xbb4 <__floatsisf+0x6c>
     b88:	88 23       	and	r24, r24
     b8a:	11 f0       	breq	.+4      	; 0xb90 <__floatsisf+0x48>
     b8c:	96 e9       	ldi	r25, 0x96	; 150
     b8e:	11 c0       	rjmp	.+34     	; 0xbb2 <__floatsisf+0x6a>
     b90:	77 23       	and	r23, r23
     b92:	21 f0       	breq	.+8      	; 0xb9c <__floatsisf+0x54>
     b94:	9e e8       	ldi	r25, 0x8E	; 142
     b96:	87 2f       	mov	r24, r23
     b98:	76 2f       	mov	r23, r22
     b9a:	05 c0       	rjmp	.+10     	; 0xba6 <__floatsisf+0x5e>
     b9c:	66 23       	and	r22, r22
     b9e:	71 f0       	breq	.+28     	; 0xbbc <__floatsisf+0x74>
     ba0:	96 e8       	ldi	r25, 0x86	; 134
     ba2:	86 2f       	mov	r24, r22
     ba4:	70 e0       	ldi	r23, 0x00	; 0
     ba6:	60 e0       	ldi	r22, 0x00	; 0
     ba8:	2a f0       	brmi	.+10     	; 0xbb4 <__floatsisf+0x6c>
     baa:	9a 95       	dec	r25
     bac:	66 0f       	add	r22, r22
     bae:	77 1f       	adc	r23, r23
     bb0:	88 1f       	adc	r24, r24
     bb2:	da f7       	brpl	.-10     	; 0xbaa <__floatsisf+0x62>
     bb4:	88 0f       	add	r24, r24
     bb6:	96 95       	lsr	r25
     bb8:	87 95       	ror	r24
     bba:	97 f9       	bld	r25, 7
     bbc:	08 95       	ret

00000bbe <__fp_inf>:
     bbe:	97 f9       	bld	r25, 7
     bc0:	9f 67       	ori	r25, 0x7F	; 127
     bc2:	80 e8       	ldi	r24, 0x80	; 128
     bc4:	70 e0       	ldi	r23, 0x00	; 0
     bc6:	60 e0       	ldi	r22, 0x00	; 0
     bc8:	08 95       	ret

00000bca <__fp_nan>:
     bca:	9f ef       	ldi	r25, 0xFF	; 255
     bcc:	80 ec       	ldi	r24, 0xC0	; 192
     bce:	08 95       	ret

00000bd0 <__fp_pscA>:
     bd0:	00 24       	eor	r0, r0
     bd2:	0a 94       	dec	r0
     bd4:	16 16       	cp	r1, r22
     bd6:	17 06       	cpc	r1, r23
     bd8:	18 06       	cpc	r1, r24
     bda:	09 06       	cpc	r0, r25
     bdc:	08 95       	ret

00000bde <__fp_pscB>:
     bde:	00 24       	eor	r0, r0
     be0:	0a 94       	dec	r0
     be2:	12 16       	cp	r1, r18
     be4:	13 06       	cpc	r1, r19
     be6:	14 06       	cpc	r1, r20
     be8:	05 06       	cpc	r0, r21
     bea:	08 95       	ret

00000bec <__fp_round>:
     bec:	09 2e       	mov	r0, r25
     bee:	03 94       	inc	r0
     bf0:	00 0c       	add	r0, r0
     bf2:	11 f4       	brne	.+4      	; 0xbf8 <__fp_round+0xc>
     bf4:	88 23       	and	r24, r24
     bf6:	52 f0       	brmi	.+20     	; 0xc0c <__fp_round+0x20>
     bf8:	bb 0f       	add	r27, r27
     bfa:	40 f4       	brcc	.+16     	; 0xc0c <__fp_round+0x20>
     bfc:	bf 2b       	or	r27, r31
     bfe:	11 f4       	brne	.+4      	; 0xc04 <__fp_round+0x18>
     c00:	60 ff       	sbrs	r22, 0
     c02:	04 c0       	rjmp	.+8      	; 0xc0c <__fp_round+0x20>
     c04:	6f 5f       	subi	r22, 0xFF	; 255
     c06:	7f 4f       	sbci	r23, 0xFF	; 255
     c08:	8f 4f       	sbci	r24, 0xFF	; 255
     c0a:	9f 4f       	sbci	r25, 0xFF	; 255
     c0c:	08 95       	ret

00000c0e <__fp_split3>:
     c0e:	57 fd       	sbrc	r21, 7
     c10:	90 58       	subi	r25, 0x80	; 128
     c12:	44 0f       	add	r20, r20
     c14:	55 1f       	adc	r21, r21
     c16:	59 f0       	breq	.+22     	; 0xc2e <__fp_splitA+0x10>
     c18:	5f 3f       	cpi	r21, 0xFF	; 255
     c1a:	71 f0       	breq	.+28     	; 0xc38 <__fp_splitA+0x1a>
     c1c:	47 95       	ror	r20

00000c1e <__fp_splitA>:
     c1e:	88 0f       	add	r24, r24
     c20:	97 fb       	bst	r25, 7
     c22:	99 1f       	adc	r25, r25
     c24:	61 f0       	breq	.+24     	; 0xc3e <__fp_splitA+0x20>
     c26:	9f 3f       	cpi	r25, 0xFF	; 255
     c28:	79 f0       	breq	.+30     	; 0xc48 <__fp_splitA+0x2a>
     c2a:	87 95       	ror	r24
     c2c:	08 95       	ret
     c2e:	12 16       	cp	r1, r18
     c30:	13 06       	cpc	r1, r19
     c32:	14 06       	cpc	r1, r20
     c34:	55 1f       	adc	r21, r21
     c36:	f2 cf       	rjmp	.-28     	; 0xc1c <__fp_split3+0xe>
     c38:	46 95       	lsr	r20
     c3a:	f1 df       	rcall	.-30     	; 0xc1e <__fp_splitA>
     c3c:	08 c0       	rjmp	.+16     	; 0xc4e <__fp_splitA+0x30>
     c3e:	16 16       	cp	r1, r22
     c40:	17 06       	cpc	r1, r23
     c42:	18 06       	cpc	r1, r24
     c44:	99 1f       	adc	r25, r25
     c46:	f1 cf       	rjmp	.-30     	; 0xc2a <__fp_splitA+0xc>
     c48:	86 95       	lsr	r24
     c4a:	71 05       	cpc	r23, r1
     c4c:	61 05       	cpc	r22, r1
     c4e:	08 94       	sec
     c50:	08 95       	ret

00000c52 <__fp_zero>:
     c52:	e8 94       	clt

00000c54 <__fp_szero>:
     c54:	bb 27       	eor	r27, r27
     c56:	66 27       	eor	r22, r22
     c58:	77 27       	eor	r23, r23
     c5a:	cb 01       	movw	r24, r22
     c5c:	97 f9       	bld	r25, 7
     c5e:	08 95       	ret

00000c60 <__mulsf3>:
     c60:	0e 94 43 06 	call	0xc86	; 0xc86 <__mulsf3x>
     c64:	0c 94 f6 05 	jmp	0xbec	; 0xbec <__fp_round>
     c68:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <__fp_pscA>
     c6c:	38 f0       	brcs	.+14     	; 0xc7c <__mulsf3+0x1c>
     c6e:	0e 94 ef 05 	call	0xbde	; 0xbde <__fp_pscB>
     c72:	20 f0       	brcs	.+8      	; 0xc7c <__mulsf3+0x1c>
     c74:	95 23       	and	r25, r21
     c76:	11 f0       	breq	.+4      	; 0xc7c <__mulsf3+0x1c>
     c78:	0c 94 df 05 	jmp	0xbbe	; 0xbbe <__fp_inf>
     c7c:	0c 94 e5 05 	jmp	0xbca	; 0xbca <__fp_nan>
     c80:	11 24       	eor	r1, r1
     c82:	0c 94 2a 06 	jmp	0xc54	; 0xc54 <__fp_szero>

00000c86 <__mulsf3x>:
     c86:	0e 94 07 06 	call	0xc0e	; 0xc0e <__fp_split3>
     c8a:	70 f3       	brcs	.-36     	; 0xc68 <__mulsf3+0x8>

00000c8c <__mulsf3_pse>:
     c8c:	95 9f       	mul	r25, r21
     c8e:	c1 f3       	breq	.-16     	; 0xc80 <__mulsf3+0x20>
     c90:	95 0f       	add	r25, r21
     c92:	50 e0       	ldi	r21, 0x00	; 0
     c94:	55 1f       	adc	r21, r21
     c96:	62 9f       	mul	r22, r18
     c98:	f0 01       	movw	r30, r0
     c9a:	72 9f       	mul	r23, r18
     c9c:	bb 27       	eor	r27, r27
     c9e:	f0 0d       	add	r31, r0
     ca0:	b1 1d       	adc	r27, r1
     ca2:	63 9f       	mul	r22, r19
     ca4:	aa 27       	eor	r26, r26
     ca6:	f0 0d       	add	r31, r0
     ca8:	b1 1d       	adc	r27, r1
     caa:	aa 1f       	adc	r26, r26
     cac:	64 9f       	mul	r22, r20
     cae:	66 27       	eor	r22, r22
     cb0:	b0 0d       	add	r27, r0
     cb2:	a1 1d       	adc	r26, r1
     cb4:	66 1f       	adc	r22, r22
     cb6:	82 9f       	mul	r24, r18
     cb8:	22 27       	eor	r18, r18
     cba:	b0 0d       	add	r27, r0
     cbc:	a1 1d       	adc	r26, r1
     cbe:	62 1f       	adc	r22, r18
     cc0:	73 9f       	mul	r23, r19
     cc2:	b0 0d       	add	r27, r0
     cc4:	a1 1d       	adc	r26, r1
     cc6:	62 1f       	adc	r22, r18
     cc8:	83 9f       	mul	r24, r19
     cca:	a0 0d       	add	r26, r0
     ccc:	61 1d       	adc	r22, r1
     cce:	22 1f       	adc	r18, r18
     cd0:	74 9f       	mul	r23, r20
     cd2:	33 27       	eor	r19, r19
     cd4:	a0 0d       	add	r26, r0
     cd6:	61 1d       	adc	r22, r1
     cd8:	23 1f       	adc	r18, r19
     cda:	84 9f       	mul	r24, r20
     cdc:	60 0d       	add	r22, r0
     cde:	21 1d       	adc	r18, r1
     ce0:	82 2f       	mov	r24, r18
     ce2:	76 2f       	mov	r23, r22
     ce4:	6a 2f       	mov	r22, r26
     ce6:	11 24       	eor	r1, r1
     ce8:	9f 57       	subi	r25, 0x7F	; 127
     cea:	50 40       	sbci	r21, 0x00	; 0
     cec:	9a f0       	brmi	.+38     	; 0xd14 <__mulsf3_pse+0x88>
     cee:	f1 f0       	breq	.+60     	; 0xd2c <__mulsf3_pse+0xa0>
     cf0:	88 23       	and	r24, r24
     cf2:	4a f0       	brmi	.+18     	; 0xd06 <__mulsf3_pse+0x7a>
     cf4:	ee 0f       	add	r30, r30
     cf6:	ff 1f       	adc	r31, r31
     cf8:	bb 1f       	adc	r27, r27
     cfa:	66 1f       	adc	r22, r22
     cfc:	77 1f       	adc	r23, r23
     cfe:	88 1f       	adc	r24, r24
     d00:	91 50       	subi	r25, 0x01	; 1
     d02:	50 40       	sbci	r21, 0x00	; 0
     d04:	a9 f7       	brne	.-22     	; 0xcf0 <__mulsf3_pse+0x64>
     d06:	9e 3f       	cpi	r25, 0xFE	; 254
     d08:	51 05       	cpc	r21, r1
     d0a:	80 f0       	brcs	.+32     	; 0xd2c <__mulsf3_pse+0xa0>
     d0c:	0c 94 df 05 	jmp	0xbbe	; 0xbbe <__fp_inf>
     d10:	0c 94 2a 06 	jmp	0xc54	; 0xc54 <__fp_szero>
     d14:	5f 3f       	cpi	r21, 0xFF	; 255
     d16:	e4 f3       	brlt	.-8      	; 0xd10 <__mulsf3_pse+0x84>
     d18:	98 3e       	cpi	r25, 0xE8	; 232
     d1a:	d4 f3       	brlt	.-12     	; 0xd10 <__mulsf3_pse+0x84>
     d1c:	86 95       	lsr	r24
     d1e:	77 95       	ror	r23
     d20:	67 95       	ror	r22
     d22:	b7 95       	ror	r27
     d24:	f7 95       	ror	r31
     d26:	e7 95       	ror	r30
     d28:	9f 5f       	subi	r25, 0xFF	; 255
     d2a:	c1 f7       	brne	.-16     	; 0xd1c <__mulsf3_pse+0x90>
     d2c:	fe 2b       	or	r31, r30
     d2e:	88 0f       	add	r24, r24
     d30:	91 1d       	adc	r25, r1
     d32:	96 95       	lsr	r25
     d34:	87 95       	ror	r24
     d36:	97 f9       	bld	r25, 7
     d38:	08 95       	ret

00000d3a <__udivmodsi4>:
     d3a:	a1 e2       	ldi	r26, 0x21	; 33
     d3c:	1a 2e       	mov	r1, r26
     d3e:	aa 1b       	sub	r26, r26
     d40:	bb 1b       	sub	r27, r27
     d42:	fd 01       	movw	r30, r26
     d44:	0d c0       	rjmp	.+26     	; 0xd60 <__udivmodsi4_ep>

00000d46 <__udivmodsi4_loop>:
     d46:	aa 1f       	adc	r26, r26
     d48:	bb 1f       	adc	r27, r27
     d4a:	ee 1f       	adc	r30, r30
     d4c:	ff 1f       	adc	r31, r31
     d4e:	a2 17       	cp	r26, r18
     d50:	b3 07       	cpc	r27, r19
     d52:	e4 07       	cpc	r30, r20
     d54:	f5 07       	cpc	r31, r21
     d56:	20 f0       	brcs	.+8      	; 0xd60 <__udivmodsi4_ep>
     d58:	a2 1b       	sub	r26, r18
     d5a:	b3 0b       	sbc	r27, r19
     d5c:	e4 0b       	sbc	r30, r20
     d5e:	f5 0b       	sbc	r31, r21

00000d60 <__udivmodsi4_ep>:
     d60:	66 1f       	adc	r22, r22
     d62:	77 1f       	adc	r23, r23
     d64:	88 1f       	adc	r24, r24
     d66:	99 1f       	adc	r25, r25
     d68:	1a 94       	dec	r1
     d6a:	69 f7       	brne	.-38     	; 0xd46 <__udivmodsi4_loop>
     d6c:	60 95       	com	r22
     d6e:	70 95       	com	r23
     d70:	80 95       	com	r24
     d72:	90 95       	com	r25
     d74:	9b 01       	movw	r18, r22
     d76:	ac 01       	movw	r20, r24
     d78:	bd 01       	movw	r22, r26
     d7a:	cf 01       	movw	r24, r30
     d7c:	08 95       	ret

00000d7e <strcmp>:
     d7e:	fb 01       	movw	r30, r22
     d80:	dc 01       	movw	r26, r24
     d82:	8d 91       	ld	r24, X+
     d84:	01 90       	ld	r0, Z+
     d86:	80 19       	sub	r24, r0
     d88:	01 10       	cpse	r0, r1
     d8a:	d9 f3       	breq	.-10     	; 0xd82 <strcmp+0x4>
     d8c:	99 0b       	sbc	r25, r25
     d8e:	08 95       	ret

00000d90 <fdevopen>:
     d90:	0f 93       	push	r16
     d92:	1f 93       	push	r17
     d94:	cf 93       	push	r28
     d96:	df 93       	push	r29
     d98:	00 97       	sbiw	r24, 0x00	; 0
     d9a:	31 f4       	brne	.+12     	; 0xda8 <fdevopen+0x18>
     d9c:	61 15       	cp	r22, r1
     d9e:	71 05       	cpc	r23, r1
     da0:	19 f4       	brne	.+6      	; 0xda8 <fdevopen+0x18>
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	3a c0       	rjmp	.+116    	; 0xe1c <fdevopen+0x8c>
     da8:	8b 01       	movw	r16, r22
     daa:	ec 01       	movw	r28, r24
     dac:	6e e0       	ldi	r22, 0x0E	; 14
     dae:	70 e0       	ldi	r23, 0x00	; 0
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	0e 94 3a 09 	call	0x1274	; 0x1274 <calloc>
     db8:	fc 01       	movw	r30, r24
     dba:	89 2b       	or	r24, r25
     dbc:	91 f3       	breq	.-28     	; 0xda2 <fdevopen+0x12>
     dbe:	80 e8       	ldi	r24, 0x80	; 128
     dc0:	83 83       	std	Z+3, r24	; 0x03
     dc2:	01 15       	cp	r16, r1
     dc4:	11 05       	cpc	r17, r1
     dc6:	71 f0       	breq	.+28     	; 0xde4 <fdevopen+0x54>
     dc8:	13 87       	std	Z+11, r17	; 0x0b
     dca:	02 87       	std	Z+10, r16	; 0x0a
     dcc:	81 e8       	ldi	r24, 0x81	; 129
     dce:	83 83       	std	Z+3, r24	; 0x03
     dd0:	80 91 1a 06 	lds	r24, 0x061A	; 0x80061a <__iob>
     dd4:	90 91 1b 06 	lds	r25, 0x061B	; 0x80061b <__iob+0x1>
     dd8:	89 2b       	or	r24, r25
     dda:	21 f4       	brne	.+8      	; 0xde4 <fdevopen+0x54>
     ddc:	f0 93 1b 06 	sts	0x061B, r31	; 0x80061b <__iob+0x1>
     de0:	e0 93 1a 06 	sts	0x061A, r30	; 0x80061a <__iob>
     de4:	20 97       	sbiw	r28, 0x00	; 0
     de6:	c9 f0       	breq	.+50     	; 0xe1a <fdevopen+0x8a>
     de8:	d1 87       	std	Z+9, r29	; 0x09
     dea:	c0 87       	std	Z+8, r28	; 0x08
     dec:	83 81       	ldd	r24, Z+3	; 0x03
     dee:	82 60       	ori	r24, 0x02	; 2
     df0:	83 83       	std	Z+3, r24	; 0x03
     df2:	80 91 1c 06 	lds	r24, 0x061C	; 0x80061c <__iob+0x2>
     df6:	90 91 1d 06 	lds	r25, 0x061D	; 0x80061d <__iob+0x3>
     dfa:	89 2b       	or	r24, r25
     dfc:	71 f4       	brne	.+28     	; 0xe1a <fdevopen+0x8a>
     dfe:	f0 93 1d 06 	sts	0x061D, r31	; 0x80061d <__iob+0x3>
     e02:	e0 93 1c 06 	sts	0x061C, r30	; 0x80061c <__iob+0x2>
     e06:	80 91 1e 06 	lds	r24, 0x061E	; 0x80061e <__iob+0x4>
     e0a:	90 91 1f 06 	lds	r25, 0x061F	; 0x80061f <__iob+0x5>
     e0e:	89 2b       	or	r24, r25
     e10:	21 f4       	brne	.+8      	; 0xe1a <fdevopen+0x8a>
     e12:	f0 93 1f 06 	sts	0x061F, r31	; 0x80061f <__iob+0x5>
     e16:	e0 93 1e 06 	sts	0x061E, r30	; 0x80061e <__iob+0x4>
     e1a:	cf 01       	movw	r24, r30
     e1c:	df 91       	pop	r29
     e1e:	cf 91       	pop	r28
     e20:	1f 91       	pop	r17
     e22:	0f 91       	pop	r16
     e24:	08 95       	ret

00000e26 <printf>:
     e26:	a0 e0       	ldi	r26, 0x00	; 0
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	e9 e1       	ldi	r30, 0x19	; 25
     e2c:	f7 e0       	ldi	r31, 0x07	; 7
     e2e:	0c 94 3e 0b 	jmp	0x167c	; 0x167c <__prologue_saves__+0x20>
     e32:	ae 01       	movw	r20, r28
     e34:	4b 5f       	subi	r20, 0xFB	; 251
     e36:	5f 4f       	sbci	r21, 0xFF	; 255
     e38:	fa 01       	movw	r30, r20
     e3a:	61 91       	ld	r22, Z+
     e3c:	71 91       	ld	r23, Z+
     e3e:	af 01       	movw	r20, r30
     e40:	80 91 1c 06 	lds	r24, 0x061C	; 0x80061c <__iob+0x2>
     e44:	90 91 1d 06 	lds	r25, 0x061D	; 0x80061d <__iob+0x3>
     e48:	0e 94 59 07 	call	0xeb2	; 0xeb2 <vfprintf>
     e4c:	e2 e0       	ldi	r30, 0x02	; 2
     e4e:	0c 94 5a 0b 	jmp	0x16b4	; 0x16b4 <__epilogue_restores__+0x20>

00000e52 <puts>:
     e52:	0f 93       	push	r16
     e54:	1f 93       	push	r17
     e56:	cf 93       	push	r28
     e58:	df 93       	push	r29
     e5a:	e0 91 1c 06 	lds	r30, 0x061C	; 0x80061c <__iob+0x2>
     e5e:	f0 91 1d 06 	lds	r31, 0x061D	; 0x80061d <__iob+0x3>
     e62:	23 81       	ldd	r18, Z+3	; 0x03
     e64:	21 ff       	sbrs	r18, 1
     e66:	1b c0       	rjmp	.+54     	; 0xe9e <puts+0x4c>
     e68:	8c 01       	movw	r16, r24
     e6a:	d0 e0       	ldi	r29, 0x00	; 0
     e6c:	c0 e0       	ldi	r28, 0x00	; 0
     e6e:	f8 01       	movw	r30, r16
     e70:	81 91       	ld	r24, Z+
     e72:	8f 01       	movw	r16, r30
     e74:	60 91 1c 06 	lds	r22, 0x061C	; 0x80061c <__iob+0x2>
     e78:	70 91 1d 06 	lds	r23, 0x061D	; 0x80061d <__iob+0x3>
     e7c:	db 01       	movw	r26, r22
     e7e:	18 96       	adiw	r26, 0x08	; 8
     e80:	ed 91       	ld	r30, X+
     e82:	fc 91       	ld	r31, X
     e84:	19 97       	sbiw	r26, 0x09	; 9
     e86:	88 23       	and	r24, r24
     e88:	31 f0       	breq	.+12     	; 0xe96 <puts+0x44>
     e8a:	09 95       	icall
     e8c:	89 2b       	or	r24, r25
     e8e:	79 f3       	breq	.-34     	; 0xe6e <puts+0x1c>
     e90:	df ef       	ldi	r29, 0xFF	; 255
     e92:	cf ef       	ldi	r28, 0xFF	; 255
     e94:	ec cf       	rjmp	.-40     	; 0xe6e <puts+0x1c>
     e96:	8a e0       	ldi	r24, 0x0A	; 10
     e98:	09 95       	icall
     e9a:	89 2b       	or	r24, r25
     e9c:	19 f0       	breq	.+6      	; 0xea4 <puts+0x52>
     e9e:	8f ef       	ldi	r24, 0xFF	; 255
     ea0:	9f ef       	ldi	r25, 0xFF	; 255
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <puts+0x56>
     ea4:	8d 2f       	mov	r24, r29
     ea6:	9c 2f       	mov	r25, r28
     ea8:	df 91       	pop	r29
     eaa:	cf 91       	pop	r28
     eac:	1f 91       	pop	r17
     eae:	0f 91       	pop	r16
     eb0:	08 95       	ret

00000eb2 <vfprintf>:
     eb2:	ab e0       	ldi	r26, 0x0B	; 11
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	ef e5       	ldi	r30, 0x5F	; 95
     eb8:	f7 e0       	ldi	r31, 0x07	; 7
     eba:	0c 94 2e 0b 	jmp	0x165c	; 0x165c <__prologue_saves__>
     ebe:	6c 01       	movw	r12, r24
     ec0:	7b 01       	movw	r14, r22
     ec2:	8a 01       	movw	r16, r20
     ec4:	fc 01       	movw	r30, r24
     ec6:	17 82       	std	Z+7, r1	; 0x07
     ec8:	16 82       	std	Z+6, r1	; 0x06
     eca:	83 81       	ldd	r24, Z+3	; 0x03
     ecc:	81 ff       	sbrs	r24, 1
     ece:	cc c1       	rjmp	.+920    	; 0x1268 <vfprintf+0x3b6>
     ed0:	ce 01       	movw	r24, r28
     ed2:	01 96       	adiw	r24, 0x01	; 1
     ed4:	3c 01       	movw	r6, r24
     ed6:	f6 01       	movw	r30, r12
     ed8:	93 81       	ldd	r25, Z+3	; 0x03
     eda:	f7 01       	movw	r30, r14
     edc:	93 fd       	sbrc	r25, 3
     ede:	85 91       	lpm	r24, Z+
     ee0:	93 ff       	sbrs	r25, 3
     ee2:	81 91       	ld	r24, Z+
     ee4:	7f 01       	movw	r14, r30
     ee6:	88 23       	and	r24, r24
     ee8:	09 f4       	brne	.+2      	; 0xeec <vfprintf+0x3a>
     eea:	ba c1       	rjmp	.+884    	; 0x1260 <vfprintf+0x3ae>
     eec:	85 32       	cpi	r24, 0x25	; 37
     eee:	39 f4       	brne	.+14     	; 0xefe <vfprintf+0x4c>
     ef0:	93 fd       	sbrc	r25, 3
     ef2:	85 91       	lpm	r24, Z+
     ef4:	93 ff       	sbrs	r25, 3
     ef6:	81 91       	ld	r24, Z+
     ef8:	7f 01       	movw	r14, r30
     efa:	85 32       	cpi	r24, 0x25	; 37
     efc:	29 f4       	brne	.+10     	; 0xf08 <vfprintf+0x56>
     efe:	b6 01       	movw	r22, r12
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	0e 94 94 0a 	call	0x1528	; 0x1528 <fputc>
     f06:	e7 cf       	rjmp	.-50     	; 0xed6 <vfprintf+0x24>
     f08:	91 2c       	mov	r9, r1
     f0a:	21 2c       	mov	r2, r1
     f0c:	31 2c       	mov	r3, r1
     f0e:	ff e1       	ldi	r31, 0x1F	; 31
     f10:	f3 15       	cp	r31, r3
     f12:	d8 f0       	brcs	.+54     	; 0xf4a <vfprintf+0x98>
     f14:	8b 32       	cpi	r24, 0x2B	; 43
     f16:	79 f0       	breq	.+30     	; 0xf36 <vfprintf+0x84>
     f18:	38 f4       	brcc	.+14     	; 0xf28 <vfprintf+0x76>
     f1a:	80 32       	cpi	r24, 0x20	; 32
     f1c:	79 f0       	breq	.+30     	; 0xf3c <vfprintf+0x8a>
     f1e:	83 32       	cpi	r24, 0x23	; 35
     f20:	a1 f4       	brne	.+40     	; 0xf4a <vfprintf+0x98>
     f22:	23 2d       	mov	r18, r3
     f24:	20 61       	ori	r18, 0x10	; 16
     f26:	1d c0       	rjmp	.+58     	; 0xf62 <vfprintf+0xb0>
     f28:	8d 32       	cpi	r24, 0x2D	; 45
     f2a:	61 f0       	breq	.+24     	; 0xf44 <vfprintf+0x92>
     f2c:	80 33       	cpi	r24, 0x30	; 48
     f2e:	69 f4       	brne	.+26     	; 0xf4a <vfprintf+0x98>
     f30:	23 2d       	mov	r18, r3
     f32:	21 60       	ori	r18, 0x01	; 1
     f34:	16 c0       	rjmp	.+44     	; 0xf62 <vfprintf+0xb0>
     f36:	83 2d       	mov	r24, r3
     f38:	82 60       	ori	r24, 0x02	; 2
     f3a:	38 2e       	mov	r3, r24
     f3c:	e3 2d       	mov	r30, r3
     f3e:	e4 60       	ori	r30, 0x04	; 4
     f40:	3e 2e       	mov	r3, r30
     f42:	2a c0       	rjmp	.+84     	; 0xf98 <vfprintf+0xe6>
     f44:	f3 2d       	mov	r31, r3
     f46:	f8 60       	ori	r31, 0x08	; 8
     f48:	1d c0       	rjmp	.+58     	; 0xf84 <vfprintf+0xd2>
     f4a:	37 fc       	sbrc	r3, 7
     f4c:	2d c0       	rjmp	.+90     	; 0xfa8 <vfprintf+0xf6>
     f4e:	20 ed       	ldi	r18, 0xD0	; 208
     f50:	28 0f       	add	r18, r24
     f52:	2a 30       	cpi	r18, 0x0A	; 10
     f54:	40 f0       	brcs	.+16     	; 0xf66 <vfprintf+0xb4>
     f56:	8e 32       	cpi	r24, 0x2E	; 46
     f58:	b9 f4       	brne	.+46     	; 0xf88 <vfprintf+0xd6>
     f5a:	36 fc       	sbrc	r3, 6
     f5c:	81 c1       	rjmp	.+770    	; 0x1260 <vfprintf+0x3ae>
     f5e:	23 2d       	mov	r18, r3
     f60:	20 64       	ori	r18, 0x40	; 64
     f62:	32 2e       	mov	r3, r18
     f64:	19 c0       	rjmp	.+50     	; 0xf98 <vfprintf+0xe6>
     f66:	36 fe       	sbrs	r3, 6
     f68:	06 c0       	rjmp	.+12     	; 0xf76 <vfprintf+0xc4>
     f6a:	8a e0       	ldi	r24, 0x0A	; 10
     f6c:	98 9e       	mul	r9, r24
     f6e:	20 0d       	add	r18, r0
     f70:	11 24       	eor	r1, r1
     f72:	92 2e       	mov	r9, r18
     f74:	11 c0       	rjmp	.+34     	; 0xf98 <vfprintf+0xe6>
     f76:	ea e0       	ldi	r30, 0x0A	; 10
     f78:	2e 9e       	mul	r2, r30
     f7a:	20 0d       	add	r18, r0
     f7c:	11 24       	eor	r1, r1
     f7e:	22 2e       	mov	r2, r18
     f80:	f3 2d       	mov	r31, r3
     f82:	f0 62       	ori	r31, 0x20	; 32
     f84:	3f 2e       	mov	r3, r31
     f86:	08 c0       	rjmp	.+16     	; 0xf98 <vfprintf+0xe6>
     f88:	8c 36       	cpi	r24, 0x6C	; 108
     f8a:	21 f4       	brne	.+8      	; 0xf94 <vfprintf+0xe2>
     f8c:	83 2d       	mov	r24, r3
     f8e:	80 68       	ori	r24, 0x80	; 128
     f90:	38 2e       	mov	r3, r24
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <vfprintf+0xe6>
     f94:	88 36       	cpi	r24, 0x68	; 104
     f96:	41 f4       	brne	.+16     	; 0xfa8 <vfprintf+0xf6>
     f98:	f7 01       	movw	r30, r14
     f9a:	93 fd       	sbrc	r25, 3
     f9c:	85 91       	lpm	r24, Z+
     f9e:	93 ff       	sbrs	r25, 3
     fa0:	81 91       	ld	r24, Z+
     fa2:	7f 01       	movw	r14, r30
     fa4:	81 11       	cpse	r24, r1
     fa6:	b3 cf       	rjmp	.-154    	; 0xf0e <vfprintf+0x5c>
     fa8:	98 2f       	mov	r25, r24
     faa:	9f 7d       	andi	r25, 0xDF	; 223
     fac:	95 54       	subi	r25, 0x45	; 69
     fae:	93 30       	cpi	r25, 0x03	; 3
     fb0:	28 f4       	brcc	.+10     	; 0xfbc <vfprintf+0x10a>
     fb2:	0c 5f       	subi	r16, 0xFC	; 252
     fb4:	1f 4f       	sbci	r17, 0xFF	; 255
     fb6:	9f e3       	ldi	r25, 0x3F	; 63
     fb8:	99 83       	std	Y+1, r25	; 0x01
     fba:	0d c0       	rjmp	.+26     	; 0xfd6 <vfprintf+0x124>
     fbc:	83 36       	cpi	r24, 0x63	; 99
     fbe:	31 f0       	breq	.+12     	; 0xfcc <vfprintf+0x11a>
     fc0:	83 37       	cpi	r24, 0x73	; 115
     fc2:	71 f0       	breq	.+28     	; 0xfe0 <vfprintf+0x12e>
     fc4:	83 35       	cpi	r24, 0x53	; 83
     fc6:	09 f0       	breq	.+2      	; 0xfca <vfprintf+0x118>
     fc8:	59 c0       	rjmp	.+178    	; 0x107c <vfprintf+0x1ca>
     fca:	21 c0       	rjmp	.+66     	; 0x100e <vfprintf+0x15c>
     fcc:	f8 01       	movw	r30, r16
     fce:	80 81       	ld	r24, Z
     fd0:	89 83       	std	Y+1, r24	; 0x01
     fd2:	0e 5f       	subi	r16, 0xFE	; 254
     fd4:	1f 4f       	sbci	r17, 0xFF	; 255
     fd6:	88 24       	eor	r8, r8
     fd8:	83 94       	inc	r8
     fda:	91 2c       	mov	r9, r1
     fdc:	53 01       	movw	r10, r6
     fde:	13 c0       	rjmp	.+38     	; 0x1006 <vfprintf+0x154>
     fe0:	28 01       	movw	r4, r16
     fe2:	f2 e0       	ldi	r31, 0x02	; 2
     fe4:	4f 0e       	add	r4, r31
     fe6:	51 1c       	adc	r5, r1
     fe8:	f8 01       	movw	r30, r16
     fea:	a0 80       	ld	r10, Z
     fec:	b1 80       	ldd	r11, Z+1	; 0x01
     fee:	36 fe       	sbrs	r3, 6
     ff0:	03 c0       	rjmp	.+6      	; 0xff8 <vfprintf+0x146>
     ff2:	69 2d       	mov	r22, r9
     ff4:	70 e0       	ldi	r23, 0x00	; 0
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <vfprintf+0x14a>
     ff8:	6f ef       	ldi	r22, 0xFF	; 255
     ffa:	7f ef       	ldi	r23, 0xFF	; 255
     ffc:	c5 01       	movw	r24, r10
     ffe:	0e 94 89 0a 	call	0x1512	; 0x1512 <strnlen>
    1002:	4c 01       	movw	r8, r24
    1004:	82 01       	movw	r16, r4
    1006:	f3 2d       	mov	r31, r3
    1008:	ff 77       	andi	r31, 0x7F	; 127
    100a:	3f 2e       	mov	r3, r31
    100c:	16 c0       	rjmp	.+44     	; 0x103a <vfprintf+0x188>
    100e:	28 01       	movw	r4, r16
    1010:	22 e0       	ldi	r18, 0x02	; 2
    1012:	42 0e       	add	r4, r18
    1014:	51 1c       	adc	r5, r1
    1016:	f8 01       	movw	r30, r16
    1018:	a0 80       	ld	r10, Z
    101a:	b1 80       	ldd	r11, Z+1	; 0x01
    101c:	36 fe       	sbrs	r3, 6
    101e:	03 c0       	rjmp	.+6      	; 0x1026 <vfprintf+0x174>
    1020:	69 2d       	mov	r22, r9
    1022:	70 e0       	ldi	r23, 0x00	; 0
    1024:	02 c0       	rjmp	.+4      	; 0x102a <vfprintf+0x178>
    1026:	6f ef       	ldi	r22, 0xFF	; 255
    1028:	7f ef       	ldi	r23, 0xFF	; 255
    102a:	c5 01       	movw	r24, r10
    102c:	0e 94 77 0a 	call	0x14ee	; 0x14ee <strnlen_P>
    1030:	4c 01       	movw	r8, r24
    1032:	f3 2d       	mov	r31, r3
    1034:	f0 68       	ori	r31, 0x80	; 128
    1036:	3f 2e       	mov	r3, r31
    1038:	82 01       	movw	r16, r4
    103a:	33 fc       	sbrc	r3, 3
    103c:	1b c0       	rjmp	.+54     	; 0x1074 <vfprintf+0x1c2>
    103e:	82 2d       	mov	r24, r2
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	88 16       	cp	r8, r24
    1044:	99 06       	cpc	r9, r25
    1046:	b0 f4       	brcc	.+44     	; 0x1074 <vfprintf+0x1c2>
    1048:	b6 01       	movw	r22, r12
    104a:	80 e2       	ldi	r24, 0x20	; 32
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	0e 94 94 0a 	call	0x1528	; 0x1528 <fputc>
    1052:	2a 94       	dec	r2
    1054:	f4 cf       	rjmp	.-24     	; 0x103e <vfprintf+0x18c>
    1056:	f5 01       	movw	r30, r10
    1058:	37 fc       	sbrc	r3, 7
    105a:	85 91       	lpm	r24, Z+
    105c:	37 fe       	sbrs	r3, 7
    105e:	81 91       	ld	r24, Z+
    1060:	5f 01       	movw	r10, r30
    1062:	b6 01       	movw	r22, r12
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	0e 94 94 0a 	call	0x1528	; 0x1528 <fputc>
    106a:	21 10       	cpse	r2, r1
    106c:	2a 94       	dec	r2
    106e:	21 e0       	ldi	r18, 0x01	; 1
    1070:	82 1a       	sub	r8, r18
    1072:	91 08       	sbc	r9, r1
    1074:	81 14       	cp	r8, r1
    1076:	91 04       	cpc	r9, r1
    1078:	71 f7       	brne	.-36     	; 0x1056 <vfprintf+0x1a4>
    107a:	e8 c0       	rjmp	.+464    	; 0x124c <vfprintf+0x39a>
    107c:	84 36       	cpi	r24, 0x64	; 100
    107e:	11 f0       	breq	.+4      	; 0x1084 <vfprintf+0x1d2>
    1080:	89 36       	cpi	r24, 0x69	; 105
    1082:	41 f5       	brne	.+80     	; 0x10d4 <vfprintf+0x222>
    1084:	f8 01       	movw	r30, r16
    1086:	37 fe       	sbrs	r3, 7
    1088:	07 c0       	rjmp	.+14     	; 0x1098 <vfprintf+0x1e6>
    108a:	60 81       	ld	r22, Z
    108c:	71 81       	ldd	r23, Z+1	; 0x01
    108e:	82 81       	ldd	r24, Z+2	; 0x02
    1090:	93 81       	ldd	r25, Z+3	; 0x03
    1092:	0c 5f       	subi	r16, 0xFC	; 252
    1094:	1f 4f       	sbci	r17, 0xFF	; 255
    1096:	08 c0       	rjmp	.+16     	; 0x10a8 <vfprintf+0x1f6>
    1098:	60 81       	ld	r22, Z
    109a:	71 81       	ldd	r23, Z+1	; 0x01
    109c:	07 2e       	mov	r0, r23
    109e:	00 0c       	add	r0, r0
    10a0:	88 0b       	sbc	r24, r24
    10a2:	99 0b       	sbc	r25, r25
    10a4:	0e 5f       	subi	r16, 0xFE	; 254
    10a6:	1f 4f       	sbci	r17, 0xFF	; 255
    10a8:	f3 2d       	mov	r31, r3
    10aa:	ff 76       	andi	r31, 0x6F	; 111
    10ac:	3f 2e       	mov	r3, r31
    10ae:	97 ff       	sbrs	r25, 7
    10b0:	09 c0       	rjmp	.+18     	; 0x10c4 <vfprintf+0x212>
    10b2:	90 95       	com	r25
    10b4:	80 95       	com	r24
    10b6:	70 95       	com	r23
    10b8:	61 95       	neg	r22
    10ba:	7f 4f       	sbci	r23, 0xFF	; 255
    10bc:	8f 4f       	sbci	r24, 0xFF	; 255
    10be:	9f 4f       	sbci	r25, 0xFF	; 255
    10c0:	f0 68       	ori	r31, 0x80	; 128
    10c2:	3f 2e       	mov	r3, r31
    10c4:	2a e0       	ldi	r18, 0x0A	; 10
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	a3 01       	movw	r20, r6
    10ca:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__ultoa_invert>
    10ce:	88 2e       	mov	r8, r24
    10d0:	86 18       	sub	r8, r6
    10d2:	45 c0       	rjmp	.+138    	; 0x115e <vfprintf+0x2ac>
    10d4:	85 37       	cpi	r24, 0x75	; 117
    10d6:	31 f4       	brne	.+12     	; 0x10e4 <vfprintf+0x232>
    10d8:	23 2d       	mov	r18, r3
    10da:	2f 7e       	andi	r18, 0xEF	; 239
    10dc:	b2 2e       	mov	r11, r18
    10de:	2a e0       	ldi	r18, 0x0A	; 10
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	25 c0       	rjmp	.+74     	; 0x112e <vfprintf+0x27c>
    10e4:	93 2d       	mov	r25, r3
    10e6:	99 7f       	andi	r25, 0xF9	; 249
    10e8:	b9 2e       	mov	r11, r25
    10ea:	8f 36       	cpi	r24, 0x6F	; 111
    10ec:	c1 f0       	breq	.+48     	; 0x111e <vfprintf+0x26c>
    10ee:	18 f4       	brcc	.+6      	; 0x10f6 <vfprintf+0x244>
    10f0:	88 35       	cpi	r24, 0x58	; 88
    10f2:	79 f0       	breq	.+30     	; 0x1112 <vfprintf+0x260>
    10f4:	b5 c0       	rjmp	.+362    	; 0x1260 <vfprintf+0x3ae>
    10f6:	80 37       	cpi	r24, 0x70	; 112
    10f8:	19 f0       	breq	.+6      	; 0x1100 <vfprintf+0x24e>
    10fa:	88 37       	cpi	r24, 0x78	; 120
    10fc:	21 f0       	breq	.+8      	; 0x1106 <vfprintf+0x254>
    10fe:	b0 c0       	rjmp	.+352    	; 0x1260 <vfprintf+0x3ae>
    1100:	e9 2f       	mov	r30, r25
    1102:	e0 61       	ori	r30, 0x10	; 16
    1104:	be 2e       	mov	r11, r30
    1106:	b4 fe       	sbrs	r11, 4
    1108:	0d c0       	rjmp	.+26     	; 0x1124 <vfprintf+0x272>
    110a:	fb 2d       	mov	r31, r11
    110c:	f4 60       	ori	r31, 0x04	; 4
    110e:	bf 2e       	mov	r11, r31
    1110:	09 c0       	rjmp	.+18     	; 0x1124 <vfprintf+0x272>
    1112:	34 fe       	sbrs	r3, 4
    1114:	0a c0       	rjmp	.+20     	; 0x112a <vfprintf+0x278>
    1116:	29 2f       	mov	r18, r25
    1118:	26 60       	ori	r18, 0x06	; 6
    111a:	b2 2e       	mov	r11, r18
    111c:	06 c0       	rjmp	.+12     	; 0x112a <vfprintf+0x278>
    111e:	28 e0       	ldi	r18, 0x08	; 8
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	05 c0       	rjmp	.+10     	; 0x112e <vfprintf+0x27c>
    1124:	20 e1       	ldi	r18, 0x10	; 16
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	02 c0       	rjmp	.+4      	; 0x112e <vfprintf+0x27c>
    112a:	20 e1       	ldi	r18, 0x10	; 16
    112c:	32 e0       	ldi	r19, 0x02	; 2
    112e:	f8 01       	movw	r30, r16
    1130:	b7 fe       	sbrs	r11, 7
    1132:	07 c0       	rjmp	.+14     	; 0x1142 <vfprintf+0x290>
    1134:	60 81       	ld	r22, Z
    1136:	71 81       	ldd	r23, Z+1	; 0x01
    1138:	82 81       	ldd	r24, Z+2	; 0x02
    113a:	93 81       	ldd	r25, Z+3	; 0x03
    113c:	0c 5f       	subi	r16, 0xFC	; 252
    113e:	1f 4f       	sbci	r17, 0xFF	; 255
    1140:	06 c0       	rjmp	.+12     	; 0x114e <vfprintf+0x29c>
    1142:	60 81       	ld	r22, Z
    1144:	71 81       	ldd	r23, Z+1	; 0x01
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	0e 5f       	subi	r16, 0xFE	; 254
    114c:	1f 4f       	sbci	r17, 0xFF	; 255
    114e:	a3 01       	movw	r20, r6
    1150:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__ultoa_invert>
    1154:	88 2e       	mov	r8, r24
    1156:	86 18       	sub	r8, r6
    1158:	fb 2d       	mov	r31, r11
    115a:	ff 77       	andi	r31, 0x7F	; 127
    115c:	3f 2e       	mov	r3, r31
    115e:	36 fe       	sbrs	r3, 6
    1160:	0d c0       	rjmp	.+26     	; 0x117c <vfprintf+0x2ca>
    1162:	23 2d       	mov	r18, r3
    1164:	2e 7f       	andi	r18, 0xFE	; 254
    1166:	a2 2e       	mov	r10, r18
    1168:	89 14       	cp	r8, r9
    116a:	58 f4       	brcc	.+22     	; 0x1182 <vfprintf+0x2d0>
    116c:	34 fe       	sbrs	r3, 4
    116e:	0b c0       	rjmp	.+22     	; 0x1186 <vfprintf+0x2d4>
    1170:	32 fc       	sbrc	r3, 2
    1172:	09 c0       	rjmp	.+18     	; 0x1186 <vfprintf+0x2d4>
    1174:	83 2d       	mov	r24, r3
    1176:	8e 7e       	andi	r24, 0xEE	; 238
    1178:	a8 2e       	mov	r10, r24
    117a:	05 c0       	rjmp	.+10     	; 0x1186 <vfprintf+0x2d4>
    117c:	b8 2c       	mov	r11, r8
    117e:	a3 2c       	mov	r10, r3
    1180:	03 c0       	rjmp	.+6      	; 0x1188 <vfprintf+0x2d6>
    1182:	b8 2c       	mov	r11, r8
    1184:	01 c0       	rjmp	.+2      	; 0x1188 <vfprintf+0x2d6>
    1186:	b9 2c       	mov	r11, r9
    1188:	a4 fe       	sbrs	r10, 4
    118a:	0f c0       	rjmp	.+30     	; 0x11aa <vfprintf+0x2f8>
    118c:	fe 01       	movw	r30, r28
    118e:	e8 0d       	add	r30, r8
    1190:	f1 1d       	adc	r31, r1
    1192:	80 81       	ld	r24, Z
    1194:	80 33       	cpi	r24, 0x30	; 48
    1196:	21 f4       	brne	.+8      	; 0x11a0 <vfprintf+0x2ee>
    1198:	9a 2d       	mov	r25, r10
    119a:	99 7e       	andi	r25, 0xE9	; 233
    119c:	a9 2e       	mov	r10, r25
    119e:	09 c0       	rjmp	.+18     	; 0x11b2 <vfprintf+0x300>
    11a0:	a2 fe       	sbrs	r10, 2
    11a2:	06 c0       	rjmp	.+12     	; 0x11b0 <vfprintf+0x2fe>
    11a4:	b3 94       	inc	r11
    11a6:	b3 94       	inc	r11
    11a8:	04 c0       	rjmp	.+8      	; 0x11b2 <vfprintf+0x300>
    11aa:	8a 2d       	mov	r24, r10
    11ac:	86 78       	andi	r24, 0x86	; 134
    11ae:	09 f0       	breq	.+2      	; 0x11b2 <vfprintf+0x300>
    11b0:	b3 94       	inc	r11
    11b2:	a3 fc       	sbrc	r10, 3
    11b4:	11 c0       	rjmp	.+34     	; 0x11d8 <vfprintf+0x326>
    11b6:	a0 fe       	sbrs	r10, 0
    11b8:	06 c0       	rjmp	.+12     	; 0x11c6 <vfprintf+0x314>
    11ba:	b2 14       	cp	r11, r2
    11bc:	88 f4       	brcc	.+34     	; 0x11e0 <vfprintf+0x32e>
    11be:	28 0c       	add	r2, r8
    11c0:	92 2c       	mov	r9, r2
    11c2:	9b 18       	sub	r9, r11
    11c4:	0e c0       	rjmp	.+28     	; 0x11e2 <vfprintf+0x330>
    11c6:	b2 14       	cp	r11, r2
    11c8:	60 f4       	brcc	.+24     	; 0x11e2 <vfprintf+0x330>
    11ca:	b6 01       	movw	r22, r12
    11cc:	80 e2       	ldi	r24, 0x20	; 32
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	0e 94 94 0a 	call	0x1528	; 0x1528 <fputc>
    11d4:	b3 94       	inc	r11
    11d6:	f7 cf       	rjmp	.-18     	; 0x11c6 <vfprintf+0x314>
    11d8:	b2 14       	cp	r11, r2
    11da:	18 f4       	brcc	.+6      	; 0x11e2 <vfprintf+0x330>
    11dc:	2b 18       	sub	r2, r11
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <vfprintf+0x332>
    11e0:	98 2c       	mov	r9, r8
    11e2:	21 2c       	mov	r2, r1
    11e4:	a4 fe       	sbrs	r10, 4
    11e6:	10 c0       	rjmp	.+32     	; 0x1208 <vfprintf+0x356>
    11e8:	b6 01       	movw	r22, r12
    11ea:	80 e3       	ldi	r24, 0x30	; 48
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	0e 94 94 0a 	call	0x1528	; 0x1528 <fputc>
    11f2:	a2 fe       	sbrs	r10, 2
    11f4:	17 c0       	rjmp	.+46     	; 0x1224 <vfprintf+0x372>
    11f6:	a1 fc       	sbrc	r10, 1
    11f8:	03 c0       	rjmp	.+6      	; 0x1200 <vfprintf+0x34e>
    11fa:	88 e7       	ldi	r24, 0x78	; 120
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <vfprintf+0x352>
    1200:	88 e5       	ldi	r24, 0x58	; 88
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	b6 01       	movw	r22, r12
    1206:	0c c0       	rjmp	.+24     	; 0x1220 <vfprintf+0x36e>
    1208:	8a 2d       	mov	r24, r10
    120a:	86 78       	andi	r24, 0x86	; 134
    120c:	59 f0       	breq	.+22     	; 0x1224 <vfprintf+0x372>
    120e:	a1 fe       	sbrs	r10, 1
    1210:	02 c0       	rjmp	.+4      	; 0x1216 <vfprintf+0x364>
    1212:	8b e2       	ldi	r24, 0x2B	; 43
    1214:	01 c0       	rjmp	.+2      	; 0x1218 <vfprintf+0x366>
    1216:	80 e2       	ldi	r24, 0x20	; 32
    1218:	a7 fc       	sbrc	r10, 7
    121a:	8d e2       	ldi	r24, 0x2D	; 45
    121c:	b6 01       	movw	r22, r12
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	0e 94 94 0a 	call	0x1528	; 0x1528 <fputc>
    1224:	89 14       	cp	r8, r9
    1226:	38 f4       	brcc	.+14     	; 0x1236 <vfprintf+0x384>
    1228:	b6 01       	movw	r22, r12
    122a:	80 e3       	ldi	r24, 0x30	; 48
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	0e 94 94 0a 	call	0x1528	; 0x1528 <fputc>
    1232:	9a 94       	dec	r9
    1234:	f7 cf       	rjmp	.-18     	; 0x1224 <vfprintf+0x372>
    1236:	8a 94       	dec	r8
    1238:	f3 01       	movw	r30, r6
    123a:	e8 0d       	add	r30, r8
    123c:	f1 1d       	adc	r31, r1
    123e:	80 81       	ld	r24, Z
    1240:	b6 01       	movw	r22, r12
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	0e 94 94 0a 	call	0x1528	; 0x1528 <fputc>
    1248:	81 10       	cpse	r8, r1
    124a:	f5 cf       	rjmp	.-22     	; 0x1236 <vfprintf+0x384>
    124c:	22 20       	and	r2, r2
    124e:	09 f4       	brne	.+2      	; 0x1252 <vfprintf+0x3a0>
    1250:	42 ce       	rjmp	.-892    	; 0xed6 <vfprintf+0x24>
    1252:	b6 01       	movw	r22, r12
    1254:	80 e2       	ldi	r24, 0x20	; 32
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	0e 94 94 0a 	call	0x1528	; 0x1528 <fputc>
    125c:	2a 94       	dec	r2
    125e:	f6 cf       	rjmp	.-20     	; 0x124c <vfprintf+0x39a>
    1260:	f6 01       	movw	r30, r12
    1262:	86 81       	ldd	r24, Z+6	; 0x06
    1264:	97 81       	ldd	r25, Z+7	; 0x07
    1266:	02 c0       	rjmp	.+4      	; 0x126c <vfprintf+0x3ba>
    1268:	8f ef       	ldi	r24, 0xFF	; 255
    126a:	9f ef       	ldi	r25, 0xFF	; 255
    126c:	2b 96       	adiw	r28, 0x0b	; 11
    126e:	e2 e1       	ldi	r30, 0x12	; 18
    1270:	0c 94 4a 0b 	jmp	0x1694	; 0x1694 <__epilogue_restores__>

00001274 <calloc>:
    1274:	0f 93       	push	r16
    1276:	1f 93       	push	r17
    1278:	cf 93       	push	r28
    127a:	df 93       	push	r29
    127c:	86 9f       	mul	r24, r22
    127e:	80 01       	movw	r16, r0
    1280:	87 9f       	mul	r24, r23
    1282:	10 0d       	add	r17, r0
    1284:	96 9f       	mul	r25, r22
    1286:	10 0d       	add	r17, r0
    1288:	11 24       	eor	r1, r1
    128a:	c8 01       	movw	r24, r16
    128c:	0e 94 56 09 	call	0x12ac	; 0x12ac <malloc>
    1290:	ec 01       	movw	r28, r24
    1292:	00 97       	sbiw	r24, 0x00	; 0
    1294:	29 f0       	breq	.+10     	; 0x12a0 <calloc+0x2c>
    1296:	a8 01       	movw	r20, r16
    1298:	60 e0       	ldi	r22, 0x00	; 0
    129a:	70 e0       	ldi	r23, 0x00	; 0
    129c:	0e 94 82 0a 	call	0x1504	; 0x1504 <memset>
    12a0:	ce 01       	movw	r24, r28
    12a2:	df 91       	pop	r29
    12a4:	cf 91       	pop	r28
    12a6:	1f 91       	pop	r17
    12a8:	0f 91       	pop	r16
    12aa:	08 95       	ret

000012ac <malloc>:
    12ac:	0f 93       	push	r16
    12ae:	1f 93       	push	r17
    12b0:	cf 93       	push	r28
    12b2:	df 93       	push	r29
    12b4:	82 30       	cpi	r24, 0x02	; 2
    12b6:	91 05       	cpc	r25, r1
    12b8:	10 f4       	brcc	.+4      	; 0x12be <malloc+0x12>
    12ba:	82 e0       	ldi	r24, 0x02	; 2
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	e0 91 22 06 	lds	r30, 0x0622	; 0x800622 <__flp>
    12c2:	f0 91 23 06 	lds	r31, 0x0623	; 0x800623 <__flp+0x1>
    12c6:	20 e0       	ldi	r18, 0x00	; 0
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	a0 e0       	ldi	r26, 0x00	; 0
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	30 97       	sbiw	r30, 0x00	; 0
    12d0:	19 f1       	breq	.+70     	; 0x1318 <malloc+0x6c>
    12d2:	40 81       	ld	r20, Z
    12d4:	51 81       	ldd	r21, Z+1	; 0x01
    12d6:	02 81       	ldd	r16, Z+2	; 0x02
    12d8:	13 81       	ldd	r17, Z+3	; 0x03
    12da:	48 17       	cp	r20, r24
    12dc:	59 07       	cpc	r21, r25
    12de:	c8 f0       	brcs	.+50     	; 0x1312 <malloc+0x66>
    12e0:	84 17       	cp	r24, r20
    12e2:	95 07       	cpc	r25, r21
    12e4:	69 f4       	brne	.+26     	; 0x1300 <malloc+0x54>
    12e6:	10 97       	sbiw	r26, 0x00	; 0
    12e8:	31 f0       	breq	.+12     	; 0x12f6 <malloc+0x4a>
    12ea:	12 96       	adiw	r26, 0x02	; 2
    12ec:	0c 93       	st	X, r16
    12ee:	12 97       	sbiw	r26, 0x02	; 2
    12f0:	13 96       	adiw	r26, 0x03	; 3
    12f2:	1c 93       	st	X, r17
    12f4:	27 c0       	rjmp	.+78     	; 0x1344 <malloc+0x98>
    12f6:	00 93 22 06 	sts	0x0622, r16	; 0x800622 <__flp>
    12fa:	10 93 23 06 	sts	0x0623, r17	; 0x800623 <__flp+0x1>
    12fe:	22 c0       	rjmp	.+68     	; 0x1344 <malloc+0x98>
    1300:	21 15       	cp	r18, r1
    1302:	31 05       	cpc	r19, r1
    1304:	19 f0       	breq	.+6      	; 0x130c <malloc+0x60>
    1306:	42 17       	cp	r20, r18
    1308:	53 07       	cpc	r21, r19
    130a:	18 f4       	brcc	.+6      	; 0x1312 <malloc+0x66>
    130c:	9a 01       	movw	r18, r20
    130e:	bd 01       	movw	r22, r26
    1310:	ef 01       	movw	r28, r30
    1312:	df 01       	movw	r26, r30
    1314:	f8 01       	movw	r30, r16
    1316:	db cf       	rjmp	.-74     	; 0x12ce <malloc+0x22>
    1318:	21 15       	cp	r18, r1
    131a:	31 05       	cpc	r19, r1
    131c:	f9 f0       	breq	.+62     	; 0x135c <malloc+0xb0>
    131e:	28 1b       	sub	r18, r24
    1320:	39 0b       	sbc	r19, r25
    1322:	24 30       	cpi	r18, 0x04	; 4
    1324:	31 05       	cpc	r19, r1
    1326:	80 f4       	brcc	.+32     	; 0x1348 <malloc+0x9c>
    1328:	8a 81       	ldd	r24, Y+2	; 0x02
    132a:	9b 81       	ldd	r25, Y+3	; 0x03
    132c:	61 15       	cp	r22, r1
    132e:	71 05       	cpc	r23, r1
    1330:	21 f0       	breq	.+8      	; 0x133a <malloc+0x8e>
    1332:	fb 01       	movw	r30, r22
    1334:	93 83       	std	Z+3, r25	; 0x03
    1336:	82 83       	std	Z+2, r24	; 0x02
    1338:	04 c0       	rjmp	.+8      	; 0x1342 <malloc+0x96>
    133a:	90 93 23 06 	sts	0x0623, r25	; 0x800623 <__flp+0x1>
    133e:	80 93 22 06 	sts	0x0622, r24	; 0x800622 <__flp>
    1342:	fe 01       	movw	r30, r28
    1344:	32 96       	adiw	r30, 0x02	; 2
    1346:	44 c0       	rjmp	.+136    	; 0x13d0 <malloc+0x124>
    1348:	fe 01       	movw	r30, r28
    134a:	e2 0f       	add	r30, r18
    134c:	f3 1f       	adc	r31, r19
    134e:	81 93       	st	Z+, r24
    1350:	91 93       	st	Z+, r25
    1352:	22 50       	subi	r18, 0x02	; 2
    1354:	31 09       	sbc	r19, r1
    1356:	39 83       	std	Y+1, r19	; 0x01
    1358:	28 83       	st	Y, r18
    135a:	3a c0       	rjmp	.+116    	; 0x13d0 <malloc+0x124>
    135c:	20 91 20 06 	lds	r18, 0x0620	; 0x800620 <__brkval>
    1360:	30 91 21 06 	lds	r19, 0x0621	; 0x800621 <__brkval+0x1>
    1364:	23 2b       	or	r18, r19
    1366:	41 f4       	brne	.+16     	; 0x1378 <malloc+0xcc>
    1368:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    136c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1370:	30 93 21 06 	sts	0x0621, r19	; 0x800621 <__brkval+0x1>
    1374:	20 93 20 06 	sts	0x0620, r18	; 0x800620 <__brkval>
    1378:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    137c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1380:	21 15       	cp	r18, r1
    1382:	31 05       	cpc	r19, r1
    1384:	41 f4       	brne	.+16     	; 0x1396 <malloc+0xea>
    1386:	2d b7       	in	r18, 0x3d	; 61
    1388:	3e b7       	in	r19, 0x3e	; 62
    138a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    138e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1392:	24 1b       	sub	r18, r20
    1394:	35 0b       	sbc	r19, r21
    1396:	e0 91 20 06 	lds	r30, 0x0620	; 0x800620 <__brkval>
    139a:	f0 91 21 06 	lds	r31, 0x0621	; 0x800621 <__brkval+0x1>
    139e:	e2 17       	cp	r30, r18
    13a0:	f3 07       	cpc	r31, r19
    13a2:	a0 f4       	brcc	.+40     	; 0x13cc <malloc+0x120>
    13a4:	2e 1b       	sub	r18, r30
    13a6:	3f 0b       	sbc	r19, r31
    13a8:	28 17       	cp	r18, r24
    13aa:	39 07       	cpc	r19, r25
    13ac:	78 f0       	brcs	.+30     	; 0x13cc <malloc+0x120>
    13ae:	ac 01       	movw	r20, r24
    13b0:	4e 5f       	subi	r20, 0xFE	; 254
    13b2:	5f 4f       	sbci	r21, 0xFF	; 255
    13b4:	24 17       	cp	r18, r20
    13b6:	35 07       	cpc	r19, r21
    13b8:	48 f0       	brcs	.+18     	; 0x13cc <malloc+0x120>
    13ba:	4e 0f       	add	r20, r30
    13bc:	5f 1f       	adc	r21, r31
    13be:	50 93 21 06 	sts	0x0621, r21	; 0x800621 <__brkval+0x1>
    13c2:	40 93 20 06 	sts	0x0620, r20	; 0x800620 <__brkval>
    13c6:	81 93       	st	Z+, r24
    13c8:	91 93       	st	Z+, r25
    13ca:	02 c0       	rjmp	.+4      	; 0x13d0 <malloc+0x124>
    13cc:	e0 e0       	ldi	r30, 0x00	; 0
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	cf 01       	movw	r24, r30
    13d2:	df 91       	pop	r29
    13d4:	cf 91       	pop	r28
    13d6:	1f 91       	pop	r17
    13d8:	0f 91       	pop	r16
    13da:	08 95       	ret

000013dc <free>:
    13dc:	cf 93       	push	r28
    13de:	df 93       	push	r29
    13e0:	00 97       	sbiw	r24, 0x00	; 0
    13e2:	09 f4       	brne	.+2      	; 0x13e6 <free+0xa>
    13e4:	81 c0       	rjmp	.+258    	; 0x14e8 <free+0x10c>
    13e6:	fc 01       	movw	r30, r24
    13e8:	32 97       	sbiw	r30, 0x02	; 2
    13ea:	13 82       	std	Z+3, r1	; 0x03
    13ec:	12 82       	std	Z+2, r1	; 0x02
    13ee:	a0 91 22 06 	lds	r26, 0x0622	; 0x800622 <__flp>
    13f2:	b0 91 23 06 	lds	r27, 0x0623	; 0x800623 <__flp+0x1>
    13f6:	10 97       	sbiw	r26, 0x00	; 0
    13f8:	81 f4       	brne	.+32     	; 0x141a <free+0x3e>
    13fa:	20 81       	ld	r18, Z
    13fc:	31 81       	ldd	r19, Z+1	; 0x01
    13fe:	82 0f       	add	r24, r18
    1400:	93 1f       	adc	r25, r19
    1402:	20 91 20 06 	lds	r18, 0x0620	; 0x800620 <__brkval>
    1406:	30 91 21 06 	lds	r19, 0x0621	; 0x800621 <__brkval+0x1>
    140a:	28 17       	cp	r18, r24
    140c:	39 07       	cpc	r19, r25
    140e:	51 f5       	brne	.+84     	; 0x1464 <free+0x88>
    1410:	f0 93 21 06 	sts	0x0621, r31	; 0x800621 <__brkval+0x1>
    1414:	e0 93 20 06 	sts	0x0620, r30	; 0x800620 <__brkval>
    1418:	67 c0       	rjmp	.+206    	; 0x14e8 <free+0x10c>
    141a:	ed 01       	movw	r28, r26
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	ce 17       	cp	r28, r30
    1422:	df 07       	cpc	r29, r31
    1424:	40 f4       	brcc	.+16     	; 0x1436 <free+0x5a>
    1426:	4a 81       	ldd	r20, Y+2	; 0x02
    1428:	5b 81       	ldd	r21, Y+3	; 0x03
    142a:	9e 01       	movw	r18, r28
    142c:	41 15       	cp	r20, r1
    142e:	51 05       	cpc	r21, r1
    1430:	f1 f0       	breq	.+60     	; 0x146e <free+0x92>
    1432:	ea 01       	movw	r28, r20
    1434:	f5 cf       	rjmp	.-22     	; 0x1420 <free+0x44>
    1436:	d3 83       	std	Z+3, r29	; 0x03
    1438:	c2 83       	std	Z+2, r28	; 0x02
    143a:	40 81       	ld	r20, Z
    143c:	51 81       	ldd	r21, Z+1	; 0x01
    143e:	84 0f       	add	r24, r20
    1440:	95 1f       	adc	r25, r21
    1442:	c8 17       	cp	r28, r24
    1444:	d9 07       	cpc	r29, r25
    1446:	59 f4       	brne	.+22     	; 0x145e <free+0x82>
    1448:	88 81       	ld	r24, Y
    144a:	99 81       	ldd	r25, Y+1	; 0x01
    144c:	84 0f       	add	r24, r20
    144e:	95 1f       	adc	r25, r21
    1450:	02 96       	adiw	r24, 0x02	; 2
    1452:	91 83       	std	Z+1, r25	; 0x01
    1454:	80 83       	st	Z, r24
    1456:	8a 81       	ldd	r24, Y+2	; 0x02
    1458:	9b 81       	ldd	r25, Y+3	; 0x03
    145a:	93 83       	std	Z+3, r25	; 0x03
    145c:	82 83       	std	Z+2, r24	; 0x02
    145e:	21 15       	cp	r18, r1
    1460:	31 05       	cpc	r19, r1
    1462:	29 f4       	brne	.+10     	; 0x146e <free+0x92>
    1464:	f0 93 23 06 	sts	0x0623, r31	; 0x800623 <__flp+0x1>
    1468:	e0 93 22 06 	sts	0x0622, r30	; 0x800622 <__flp>
    146c:	3d c0       	rjmp	.+122    	; 0x14e8 <free+0x10c>
    146e:	e9 01       	movw	r28, r18
    1470:	fb 83       	std	Y+3, r31	; 0x03
    1472:	ea 83       	std	Y+2, r30	; 0x02
    1474:	49 91       	ld	r20, Y+
    1476:	59 91       	ld	r21, Y+
    1478:	c4 0f       	add	r28, r20
    147a:	d5 1f       	adc	r29, r21
    147c:	ec 17       	cp	r30, r28
    147e:	fd 07       	cpc	r31, r29
    1480:	61 f4       	brne	.+24     	; 0x149a <free+0xbe>
    1482:	80 81       	ld	r24, Z
    1484:	91 81       	ldd	r25, Z+1	; 0x01
    1486:	84 0f       	add	r24, r20
    1488:	95 1f       	adc	r25, r21
    148a:	02 96       	adiw	r24, 0x02	; 2
    148c:	e9 01       	movw	r28, r18
    148e:	99 83       	std	Y+1, r25	; 0x01
    1490:	88 83       	st	Y, r24
    1492:	82 81       	ldd	r24, Z+2	; 0x02
    1494:	93 81       	ldd	r25, Z+3	; 0x03
    1496:	9b 83       	std	Y+3, r25	; 0x03
    1498:	8a 83       	std	Y+2, r24	; 0x02
    149a:	e0 e0       	ldi	r30, 0x00	; 0
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	12 96       	adiw	r26, 0x02	; 2
    14a0:	8d 91       	ld	r24, X+
    14a2:	9c 91       	ld	r25, X
    14a4:	13 97       	sbiw	r26, 0x03	; 3
    14a6:	00 97       	sbiw	r24, 0x00	; 0
    14a8:	19 f0       	breq	.+6      	; 0x14b0 <free+0xd4>
    14aa:	fd 01       	movw	r30, r26
    14ac:	dc 01       	movw	r26, r24
    14ae:	f7 cf       	rjmp	.-18     	; 0x149e <free+0xc2>
    14b0:	8d 91       	ld	r24, X+
    14b2:	9c 91       	ld	r25, X
    14b4:	11 97       	sbiw	r26, 0x01	; 1
    14b6:	9d 01       	movw	r18, r26
    14b8:	2e 5f       	subi	r18, 0xFE	; 254
    14ba:	3f 4f       	sbci	r19, 0xFF	; 255
    14bc:	82 0f       	add	r24, r18
    14be:	93 1f       	adc	r25, r19
    14c0:	20 91 20 06 	lds	r18, 0x0620	; 0x800620 <__brkval>
    14c4:	30 91 21 06 	lds	r19, 0x0621	; 0x800621 <__brkval+0x1>
    14c8:	28 17       	cp	r18, r24
    14ca:	39 07       	cpc	r19, r25
    14cc:	69 f4       	brne	.+26     	; 0x14e8 <free+0x10c>
    14ce:	30 97       	sbiw	r30, 0x00	; 0
    14d0:	29 f4       	brne	.+10     	; 0x14dc <free+0x100>
    14d2:	10 92 23 06 	sts	0x0623, r1	; 0x800623 <__flp+0x1>
    14d6:	10 92 22 06 	sts	0x0622, r1	; 0x800622 <__flp>
    14da:	02 c0       	rjmp	.+4      	; 0x14e0 <free+0x104>
    14dc:	13 82       	std	Z+3, r1	; 0x03
    14de:	12 82       	std	Z+2, r1	; 0x02
    14e0:	b0 93 21 06 	sts	0x0621, r27	; 0x800621 <__brkval+0x1>
    14e4:	a0 93 20 06 	sts	0x0620, r26	; 0x800620 <__brkval>
    14e8:	df 91       	pop	r29
    14ea:	cf 91       	pop	r28
    14ec:	08 95       	ret

000014ee <strnlen_P>:
    14ee:	fc 01       	movw	r30, r24
    14f0:	05 90       	lpm	r0, Z+
    14f2:	61 50       	subi	r22, 0x01	; 1
    14f4:	70 40       	sbci	r23, 0x00	; 0
    14f6:	01 10       	cpse	r0, r1
    14f8:	d8 f7       	brcc	.-10     	; 0x14f0 <strnlen_P+0x2>
    14fa:	80 95       	com	r24
    14fc:	90 95       	com	r25
    14fe:	8e 0f       	add	r24, r30
    1500:	9f 1f       	adc	r25, r31
    1502:	08 95       	ret

00001504 <memset>:
    1504:	dc 01       	movw	r26, r24
    1506:	01 c0       	rjmp	.+2      	; 0x150a <memset+0x6>
    1508:	6d 93       	st	X+, r22
    150a:	41 50       	subi	r20, 0x01	; 1
    150c:	50 40       	sbci	r21, 0x00	; 0
    150e:	e0 f7       	brcc	.-8      	; 0x1508 <memset+0x4>
    1510:	08 95       	ret

00001512 <strnlen>:
    1512:	fc 01       	movw	r30, r24
    1514:	61 50       	subi	r22, 0x01	; 1
    1516:	70 40       	sbci	r23, 0x00	; 0
    1518:	01 90       	ld	r0, Z+
    151a:	01 10       	cpse	r0, r1
    151c:	d8 f7       	brcc	.-10     	; 0x1514 <strnlen+0x2>
    151e:	80 95       	com	r24
    1520:	90 95       	com	r25
    1522:	8e 0f       	add	r24, r30
    1524:	9f 1f       	adc	r25, r31
    1526:	08 95       	ret

00001528 <fputc>:
    1528:	0f 93       	push	r16
    152a:	1f 93       	push	r17
    152c:	cf 93       	push	r28
    152e:	df 93       	push	r29
    1530:	fb 01       	movw	r30, r22
    1532:	23 81       	ldd	r18, Z+3	; 0x03
    1534:	21 fd       	sbrc	r18, 1
    1536:	03 c0       	rjmp	.+6      	; 0x153e <fputc+0x16>
    1538:	8f ef       	ldi	r24, 0xFF	; 255
    153a:	9f ef       	ldi	r25, 0xFF	; 255
    153c:	2c c0       	rjmp	.+88     	; 0x1596 <fputc+0x6e>
    153e:	22 ff       	sbrs	r18, 2
    1540:	16 c0       	rjmp	.+44     	; 0x156e <fputc+0x46>
    1542:	46 81       	ldd	r20, Z+6	; 0x06
    1544:	57 81       	ldd	r21, Z+7	; 0x07
    1546:	24 81       	ldd	r18, Z+4	; 0x04
    1548:	35 81       	ldd	r19, Z+5	; 0x05
    154a:	42 17       	cp	r20, r18
    154c:	53 07       	cpc	r21, r19
    154e:	44 f4       	brge	.+16     	; 0x1560 <fputc+0x38>
    1550:	a0 81       	ld	r26, Z
    1552:	b1 81       	ldd	r27, Z+1	; 0x01
    1554:	9d 01       	movw	r18, r26
    1556:	2f 5f       	subi	r18, 0xFF	; 255
    1558:	3f 4f       	sbci	r19, 0xFF	; 255
    155a:	31 83       	std	Z+1, r19	; 0x01
    155c:	20 83       	st	Z, r18
    155e:	8c 93       	st	X, r24
    1560:	26 81       	ldd	r18, Z+6	; 0x06
    1562:	37 81       	ldd	r19, Z+7	; 0x07
    1564:	2f 5f       	subi	r18, 0xFF	; 255
    1566:	3f 4f       	sbci	r19, 0xFF	; 255
    1568:	37 83       	std	Z+7, r19	; 0x07
    156a:	26 83       	std	Z+6, r18	; 0x06
    156c:	14 c0       	rjmp	.+40     	; 0x1596 <fputc+0x6e>
    156e:	8b 01       	movw	r16, r22
    1570:	ec 01       	movw	r28, r24
    1572:	fb 01       	movw	r30, r22
    1574:	00 84       	ldd	r0, Z+8	; 0x08
    1576:	f1 85       	ldd	r31, Z+9	; 0x09
    1578:	e0 2d       	mov	r30, r0
    157a:	09 95       	icall
    157c:	89 2b       	or	r24, r25
    157e:	e1 f6       	brne	.-72     	; 0x1538 <fputc+0x10>
    1580:	d8 01       	movw	r26, r16
    1582:	16 96       	adiw	r26, 0x06	; 6
    1584:	8d 91       	ld	r24, X+
    1586:	9c 91       	ld	r25, X
    1588:	17 97       	sbiw	r26, 0x07	; 7
    158a:	01 96       	adiw	r24, 0x01	; 1
    158c:	17 96       	adiw	r26, 0x07	; 7
    158e:	9c 93       	st	X, r25
    1590:	8e 93       	st	-X, r24
    1592:	16 97       	sbiw	r26, 0x06	; 6
    1594:	ce 01       	movw	r24, r28
    1596:	df 91       	pop	r29
    1598:	cf 91       	pop	r28
    159a:	1f 91       	pop	r17
    159c:	0f 91       	pop	r16
    159e:	08 95       	ret

000015a0 <__ultoa_invert>:
    15a0:	fa 01       	movw	r30, r20
    15a2:	aa 27       	eor	r26, r26
    15a4:	28 30       	cpi	r18, 0x08	; 8
    15a6:	51 f1       	breq	.+84     	; 0x15fc <__ultoa_invert+0x5c>
    15a8:	20 31       	cpi	r18, 0x10	; 16
    15aa:	81 f1       	breq	.+96     	; 0x160c <__ultoa_invert+0x6c>
    15ac:	e8 94       	clt
    15ae:	6f 93       	push	r22
    15b0:	6e 7f       	andi	r22, 0xFE	; 254
    15b2:	6e 5f       	subi	r22, 0xFE	; 254
    15b4:	7f 4f       	sbci	r23, 0xFF	; 255
    15b6:	8f 4f       	sbci	r24, 0xFF	; 255
    15b8:	9f 4f       	sbci	r25, 0xFF	; 255
    15ba:	af 4f       	sbci	r26, 0xFF	; 255
    15bc:	b1 e0       	ldi	r27, 0x01	; 1
    15be:	3e d0       	rcall	.+124    	; 0x163c <__ultoa_invert+0x9c>
    15c0:	b4 e0       	ldi	r27, 0x04	; 4
    15c2:	3c d0       	rcall	.+120    	; 0x163c <__ultoa_invert+0x9c>
    15c4:	67 0f       	add	r22, r23
    15c6:	78 1f       	adc	r23, r24
    15c8:	89 1f       	adc	r24, r25
    15ca:	9a 1f       	adc	r25, r26
    15cc:	a1 1d       	adc	r26, r1
    15ce:	68 0f       	add	r22, r24
    15d0:	79 1f       	adc	r23, r25
    15d2:	8a 1f       	adc	r24, r26
    15d4:	91 1d       	adc	r25, r1
    15d6:	a1 1d       	adc	r26, r1
    15d8:	6a 0f       	add	r22, r26
    15da:	71 1d       	adc	r23, r1
    15dc:	81 1d       	adc	r24, r1
    15de:	91 1d       	adc	r25, r1
    15e0:	a1 1d       	adc	r26, r1
    15e2:	20 d0       	rcall	.+64     	; 0x1624 <__ultoa_invert+0x84>
    15e4:	09 f4       	brne	.+2      	; 0x15e8 <__ultoa_invert+0x48>
    15e6:	68 94       	set
    15e8:	3f 91       	pop	r19
    15ea:	2a e0       	ldi	r18, 0x0A	; 10
    15ec:	26 9f       	mul	r18, r22
    15ee:	11 24       	eor	r1, r1
    15f0:	30 19       	sub	r19, r0
    15f2:	30 5d       	subi	r19, 0xD0	; 208
    15f4:	31 93       	st	Z+, r19
    15f6:	de f6       	brtc	.-74     	; 0x15ae <__ultoa_invert+0xe>
    15f8:	cf 01       	movw	r24, r30
    15fa:	08 95       	ret
    15fc:	46 2f       	mov	r20, r22
    15fe:	47 70       	andi	r20, 0x07	; 7
    1600:	40 5d       	subi	r20, 0xD0	; 208
    1602:	41 93       	st	Z+, r20
    1604:	b3 e0       	ldi	r27, 0x03	; 3
    1606:	0f d0       	rcall	.+30     	; 0x1626 <__ultoa_invert+0x86>
    1608:	c9 f7       	brne	.-14     	; 0x15fc <__ultoa_invert+0x5c>
    160a:	f6 cf       	rjmp	.-20     	; 0x15f8 <__ultoa_invert+0x58>
    160c:	46 2f       	mov	r20, r22
    160e:	4f 70       	andi	r20, 0x0F	; 15
    1610:	40 5d       	subi	r20, 0xD0	; 208
    1612:	4a 33       	cpi	r20, 0x3A	; 58
    1614:	18 f0       	brcs	.+6      	; 0x161c <__ultoa_invert+0x7c>
    1616:	49 5d       	subi	r20, 0xD9	; 217
    1618:	31 fd       	sbrc	r19, 1
    161a:	40 52       	subi	r20, 0x20	; 32
    161c:	41 93       	st	Z+, r20
    161e:	02 d0       	rcall	.+4      	; 0x1624 <__ultoa_invert+0x84>
    1620:	a9 f7       	brne	.-22     	; 0x160c <__ultoa_invert+0x6c>
    1622:	ea cf       	rjmp	.-44     	; 0x15f8 <__ultoa_invert+0x58>
    1624:	b4 e0       	ldi	r27, 0x04	; 4
    1626:	a6 95       	lsr	r26
    1628:	97 95       	ror	r25
    162a:	87 95       	ror	r24
    162c:	77 95       	ror	r23
    162e:	67 95       	ror	r22
    1630:	ba 95       	dec	r27
    1632:	c9 f7       	brne	.-14     	; 0x1626 <__ultoa_invert+0x86>
    1634:	00 97       	sbiw	r24, 0x00	; 0
    1636:	61 05       	cpc	r22, r1
    1638:	71 05       	cpc	r23, r1
    163a:	08 95       	ret
    163c:	9b 01       	movw	r18, r22
    163e:	ac 01       	movw	r20, r24
    1640:	0a 2e       	mov	r0, r26
    1642:	06 94       	lsr	r0
    1644:	57 95       	ror	r21
    1646:	47 95       	ror	r20
    1648:	37 95       	ror	r19
    164a:	27 95       	ror	r18
    164c:	ba 95       	dec	r27
    164e:	c9 f7       	brne	.-14     	; 0x1642 <__ultoa_invert+0xa2>
    1650:	62 0f       	add	r22, r18
    1652:	73 1f       	adc	r23, r19
    1654:	84 1f       	adc	r24, r20
    1656:	95 1f       	adc	r25, r21
    1658:	a0 1d       	adc	r26, r0
    165a:	08 95       	ret

0000165c <__prologue_saves__>:
    165c:	2f 92       	push	r2
    165e:	3f 92       	push	r3
    1660:	4f 92       	push	r4
    1662:	5f 92       	push	r5
    1664:	6f 92       	push	r6
    1666:	7f 92       	push	r7
    1668:	8f 92       	push	r8
    166a:	9f 92       	push	r9
    166c:	af 92       	push	r10
    166e:	bf 92       	push	r11
    1670:	cf 92       	push	r12
    1672:	df 92       	push	r13
    1674:	ef 92       	push	r14
    1676:	ff 92       	push	r15
    1678:	0f 93       	push	r16
    167a:	1f 93       	push	r17
    167c:	cf 93       	push	r28
    167e:	df 93       	push	r29
    1680:	cd b7       	in	r28, 0x3d	; 61
    1682:	de b7       	in	r29, 0x3e	; 62
    1684:	ca 1b       	sub	r28, r26
    1686:	db 0b       	sbc	r29, r27
    1688:	0f b6       	in	r0, 0x3f	; 63
    168a:	f8 94       	cli
    168c:	de bf       	out	0x3e, r29	; 62
    168e:	0f be       	out	0x3f, r0	; 63
    1690:	cd bf       	out	0x3d, r28	; 61
    1692:	09 94       	ijmp

00001694 <__epilogue_restores__>:
    1694:	2a 88       	ldd	r2, Y+18	; 0x12
    1696:	39 88       	ldd	r3, Y+17	; 0x11
    1698:	48 88       	ldd	r4, Y+16	; 0x10
    169a:	5f 84       	ldd	r5, Y+15	; 0x0f
    169c:	6e 84       	ldd	r6, Y+14	; 0x0e
    169e:	7d 84       	ldd	r7, Y+13	; 0x0d
    16a0:	8c 84       	ldd	r8, Y+12	; 0x0c
    16a2:	9b 84       	ldd	r9, Y+11	; 0x0b
    16a4:	aa 84       	ldd	r10, Y+10	; 0x0a
    16a6:	b9 84       	ldd	r11, Y+9	; 0x09
    16a8:	c8 84       	ldd	r12, Y+8	; 0x08
    16aa:	df 80       	ldd	r13, Y+7	; 0x07
    16ac:	ee 80       	ldd	r14, Y+6	; 0x06
    16ae:	fd 80       	ldd	r15, Y+5	; 0x05
    16b0:	0c 81       	ldd	r16, Y+4	; 0x04
    16b2:	1b 81       	ldd	r17, Y+3	; 0x03
    16b4:	aa 81       	ldd	r26, Y+2	; 0x02
    16b6:	b9 81       	ldd	r27, Y+1	; 0x01
    16b8:	ce 0f       	add	r28, r30
    16ba:	d1 1d       	adc	r29, r1
    16bc:	0f b6       	in	r0, 0x3f	; 63
    16be:	f8 94       	cli
    16c0:	de bf       	out	0x3e, r29	; 62
    16c2:	0f be       	out	0x3f, r0	; 63
    16c4:	cd bf       	out	0x3d, r28	; 61
    16c6:	ed 01       	movw	r28, r26
    16c8:	08 95       	ret

000016ca <_exit>:
    16ca:	f8 94       	cli

000016cc <__stop_program>:
    16cc:	ff cf       	rjmp	.-2      	; 0x16cc <__stop_program>
